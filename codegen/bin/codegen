#!/usr/bin/env ruby

CurrentDir = File.dirname(__FILE__)

require 'optparse'
require 'ostruct'

$LOAD_PATH.unshift(File.join(CurrentDir, '..', 'lib'))
require 'code_generator'
require 'parser'

Encoding.default_external = Encoding::UTF_8
Encoding.default_internal = Encoding::UTF_8

options = OpenStruct.new
# default input / output path
options.input = "#{CurrentDir}/../../include/TrustWalletCore"
options.input_generated = "#{CurrentDir}/../../include/Generated/TrustWalletCore"
options.output = "#{CurrentDir}/../../"
options.swift = true
options.java = true
options.jni_h = true
options.jni_c = true
options.wasm_cpp = true
options.ts_declaration = true
options.kotlin = true

OptionParser.new do |opts|
  opts.banner = 'Usage: codegen [options]'

  opts.on('-i', '--input FOLDER', "Input folder with C headers. Default: #{options.input}") do |v|
    options.input = v
  end
  opts.on('-o', '--output FOLDER', "Output folder. Default: #{options.output}") do |v|
    options.output = v
  end
  opts.on('-s', '--swift', "Generate Swift code. Default: #{options.swift}") do |v|
    options.swift = v
  end
  opts.on('-j', '--java', "Generate Java code. Default: #{options.java}") do |v|
    options.java = v
  end
  opts.on('-d', '--jnih', "Generate JNI header. Default: #{options.jni_h}") do |v|
    options.jni_h = v
  end
  opts.on('-c', '--jnic', "Generate JNI code. Default: #{options.jni_c}") do |v|
    options.jni_c = v
  end
  opts.on('-w', '--wasm-cpp', "Generate cpp code for Wasm(Emscripten). Default: #{options.wasm_cpp}") do |v|
    options.wasm_cpp = v
  end
  opts.on('-t', '--typescript-declaration', "Generate typescript declaration file Default: #{options.ts_declaration}") do |v|
    options.ts_declaration = v
  end
  opts.on('-k', '--kotlin', "Generate Kotlin code. Default: #{options.kotlin}") do |v|
    options.kotlin = v
  end
  opts.on_tail('-h', '--help', 'Show this message') do
    puts opts
    exit
  end
end.parse!

entities = []
files = []
[options.input, options.input_generated].each do |input_dir|
  Dir.foreach(input_dir) do |item|
    next if ['.', '..', '.DS_Store'].include?(item)

    file_path = File.expand_path(File.join(input_dir, item))
    entity = Parser.new(path: file_path).parse
    next if entity.nil?

    entities << entity
    files << File.basename(item, '.h').sub(/^TW/, '')
  end
end

generator = CodeGenerator.new(entities: entities, files: files, output_folder: options.output)
if options.swift
  generator.render_swift
end
if options.java
  generator.render_java
end
if options.jni_h
  generator.render_jni_h
end
if options.jni_c
  generator.render_jni_c
end
if options.wasm_cpp
  generator.render_wasm_h
  generator.render_wasm_cpp
end
if options.ts_declaration
  generator.render_ts_declaration
end
if options.kotlin
  generator.render_kotlin_common
  generator.render_kotlin_android
  generator.render_kotlin_ios
  generator.render_kotlin_js
  generator.render_kotlin_js_accessors
  generator.render_kotlin_jni_h
  generator.render_kotlin_jni_c
end
