// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.20.3
// source: NULS.proto

package nuls

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	common "tw/protos/common"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Transaction from address
type TransactionCoinFrom struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Source address
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	// Chain ID
	AssetsChainid uint32 `protobuf:"varint,2,opt,name=assets_chainid,json=assetsChainid,proto3" json:"assets_chainid,omitempty"`
	// ID of the asset
	AssetsId uint32 `protobuf:"varint,3,opt,name=assets_id,json=assetsId,proto3" json:"assets_id,omitempty"`
	// transaction out amount (256-bit number)
	IdAmount []byte `protobuf:"bytes,4,opt,name=id_amount,json=idAmount,proto3" json:"id_amount,omitempty"`
	// Nonce, 8 bytes
	Nonce []byte `protobuf:"bytes,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// lock status: 1 locked; 0 unlocked
	Locked        uint32 `protobuf:"varint,6,opt,name=locked,proto3" json:"locked,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionCoinFrom) Reset() {
	*x = TransactionCoinFrom{}
	mi := &file_NULS_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionCoinFrom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionCoinFrom) ProtoMessage() {}

func (x *TransactionCoinFrom) ProtoReflect() protoreflect.Message {
	mi := &file_NULS_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionCoinFrom.ProtoReflect.Descriptor instead.
func (*TransactionCoinFrom) Descriptor() ([]byte, []int) {
	return file_NULS_proto_rawDescGZIP(), []int{0}
}

func (x *TransactionCoinFrom) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *TransactionCoinFrom) GetAssetsChainid() uint32 {
	if x != nil {
		return x.AssetsChainid
	}
	return 0
}

func (x *TransactionCoinFrom) GetAssetsId() uint32 {
	if x != nil {
		return x.AssetsId
	}
	return 0
}

func (x *TransactionCoinFrom) GetIdAmount() []byte {
	if x != nil {
		return x.IdAmount
	}
	return nil
}

func (x *TransactionCoinFrom) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *TransactionCoinFrom) GetLocked() uint32 {
	if x != nil {
		return x.Locked
	}
	return 0
}

// Transaction to a destination
type TransactionCoinTo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// destination address
	ToAddress string `protobuf:"bytes,1,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// Chain ID
	AssetsChainid uint32 `protobuf:"varint,2,opt,name=assets_chainid,json=assetsChainid,proto3" json:"assets_chainid,omitempty"`
	// ID of the asset
	AssetsId uint32 `protobuf:"varint,3,opt,name=assets_id,json=assetsId,proto3" json:"assets_id,omitempty"`
	// transaction amount (uint256, serialized big endian)
	IdAmount []byte `protobuf:"bytes,4,opt,name=id_amount,json=idAmount,proto3" json:"id_amount,omitempty"`
	// lock time
	LockTime      uint32 `protobuf:"varint,5,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionCoinTo) Reset() {
	*x = TransactionCoinTo{}
	mi := &file_NULS_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionCoinTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionCoinTo) ProtoMessage() {}

func (x *TransactionCoinTo) ProtoReflect() protoreflect.Message {
	mi := &file_NULS_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionCoinTo.ProtoReflect.Descriptor instead.
func (*TransactionCoinTo) Descriptor() ([]byte, []int) {
	return file_NULS_proto_rawDescGZIP(), []int{1}
}

func (x *TransactionCoinTo) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *TransactionCoinTo) GetAssetsChainid() uint32 {
	if x != nil {
		return x.AssetsChainid
	}
	return 0
}

func (x *TransactionCoinTo) GetAssetsId() uint32 {
	if x != nil {
		return x.AssetsId
	}
	return 0
}

func (x *TransactionCoinTo) GetIdAmount() []byte {
	if x != nil {
		return x.IdAmount
	}
	return nil
}

func (x *TransactionCoinTo) GetLockTime() uint32 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

// A signature
type Signature struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Length of public key data
	PkeyLen uint32 `protobuf:"varint,1,opt,name=pkey_len,json=pkeyLen,proto3" json:"pkey_len,omitempty"`
	// The public key
	PublicKey []byte `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// The length of the signature
	SigLen uint32 `protobuf:"varint,3,opt,name=sig_len,json=sigLen,proto3" json:"sig_len,omitempty"`
	// The signature data
	Signature     []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Signature) Reset() {
	*x = Signature{}
	mi := &file_NULS_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_NULS_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_NULS_proto_rawDescGZIP(), []int{2}
}

func (x *Signature) GetPkeyLen() uint32 {
	if x != nil {
		return x.PkeyLen
	}
	return 0
}

func (x *Signature) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *Signature) GetSigLen() uint32 {
	if x != nil {
		return x.SigLen
	}
	return 0
}

func (x *Signature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// A transaction
type Transaction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// transaction type
	Type uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	// Timestamp of the transaction
	Timestamp uint32 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Optional string remark
	Remark string `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark,omitempty"`
	// The raw data
	TxData []byte `protobuf:"bytes,4,opt,name=tx_data,json=txData,proto3" json:"tx_data,omitempty"`
	// CoinFrom
	Input []*TransactionCoinFrom `protobuf:"bytes,5,rep,name=input,proto3" json:"input,omitempty"`
	// CoinTo
	Output []*TransactionCoinTo `protobuf:"bytes,6,rep,name=output,proto3" json:"output,omitempty"`
	// Signature
	TxSigs *Signature `protobuf:"bytes,7,opt,name=tx_sigs,json=txSigs,proto3" json:"tx_sigs,omitempty"`
	// Tx hash
	Hash          uint32 `protobuf:"varint,8,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	mi := &file_NULS_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_NULS_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_NULS_proto_rawDescGZIP(), []int{3}
}

func (x *Transaction) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Transaction) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Transaction) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *Transaction) GetTxData() []byte {
	if x != nil {
		return x.TxData
	}
	return nil
}

func (x *Transaction) GetInput() []*TransactionCoinFrom {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *Transaction) GetOutput() []*TransactionCoinTo {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *Transaction) GetTxSigs() *Signature {
	if x != nil {
		return x.TxSigs
	}
	return nil
}

func (x *Transaction) GetHash() uint32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

// Input data necessary to create a signed order.
type SigningInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The secret private key used for signing (32 bytes).
	PrivateKey []byte `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// Source address
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// Destination address
	To string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	// Transfer amount (uint256, serialized big endian)
	Amount []byte `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// Chain ID
	ChainId uint32 `protobuf:"varint,5,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Asset ID
	IdassetsId uint32 `protobuf:"varint,6,opt,name=idassets_id,json=idassetsId,proto3" json:"idassets_id,omitempty"`
	// The last 8 bytes of latest transaction hash
	Nonce []byte `protobuf:"bytes,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Optional memo remark
	Remark string `protobuf:"bytes,8,opt,name=remark,proto3" json:"remark,omitempty"`
	// Account balance
	Balance []byte `protobuf:"bytes,9,opt,name=balance,proto3" json:"balance,omitempty"`
	// time, accurate to the second
	Timestamp uint32 `protobuf:"varint,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// external address paying fee, required for token transfer, optional for NULS transfer, depending on if an external fee payer is provided. If provided, it will be the fee paying address.
	FeePayer string `protobuf:"bytes,11,opt,name=fee_payer,json=feePayer,proto3" json:"fee_payer,omitempty"`
	// fee payer address nonce, required for token transfer, optional for NULS transfer, depending on if fee_payer is provided.
	FeePayerNonce []byte `protobuf:"bytes,12,opt,name=fee_payer_nonce,json=feePayerNonce,proto3" json:"fee_payer_nonce,omitempty"`
	// fee payer address private key, required for token transfer, optional for NULS transfer, depending on if fee_payer is provided.
	FeePayerPrivateKey []byte `protobuf:"bytes,13,opt,name=fee_payer_private_key,json=feePayerPrivateKey,proto3" json:"fee_payer_private_key,omitempty"`
	// fee payer NULS balance, it is required for token transfer. optional for NULS transfer, depending on if fee_payer is provided.
	FeePayerBalance []byte `protobuf:"bytes,14,opt,name=fee_payer_balance,json=feePayerBalance,proto3" json:"fee_payer_balance,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SigningInput) Reset() {
	*x = SigningInput{}
	mi := &file_NULS_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningInput) ProtoMessage() {}

func (x *SigningInput) ProtoReflect() protoreflect.Message {
	mi := &file_NULS_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningInput.ProtoReflect.Descriptor instead.
func (*SigningInput) Descriptor() ([]byte, []int) {
	return file_NULS_proto_rawDescGZIP(), []int{4}
}

func (x *SigningInput) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *SigningInput) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *SigningInput) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *SigningInput) GetAmount() []byte {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *SigningInput) GetChainId() uint32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *SigningInput) GetIdassetsId() uint32 {
	if x != nil {
		return x.IdassetsId
	}
	return 0
}

func (x *SigningInput) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *SigningInput) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *SigningInput) GetBalance() []byte {
	if x != nil {
		return x.Balance
	}
	return nil
}

func (x *SigningInput) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SigningInput) GetFeePayer() string {
	if x != nil {
		return x.FeePayer
	}
	return ""
}

func (x *SigningInput) GetFeePayerNonce() []byte {
	if x != nil {
		return x.FeePayerNonce
	}
	return nil
}

func (x *SigningInput) GetFeePayerPrivateKey() []byte {
	if x != nil {
		return x.FeePayerPrivateKey
	}
	return nil
}

func (x *SigningInput) GetFeePayerBalance() []byte {
	if x != nil {
		return x.FeePayerBalance
	}
	return nil
}

// Result containing the signed and encoded transaction.
type SigningOutput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Encoded transaction
	Encoded []byte `protobuf:"bytes,1,opt,name=encoded,proto3" json:"encoded,omitempty"`
	// error code, 0 is ok, other codes will be treated as errors
	Error common.SigningError `protobuf:"varint,2,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// error code description
	ErrorMessage  string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningOutput) Reset() {
	*x = SigningOutput{}
	mi := &file_NULS_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningOutput) ProtoMessage() {}

func (x *SigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_NULS_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningOutput.ProtoReflect.Descriptor instead.
func (*SigningOutput) Descriptor() ([]byte, []int) {
	return file_NULS_proto_rawDescGZIP(), []int{5}
}

func (x *SigningOutput) GetEncoded() []byte {
	if x != nil {
		return x.Encoded
	}
	return nil
}

func (x *SigningOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *SigningOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_NULS_proto protoreflect.FileDescriptor

const file_NULS_proto_rawDesc = "" +
	"\n" +
	"\n" +
	"NULS.proto\x12\rTW.NULS.Proto\x1a\fCommon.proto\"\xc7\x01\n" +
	"\x13TransactionCoinFrom\x12!\n" +
	"\ffrom_address\x18\x01 \x01(\tR\vfromAddress\x12%\n" +
	"\x0eassets_chainid\x18\x02 \x01(\rR\rassetsChainid\x12\x1b\n" +
	"\tassets_id\x18\x03 \x01(\rR\bassetsId\x12\x1b\n" +
	"\tid_amount\x18\x04 \x01(\fR\bidAmount\x12\x14\n" +
	"\x05nonce\x18\x05 \x01(\fR\x05nonce\x12\x16\n" +
	"\x06locked\x18\x06 \x01(\rR\x06locked\"\xb0\x01\n" +
	"\x11TransactionCoinTo\x12\x1d\n" +
	"\n" +
	"to_address\x18\x01 \x01(\tR\ttoAddress\x12%\n" +
	"\x0eassets_chainid\x18\x02 \x01(\rR\rassetsChainid\x12\x1b\n" +
	"\tassets_id\x18\x03 \x01(\rR\bassetsId\x12\x1b\n" +
	"\tid_amount\x18\x04 \x01(\fR\bidAmount\x12\x1b\n" +
	"\tlock_time\x18\x05 \x01(\rR\blockTime\"|\n" +
	"\tSignature\x12\x19\n" +
	"\bpkey_len\x18\x01 \x01(\rR\apkeyLen\x12\x1d\n" +
	"\n" +
	"public_key\x18\x02 \x01(\fR\tpublicKey\x12\x17\n" +
	"\asig_len\x18\x03 \x01(\rR\x06sigLen\x12\x1c\n" +
	"\tsignature\x18\x04 \x01(\fR\tsignature\"\xab\x02\n" +
	"\vTransaction\x12\x12\n" +
	"\x04type\x18\x01 \x01(\rR\x04type\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\rR\ttimestamp\x12\x16\n" +
	"\x06remark\x18\x03 \x01(\tR\x06remark\x12\x17\n" +
	"\atx_data\x18\x04 \x01(\fR\x06txData\x128\n" +
	"\x05input\x18\x05 \x03(\v2\".TW.NULS.Proto.TransactionCoinFromR\x05input\x128\n" +
	"\x06output\x18\x06 \x03(\v2 .TW.NULS.Proto.TransactionCoinToR\x06output\x121\n" +
	"\atx_sigs\x18\a \x01(\v2\x18.TW.NULS.Proto.SignatureR\x06txSigs\x12\x12\n" +
	"\x04hash\x18\b \x01(\rR\x04hash\"\xb1\x03\n" +
	"\fSigningInput\x12\x1f\n" +
	"\vprivate_key\x18\x01 \x01(\fR\n" +
	"privateKey\x12\x12\n" +
	"\x04from\x18\x02 \x01(\tR\x04from\x12\x0e\n" +
	"\x02to\x18\x03 \x01(\tR\x02to\x12\x16\n" +
	"\x06amount\x18\x04 \x01(\fR\x06amount\x12\x19\n" +
	"\bchain_id\x18\x05 \x01(\rR\achainId\x12\x1f\n" +
	"\vidassets_id\x18\x06 \x01(\rR\n" +
	"idassetsId\x12\x14\n" +
	"\x05nonce\x18\a \x01(\fR\x05nonce\x12\x16\n" +
	"\x06remark\x18\b \x01(\tR\x06remark\x12\x18\n" +
	"\abalance\x18\t \x01(\fR\abalance\x12\x1c\n" +
	"\ttimestamp\x18\n" +
	" \x01(\rR\ttimestamp\x12\x1b\n" +
	"\tfee_payer\x18\v \x01(\tR\bfeePayer\x12&\n" +
	"\x0ffee_payer_nonce\x18\f \x01(\fR\rfeePayerNonce\x121\n" +
	"\x15fee_payer_private_key\x18\r \x01(\fR\x12feePayerPrivateKey\x12*\n" +
	"\x11fee_payer_balance\x18\x0e \x01(\fR\x0ffeePayerBalance\"\x83\x01\n" +
	"\rSigningOutput\x12\x18\n" +
	"\aencoded\x18\x01 \x01(\fR\aencoded\x123\n" +
	"\x05error\x18\x02 \x01(\x0e2\x1d.TW.Common.Proto.SigningErrorR\x05error\x12#\n" +
	"\rerror_message\x18\x03 \x01(\tR\ferrorMessageB\x17\n" +
	"\x15wallet.core.jni.protob\x06proto3"

var (
	file_NULS_proto_rawDescOnce sync.Once
	file_NULS_proto_rawDescData []byte
)

func file_NULS_proto_rawDescGZIP() []byte {
	file_NULS_proto_rawDescOnce.Do(func() {
		file_NULS_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_NULS_proto_rawDesc), len(file_NULS_proto_rawDesc)))
	})
	return file_NULS_proto_rawDescData
}

var file_NULS_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_NULS_proto_goTypes = []any{
	(*TransactionCoinFrom)(nil), // 0: TW.NULS.Proto.TransactionCoinFrom
	(*TransactionCoinTo)(nil),   // 1: TW.NULS.Proto.TransactionCoinTo
	(*Signature)(nil),           // 2: TW.NULS.Proto.Signature
	(*Transaction)(nil),         // 3: TW.NULS.Proto.Transaction
	(*SigningInput)(nil),        // 4: TW.NULS.Proto.SigningInput
	(*SigningOutput)(nil),       // 5: TW.NULS.Proto.SigningOutput
	(common.SigningError)(0),    // 6: TW.Common.Proto.SigningError
}
var file_NULS_proto_depIdxs = []int32{
	0, // 0: TW.NULS.Proto.Transaction.input:type_name -> TW.NULS.Proto.TransactionCoinFrom
	1, // 1: TW.NULS.Proto.Transaction.output:type_name -> TW.NULS.Proto.TransactionCoinTo
	2, // 2: TW.NULS.Proto.Transaction.tx_sigs:type_name -> TW.NULS.Proto.Signature
	6, // 3: TW.NULS.Proto.SigningOutput.error:type_name -> TW.Common.Proto.SigningError
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_NULS_proto_init() }
func file_NULS_proto_init() {
	if File_NULS_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_NULS_proto_rawDesc), len(file_NULS_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_NULS_proto_goTypes,
		DependencyIndexes: file_NULS_proto_depIdxs,
		MessageInfos:      file_NULS_proto_msgTypes,
	}.Build()
	File_NULS_proto = out.File
	file_NULS_proto_goTypes = nil
	file_NULS_proto_depIdxs = nil
}
