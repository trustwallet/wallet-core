// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.20.3
// source: VeChain.proto

package vechain

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	common "tw/protos/common"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A clause, between a sender and destination
type Clause struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Recipient address.
	To string `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	// / Transaction amount (uint256, serialized big endian)
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// / Payload data.
	Data          []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Clause) Reset() {
	*x = Clause{}
	mi := &file_VeChain_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Clause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clause) ProtoMessage() {}

func (x *Clause) ProtoReflect() protoreflect.Message {
	mi := &file_VeChain_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clause.ProtoReflect.Descriptor instead.
func (*Clause) Descriptor() ([]byte, []int) {
	return file_VeChain_proto_rawDescGZIP(), []int{0}
}

func (x *Clause) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Clause) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Clause) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Input data necessary to create a signed transaction.
type SigningInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Last byte of the genesis block ID which is used to identify a blockchain to prevent the cross-chain replay attack.
	ChainTag uint32 `protobuf:"varint,1,opt,name=chain_tag,json=chainTag,proto3" json:"chain_tag,omitempty"`
	// / Reference to a specific block.
	BlockRef uint64 `protobuf:"varint,2,opt,name=block_ref,json=blockRef,proto3" json:"block_ref,omitempty"`
	// / How long, in terms of the number of blocks, the transaction will be allowed to be mined in VeChainThor.
	Expiration uint32 `protobuf:"varint,3,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// / An array of Clause objects.
	// /
	// / Each clause contains fields To, Value and Data to enable a single transaction to carry multiple tasks issued
	// / by the transaction sender.
	Clauses []*Clause `protobuf:"bytes,4,rep,name=clauses,proto3" json:"clauses,omitempty"`
	// / Coefficient used to calculate the gas price for the transaction.
	GasPriceCoef uint32 `protobuf:"varint,5,opt,name=gas_price_coef,json=gasPriceCoef,proto3" json:"gas_price_coef,omitempty"`
	// / Maximum amount of gas allowed to pay for the transaction.
	Gas uint64 `protobuf:"varint,6,opt,name=gas,proto3" json:"gas,omitempty"`
	// / ID of the transaction on which the current transaction depends.
	DependsOn []byte `protobuf:"bytes,7,opt,name=depends_on,json=dependsOn,proto3" json:"depends_on,omitempty"`
	// / Number set by user.
	Nonce uint64 `protobuf:"varint,8,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// / The secret private key used for signing (32 bytes).
	PrivateKey    []byte `protobuf:"bytes,9,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningInput) Reset() {
	*x = SigningInput{}
	mi := &file_VeChain_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningInput) ProtoMessage() {}

func (x *SigningInput) ProtoReflect() protoreflect.Message {
	mi := &file_VeChain_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningInput.ProtoReflect.Descriptor instead.
func (*SigningInput) Descriptor() ([]byte, []int) {
	return file_VeChain_proto_rawDescGZIP(), []int{1}
}

func (x *SigningInput) GetChainTag() uint32 {
	if x != nil {
		return x.ChainTag
	}
	return 0
}

func (x *SigningInput) GetBlockRef() uint64 {
	if x != nil {
		return x.BlockRef
	}
	return 0
}

func (x *SigningInput) GetExpiration() uint32 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

func (x *SigningInput) GetClauses() []*Clause {
	if x != nil {
		return x.Clauses
	}
	return nil
}

func (x *SigningInput) GetGasPriceCoef() uint32 {
	if x != nil {
		return x.GasPriceCoef
	}
	return 0
}

func (x *SigningInput) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *SigningInput) GetDependsOn() []byte {
	if x != nil {
		return x.DependsOn
	}
	return nil
}

func (x *SigningInput) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *SigningInput) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

// Result containing the signed and encoded transaction.
type SigningOutput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Signed and encoded transaction bytes.
	Encoded []byte `protobuf:"bytes,1,opt,name=encoded,proto3" json:"encoded,omitempty"`
	// Signature.
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// error code, 0 is ok, other codes will be treated as errors
	Error common.SigningError `protobuf:"varint,3,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// error code description
	ErrorMessage  string `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningOutput) Reset() {
	*x = SigningOutput{}
	mi := &file_VeChain_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningOutput) ProtoMessage() {}

func (x *SigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_VeChain_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningOutput.ProtoReflect.Descriptor instead.
func (*SigningOutput) Descriptor() ([]byte, []int) {
	return file_VeChain_proto_rawDescGZIP(), []int{2}
}

func (x *SigningOutput) GetEncoded() []byte {
	if x != nil {
		return x.Encoded
	}
	return nil
}

func (x *SigningOutput) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SigningOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *SigningOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_VeChain_proto protoreflect.FileDescriptor

const file_VeChain_proto_rawDesc = "" +
	"\n" +
	"\rVeChain.proto\x12\x10TW.VeChain.Proto\x1a\fCommon.proto\"B\n" +
	"\x06Clause\x12\x0e\n" +
	"\x02to\x18\x01 \x01(\tR\x02to\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value\x12\x12\n" +
	"\x04data\x18\x03 \x01(\fR\x04data\"\xaa\x02\n" +
	"\fSigningInput\x12\x1b\n" +
	"\tchain_tag\x18\x01 \x01(\rR\bchainTag\x12\x1b\n" +
	"\tblock_ref\x18\x02 \x01(\x04R\bblockRef\x12\x1e\n" +
	"\n" +
	"expiration\x18\x03 \x01(\rR\n" +
	"expiration\x122\n" +
	"\aclauses\x18\x04 \x03(\v2\x18.TW.VeChain.Proto.ClauseR\aclauses\x12$\n" +
	"\x0egas_price_coef\x18\x05 \x01(\rR\fgasPriceCoef\x12\x10\n" +
	"\x03gas\x18\x06 \x01(\x04R\x03gas\x12\x1d\n" +
	"\n" +
	"depends_on\x18\a \x01(\fR\tdependsOn\x12\x14\n" +
	"\x05nonce\x18\b \x01(\x04R\x05nonce\x12\x1f\n" +
	"\vprivate_key\x18\t \x01(\fR\n" +
	"privateKey\"\xa1\x01\n" +
	"\rSigningOutput\x12\x18\n" +
	"\aencoded\x18\x01 \x01(\fR\aencoded\x12\x1c\n" +
	"\tsignature\x18\x02 \x01(\fR\tsignature\x123\n" +
	"\x05error\x18\x03 \x01(\x0e2\x1d.TW.Common.Proto.SigningErrorR\x05error\x12#\n" +
	"\rerror_message\x18\x04 \x01(\tR\ferrorMessageB\x17\n" +
	"\x15wallet.core.jni.protob\x06proto3"

var (
	file_VeChain_proto_rawDescOnce sync.Once
	file_VeChain_proto_rawDescData []byte
)

func file_VeChain_proto_rawDescGZIP() []byte {
	file_VeChain_proto_rawDescOnce.Do(func() {
		file_VeChain_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_VeChain_proto_rawDesc), len(file_VeChain_proto_rawDesc)))
	})
	return file_VeChain_proto_rawDescData
}

var file_VeChain_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_VeChain_proto_goTypes = []any{
	(*Clause)(nil),           // 0: TW.VeChain.Proto.Clause
	(*SigningInput)(nil),     // 1: TW.VeChain.Proto.SigningInput
	(*SigningOutput)(nil),    // 2: TW.VeChain.Proto.SigningOutput
	(common.SigningError)(0), // 3: TW.Common.Proto.SigningError
}
var file_VeChain_proto_depIdxs = []int32{
	0, // 0: TW.VeChain.Proto.SigningInput.clauses:type_name -> TW.VeChain.Proto.Clause
	3, // 1: TW.VeChain.Proto.SigningOutput.error:type_name -> TW.Common.Proto.SigningError
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_VeChain_proto_init() }
func file_VeChain_proto_init() {
	if File_VeChain_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_VeChain_proto_rawDesc), len(file_VeChain_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_VeChain_proto_goTypes,
		DependencyIndexes: file_VeChain_proto_depIdxs,
		MessageInfos:      file_VeChain_proto_msgTypes,
	}.Build()
	File_VeChain_proto = out.File
	file_VeChain_proto_goTypes = nil
	file_VeChain_proto_depIdxs = nil
}
