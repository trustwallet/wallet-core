// SPDX-License-Identifier: Apache-2.0
//
// Copyright Â© 2017 Trust Wallet.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.20.3
// source: Hedera.proto

package hedera

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// An exact date and time. This is the same data structure as the protobuf Timestamp.proto
// (see the comments in https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto)
type Timestamp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Number of complete seconds since the start of the epoch
	Seconds int64 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	// Number of nanoseconds since the start of the last second
	Nanos         int32 `protobuf:"varint,2,opt,name=nanos,proto3" json:"nanos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	mi := &file_Hedera_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_Hedera_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_Hedera_proto_rawDescGZIP(), []int{0}
}

func (x *Timestamp) GetSeconds() int64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *Timestamp) GetNanos() int32 {
	if x != nil {
		return x.Nanos
	}
	return 0
}

// The ID for a transaction. This is used for retrieving receipts and records for a transaction, for
// appending to a file right after creating it, for instantiating a smart contract with bytecode in
// a file just created, and internally by the network for detecting when duplicate transactions are
// submitted. A user might get a transaction processed faster by submitting it to N nodes, each with
// a different node account, but all with the same TransactionID. Then, the transaction will take
// effect when the first of all those nodes submits the transaction and it reaches consensus. The
// other transactions will not take effect. So this could make the transaction take effect faster,
// if any given node might be slow. However, the full transaction fee is charged for each
// transaction, so the total fee is N times as much if the transaction is sent to N nodes.
//
// Applicable to Scheduled Transactions:
//   - The ID of a Scheduled Transaction has transactionValidStart and accountIDs inherited from the
//     ScheduleCreate transaction that created it. That is to say that they are equal
//   - The scheduled property is true for Scheduled Transactions
//   - transactionValidStart, accountID and scheduled properties should be omitted
type TransactionID struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The transaction is invalid if consensusTimestamp < transactionID.transactionStartValid
	TransactionValidStart *Timestamp `protobuf:"bytes,1,opt,name=transactionValidStart,proto3" json:"transactionValidStart,omitempty"`
	// The Account ID that paid for this transaction
	AccountID string `protobuf:"bytes,2,opt,name=accountID,proto3" json:"accountID,omitempty"`
	// Whether the Transaction is of type Scheduled or no
	Scheduled bool `protobuf:"varint,3,opt,name=scheduled,proto3" json:"scheduled,omitempty"`
	// The identifier for an internal transaction that was spawned as part
	// of handling a user transaction. (These internal transactions share the
	// transactionValidStart and accountID of the user transaction, so a
	// nonce is necessary to give them a unique TransactionID.)
	//
	// An example is when a "parent" ContractCreate or ContractCall transaction
	// calls one or more HTS precompiled contracts; each of the "child" transactions spawned for a precompile has a id
	// with a different nonce.
	Nonce         int32 `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionID) Reset() {
	*x = TransactionID{}
	mi := &file_Hedera_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionID) ProtoMessage() {}

func (x *TransactionID) ProtoReflect() protoreflect.Message {
	mi := &file_Hedera_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionID.ProtoReflect.Descriptor instead.
func (*TransactionID) Descriptor() ([]byte, []int) {
	return file_Hedera_proto_rawDescGZIP(), []int{1}
}

func (x *TransactionID) GetTransactionValidStart() *Timestamp {
	if x != nil {
		return x.TransactionValidStart
	}
	return nil
}

func (x *TransactionID) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *TransactionID) GetScheduled() bool {
	if x != nil {
		return x.Scheduled
	}
	return false
}

func (x *TransactionID) GetNonce() int32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

// Necessary fields to process a TransferMessage
type TransferMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Source Account address (string)
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// Destination Account address (string)
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// Amount to be transferred (sint64)
	Amount        int64 `protobuf:"zigzag64,3,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransferMessage) Reset() {
	*x = TransferMessage{}
	mi := &file_Hedera_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferMessage) ProtoMessage() {}

func (x *TransferMessage) ProtoReflect() protoreflect.Message {
	mi := &file_Hedera_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferMessage.ProtoReflect.Descriptor instead.
func (*TransferMessage) Descriptor() ([]byte, []int) {
	return file_Hedera_proto_rawDescGZIP(), []int{2}
}

func (x *TransferMessage) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *TransferMessage) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *TransferMessage) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// A single transaction. All transaction types are possible here.
type TransactionBody struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID for this transaction, which includes the payer's account (the account paying the transaction fee).
	// If two transactions have the same transactionID, they won't both have an effect
	TransactionID *TransactionID `protobuf:"bytes,1,opt,name=transactionID,proto3" json:"transactionID,omitempty"`
	// The account of the node that submits the client's transaction to the network
	NodeAccountID string `protobuf:"bytes,2,opt,name=nodeAccountID,proto3" json:"nodeAccountID,omitempty"`
	// The maximum transaction fee the client is willing to pay
	TransactionFee uint64 `protobuf:"varint,3,opt,name=transactionFee,proto3" json:"transactionFee,omitempty"`
	// The transaction is invalid if consensusTimestamp > transactionID.transactionValidStart + transactionValidDuration
	TransactionValidDuration int64 `protobuf:"varint,4,opt,name=transactionValidDuration,proto3" json:"transactionValidDuration,omitempty"`
	// Any notes or descriptions that should be put into the record (max length 100)
	Memo string `protobuf:"bytes,5,opt,name=memo,proto3" json:"memo,omitempty"`
	// The choices here are arranged by service in roughly lexicographical order. The field ordinals are non-sequential,
	// and a result of the historical order of implementation.
	//
	// Types that are valid to be assigned to Data:
	//
	//	*TransactionBody_Transfer
	Data          isTransactionBody_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionBody) Reset() {
	*x = TransactionBody{}
	mi := &file_Hedera_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionBody) ProtoMessage() {}

func (x *TransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_Hedera_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionBody.ProtoReflect.Descriptor instead.
func (*TransactionBody) Descriptor() ([]byte, []int) {
	return file_Hedera_proto_rawDescGZIP(), []int{3}
}

func (x *TransactionBody) GetTransactionID() *TransactionID {
	if x != nil {
		return x.TransactionID
	}
	return nil
}

func (x *TransactionBody) GetNodeAccountID() string {
	if x != nil {
		return x.NodeAccountID
	}
	return ""
}

func (x *TransactionBody) GetTransactionFee() uint64 {
	if x != nil {
		return x.TransactionFee
	}
	return 0
}

func (x *TransactionBody) GetTransactionValidDuration() int64 {
	if x != nil {
		return x.TransactionValidDuration
	}
	return 0
}

func (x *TransactionBody) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *TransactionBody) GetData() isTransactionBody_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TransactionBody) GetTransfer() *TransferMessage {
	if x != nil {
		if x, ok := x.Data.(*TransactionBody_Transfer); ok {
			return x.Transfer
		}
	}
	return nil
}

type isTransactionBody_Data interface {
	isTransactionBody_Data()
}

type TransactionBody_Transfer struct {
	// Transfer amount between accounts
	Transfer *TransferMessage `protobuf:"bytes,6,opt,name=transfer,proto3,oneof"`
}

func (*TransactionBody_Transfer) isTransactionBody_Data() {}

// Input data necessary to create a signed transaction.
type SigningInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Private key to sign the transaction (bytes)
	PrivateKey []byte `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// The transaction body
	Body          *TransactionBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningInput) Reset() {
	*x = SigningInput{}
	mi := &file_Hedera_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningInput) ProtoMessage() {}

func (x *SigningInput) ProtoReflect() protoreflect.Message {
	mi := &file_Hedera_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningInput.ProtoReflect.Descriptor instead.
func (*SigningInput) Descriptor() ([]byte, []int) {
	return file_Hedera_proto_rawDescGZIP(), []int{4}
}

func (x *SigningInput) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *SigningInput) GetBody() *TransactionBody {
	if x != nil {
		return x.Body
	}
	return nil
}

// Transaction signing output.
type SigningOutput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Signed and encoded transaction bytes.
	Encoded       []byte `protobuf:"bytes,1,opt,name=encoded,proto3" json:"encoded,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningOutput) Reset() {
	*x = SigningOutput{}
	mi := &file_Hedera_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningOutput) ProtoMessage() {}

func (x *SigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_Hedera_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningOutput.ProtoReflect.Descriptor instead.
func (*SigningOutput) Descriptor() ([]byte, []int) {
	return file_Hedera_proto_rawDescGZIP(), []int{5}
}

func (x *SigningOutput) GetEncoded() []byte {
	if x != nil {
		return x.Encoded
	}
	return nil
}

var File_Hedera_proto protoreflect.FileDescriptor

const file_Hedera_proto_rawDesc = "" +
	"\n" +
	"\fHedera.proto\x12\x0fTW.Hedera.Proto\";\n" +
	"\tTimestamp\x12\x18\n" +
	"\aseconds\x18\x01 \x01(\x03R\aseconds\x12\x14\n" +
	"\x05nanos\x18\x02 \x01(\x05R\x05nanos\"\xb3\x01\n" +
	"\rTransactionID\x12P\n" +
	"\x15transactionValidStart\x18\x01 \x01(\v2\x1a.TW.Hedera.Proto.TimestampR\x15transactionValidStart\x12\x1c\n" +
	"\taccountID\x18\x02 \x01(\tR\taccountID\x12\x1c\n" +
	"\tscheduled\x18\x03 \x01(\bR\tscheduled\x12\x14\n" +
	"\x05nonce\x18\x04 \x01(\x05R\x05nonce\"M\n" +
	"\x0fTransferMessage\x12\x12\n" +
	"\x04from\x18\x01 \x01(\tR\x04from\x12\x0e\n" +
	"\x02to\x18\x02 \x01(\tR\x02to\x12\x16\n" +
	"\x06amount\x18\x03 \x01(\x12R\x06amount\"\xbd\x02\n" +
	"\x0fTransactionBody\x12D\n" +
	"\rtransactionID\x18\x01 \x01(\v2\x1e.TW.Hedera.Proto.TransactionIDR\rtransactionID\x12$\n" +
	"\rnodeAccountID\x18\x02 \x01(\tR\rnodeAccountID\x12&\n" +
	"\x0etransactionFee\x18\x03 \x01(\x04R\x0etransactionFee\x12:\n" +
	"\x18transactionValidDuration\x18\x04 \x01(\x03R\x18transactionValidDuration\x12\x12\n" +
	"\x04memo\x18\x05 \x01(\tR\x04memo\x12>\n" +
	"\btransfer\x18\x06 \x01(\v2 .TW.Hedera.Proto.TransferMessageH\x00R\btransferB\x06\n" +
	"\x04data\"e\n" +
	"\fSigningInput\x12\x1f\n" +
	"\vprivate_key\x18\x01 \x01(\fR\n" +
	"privateKey\x124\n" +
	"\x04body\x18\x02 \x01(\v2 .TW.Hedera.Proto.TransactionBodyR\x04body\")\n" +
	"\rSigningOutput\x12\x18\n" +
	"\aencoded\x18\x01 \x01(\fR\aencodedB\x17\n" +
	"\x15wallet.core.jni.protob\x06proto3"

var (
	file_Hedera_proto_rawDescOnce sync.Once
	file_Hedera_proto_rawDescData []byte
)

func file_Hedera_proto_rawDescGZIP() []byte {
	file_Hedera_proto_rawDescOnce.Do(func() {
		file_Hedera_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_Hedera_proto_rawDesc), len(file_Hedera_proto_rawDesc)))
	})
	return file_Hedera_proto_rawDescData
}

var file_Hedera_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_Hedera_proto_goTypes = []any{
	(*Timestamp)(nil),       // 0: TW.Hedera.Proto.Timestamp
	(*TransactionID)(nil),   // 1: TW.Hedera.Proto.TransactionID
	(*TransferMessage)(nil), // 2: TW.Hedera.Proto.TransferMessage
	(*TransactionBody)(nil), // 3: TW.Hedera.Proto.TransactionBody
	(*SigningInput)(nil),    // 4: TW.Hedera.Proto.SigningInput
	(*SigningOutput)(nil),   // 5: TW.Hedera.Proto.SigningOutput
}
var file_Hedera_proto_depIdxs = []int32{
	0, // 0: TW.Hedera.Proto.TransactionID.transactionValidStart:type_name -> TW.Hedera.Proto.Timestamp
	1, // 1: TW.Hedera.Proto.TransactionBody.transactionID:type_name -> TW.Hedera.Proto.TransactionID
	2, // 2: TW.Hedera.Proto.TransactionBody.transfer:type_name -> TW.Hedera.Proto.TransferMessage
	3, // 3: TW.Hedera.Proto.SigningInput.body:type_name -> TW.Hedera.Proto.TransactionBody
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_Hedera_proto_init() }
func file_Hedera_proto_init() {
	if File_Hedera_proto != nil {
		return
	}
	file_Hedera_proto_msgTypes[3].OneofWrappers = []any{
		(*TransactionBody_Transfer)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_Hedera_proto_rawDesc), len(file_Hedera_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Hedera_proto_goTypes,
		DependencyIndexes: file_Hedera_proto_depIdxs,
		MessageInfos:      file_Hedera_proto_msgTypes,
	}.Build()
	File_Hedera_proto = out.File
	file_Hedera_proto_goTypes = nil
	file_Hedera_proto_depIdxs = nil
}
