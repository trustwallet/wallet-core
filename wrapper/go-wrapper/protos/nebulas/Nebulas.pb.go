// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.20.3
// source: Nebulas.proto

package nebulas

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Input data necessary to create a signed transaction.
type SigningInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// sender's address.
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	// Chain identifier (uint256, serialized big endian)
	ChainId []byte `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Nonce (uint256, serialized big endian)
	Nonce []byte `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Gas price (uint256, serialized big endian)
	GasPrice []byte `protobuf:"bytes,4,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	// Gas limit (uint256, serialized big endian)
	GasLimit []byte `protobuf:"bytes,5,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	// Recipient's address.
	ToAddress string `protobuf:"bytes,6,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// Amount to send in wei, 1 NAS = 10^18 Wei (uint256, serialized big endian)
	Amount []byte `protobuf:"bytes,7,opt,name=amount,proto3" json:"amount,omitempty"`
	// Timestamp to create transaction (uint256, serialized big endian)
	Timestamp []byte `protobuf:"bytes,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Optional payload
	Payload string `protobuf:"bytes,9,opt,name=payload,proto3" json:"payload,omitempty"`
	// The secret private key used for signing (32 bytes).
	PrivateKey    []byte `protobuf:"bytes,10,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningInput) Reset() {
	*x = SigningInput{}
	mi := &file_Nebulas_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningInput) ProtoMessage() {}

func (x *SigningInput) ProtoReflect() protoreflect.Message {
	mi := &file_Nebulas_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningInput.ProtoReflect.Descriptor instead.
func (*SigningInput) Descriptor() ([]byte, []int) {
	return file_Nebulas_proto_rawDescGZIP(), []int{0}
}

func (x *SigningInput) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *SigningInput) GetChainId() []byte {
	if x != nil {
		return x.ChainId
	}
	return nil
}

func (x *SigningInput) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *SigningInput) GetGasPrice() []byte {
	if x != nil {
		return x.GasPrice
	}
	return nil
}

func (x *SigningInput) GetGasLimit() []byte {
	if x != nil {
		return x.GasLimit
	}
	return nil
}

func (x *SigningInput) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *SigningInput) GetAmount() []byte {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *SigningInput) GetTimestamp() []byte {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SigningInput) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *SigningInput) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

// Result containing the signed and encoded transaction.
type SigningOutput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Algorithm code
	Algorithm uint32 `protobuf:"varint,1,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	// The signature
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// Encoded transaction
	Raw           string `protobuf:"bytes,3,opt,name=raw,proto3" json:"raw,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningOutput) Reset() {
	*x = SigningOutput{}
	mi := &file_Nebulas_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningOutput) ProtoMessage() {}

func (x *SigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_Nebulas_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningOutput.ProtoReflect.Descriptor instead.
func (*SigningOutput) Descriptor() ([]byte, []int) {
	return file_Nebulas_proto_rawDescGZIP(), []int{1}
}

func (x *SigningOutput) GetAlgorithm() uint32 {
	if x != nil {
		return x.Algorithm
	}
	return 0
}

func (x *SigningOutput) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SigningOutput) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

// Generic data
type Data struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Payload       []byte                 `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data) Reset() {
	*x = Data{}
	mi := &file_Nebulas_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_Nebulas_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_Nebulas_proto_rawDescGZIP(), []int{2}
}

func (x *Data) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Data) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Raw transaction data
type RawTransaction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// tx hash
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// source address
	From []byte `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// destination address
	To []byte `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	// amount (uint256, serialized big endian)
	Value []byte `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// Nonce (should be larger than in the last transaction of the account)
	Nonce uint64 `protobuf:"varint,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// transaction timestamp
	Timestamp int64 `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// generic data
	Data *Data `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	// chain ID (4 bytes)
	ChainId uint32 `protobuf:"varint,8,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// gas price (uint256, serialized big endian)
	GasPrice []byte `protobuf:"bytes,9,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	// gas limit (uint256, serialized big endian)
	GasLimit []byte `protobuf:"bytes,10,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	// algorithm
	Alg uint32 `protobuf:"varint,11,opt,name=alg,proto3" json:"alg,omitempty"`
	// signature
	Sign          []byte `protobuf:"bytes,12,opt,name=sign,proto3" json:"sign,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RawTransaction) Reset() {
	*x = RawTransaction{}
	mi := &file_Nebulas_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RawTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawTransaction) ProtoMessage() {}

func (x *RawTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_Nebulas_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawTransaction.ProtoReflect.Descriptor instead.
func (*RawTransaction) Descriptor() ([]byte, []int) {
	return file_Nebulas_proto_rawDescGZIP(), []int{3}
}

func (x *RawTransaction) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *RawTransaction) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *RawTransaction) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *RawTransaction) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *RawTransaction) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *RawTransaction) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RawTransaction) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RawTransaction) GetChainId() uint32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *RawTransaction) GetGasPrice() []byte {
	if x != nil {
		return x.GasPrice
	}
	return nil
}

func (x *RawTransaction) GetGasLimit() []byte {
	if x != nil {
		return x.GasLimit
	}
	return nil
}

func (x *RawTransaction) GetAlg() uint32 {
	if x != nil {
		return x.Alg
	}
	return 0
}

func (x *RawTransaction) GetSign() []byte {
	if x != nil {
		return x.Sign
	}
	return nil
}

var File_Nebulas_proto protoreflect.FileDescriptor

const file_Nebulas_proto_rawDesc = "" +
	"\n" +
	"\rNebulas.proto\x12\x10TW.Nebulas.Proto\"\xac\x02\n" +
	"\fSigningInput\x12!\n" +
	"\ffrom_address\x18\x01 \x01(\tR\vfromAddress\x12\x19\n" +
	"\bchain_id\x18\x02 \x01(\fR\achainId\x12\x14\n" +
	"\x05nonce\x18\x03 \x01(\fR\x05nonce\x12\x1b\n" +
	"\tgas_price\x18\x04 \x01(\fR\bgasPrice\x12\x1b\n" +
	"\tgas_limit\x18\x05 \x01(\fR\bgasLimit\x12\x1d\n" +
	"\n" +
	"to_address\x18\x06 \x01(\tR\ttoAddress\x12\x16\n" +
	"\x06amount\x18\a \x01(\fR\x06amount\x12\x1c\n" +
	"\ttimestamp\x18\b \x01(\fR\ttimestamp\x12\x18\n" +
	"\apayload\x18\t \x01(\tR\apayload\x12\x1f\n" +
	"\vprivate_key\x18\n" +
	" \x01(\fR\n" +
	"privateKey\"]\n" +
	"\rSigningOutput\x12\x1c\n" +
	"\talgorithm\x18\x01 \x01(\rR\talgorithm\x12\x1c\n" +
	"\tsignature\x18\x02 \x01(\fR\tsignature\x12\x10\n" +
	"\x03raw\x18\x03 \x01(\tR\x03raw\"4\n" +
	"\x04Data\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x18\n" +
	"\apayload\x18\x02 \x01(\fR\apayload\"\xb9\x02\n" +
	"\x0eRawTransaction\x12\x12\n" +
	"\x04hash\x18\x01 \x01(\fR\x04hash\x12\x12\n" +
	"\x04from\x18\x02 \x01(\fR\x04from\x12\x0e\n" +
	"\x02to\x18\x03 \x01(\fR\x02to\x12\x14\n" +
	"\x05value\x18\x04 \x01(\fR\x05value\x12\x14\n" +
	"\x05nonce\x18\x05 \x01(\x04R\x05nonce\x12\x1c\n" +
	"\ttimestamp\x18\x06 \x01(\x03R\ttimestamp\x12*\n" +
	"\x04data\x18\a \x01(\v2\x16.TW.Nebulas.Proto.DataR\x04data\x12\x19\n" +
	"\bchain_id\x18\b \x01(\rR\achainId\x12\x1b\n" +
	"\tgas_price\x18\t \x01(\fR\bgasPrice\x12\x1b\n" +
	"\tgas_limit\x18\n" +
	" \x01(\fR\bgasLimit\x12\x10\n" +
	"\x03alg\x18\v \x01(\rR\x03alg\x12\x12\n" +
	"\x04sign\x18\f \x01(\fR\x04signB\x17\n" +
	"\x15wallet.core.jni.protob\x06proto3"

var (
	file_Nebulas_proto_rawDescOnce sync.Once
	file_Nebulas_proto_rawDescData []byte
)

func file_Nebulas_proto_rawDescGZIP() []byte {
	file_Nebulas_proto_rawDescOnce.Do(func() {
		file_Nebulas_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_Nebulas_proto_rawDesc), len(file_Nebulas_proto_rawDesc)))
	})
	return file_Nebulas_proto_rawDescData
}

var file_Nebulas_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_Nebulas_proto_goTypes = []any{
	(*SigningInput)(nil),   // 0: TW.Nebulas.Proto.SigningInput
	(*SigningOutput)(nil),  // 1: TW.Nebulas.Proto.SigningOutput
	(*Data)(nil),           // 2: TW.Nebulas.Proto.Data
	(*RawTransaction)(nil), // 3: TW.Nebulas.Proto.RawTransaction
}
var file_Nebulas_proto_depIdxs = []int32{
	2, // 0: TW.Nebulas.Proto.RawTransaction.data:type_name -> TW.Nebulas.Proto.Data
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_Nebulas_proto_init() }
func file_Nebulas_proto_init() {
	if File_Nebulas_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_Nebulas_proto_rawDesc), len(file_Nebulas_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Nebulas_proto_goTypes,
		DependencyIndexes: file_Nebulas_proto_depIdxs,
		MessageInfos:      file_Nebulas_proto_msgTypes,
	}.Build()
	File_Nebulas_proto = out.File
	file_Nebulas_proto_goTypes = nil
	file_Nebulas_proto_depIdxs = nil
}
