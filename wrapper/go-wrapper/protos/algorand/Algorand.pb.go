// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.20.3
// source: Algorand.proto

package algorand

import (
	common "github.com/Cramiumlabs/wallet-core/wrapper/go-wrapper/protos/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Simple transfer message, transfer an amount to an address
type Transfer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Destination address (string)
	ToAddress string `protobuf:"bytes,1,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// Amount
	Amount        uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	mi := &file_Algorand_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_Algorand_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_Algorand_proto_rawDescGZIP(), []int{0}
}

func (x *Transfer) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *Transfer) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// Asset Transfer message, with assetID
type AssetTransfer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Destination address (string)
	ToAddress string `protobuf:"bytes,1,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// Amount
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// ID of the asset being transferred
	AssetId       uint64 `protobuf:"varint,3,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetTransfer) Reset() {
	*x = AssetTransfer{}
	mi := &file_Algorand_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetTransfer) ProtoMessage() {}

func (x *AssetTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_Algorand_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetTransfer.ProtoReflect.Descriptor instead.
func (*AssetTransfer) Descriptor() ([]byte, []int) {
	return file_Algorand_proto_rawDescGZIP(), []int{1}
}

func (x *AssetTransfer) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *AssetTransfer) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AssetTransfer) GetAssetId() uint64 {
	if x != nil {
		return x.AssetId
	}
	return 0
}

// Opt-in message for an asset
type AssetOptIn struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the asset
	AssetId       uint64 `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetOptIn) Reset() {
	*x = AssetOptIn{}
	mi := &file_Algorand_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetOptIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetOptIn) ProtoMessage() {}

func (x *AssetOptIn) ProtoReflect() protoreflect.Message {
	mi := &file_Algorand_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetOptIn.ProtoReflect.Descriptor instead.
func (*AssetOptIn) Descriptor() ([]byte, []int) {
	return file_Algorand_proto_rawDescGZIP(), []int{2}
}

func (x *AssetOptIn) GetAssetId() uint64 {
	if x != nil {
		return x.AssetId
	}
	return 0
}

// Input data necessary to create a signed transaction.
type SigningInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// network / chain id
	GenesisId string `protobuf:"bytes,1,opt,name=genesis_id,json=genesisId,proto3" json:"genesis_id,omitempty"`
	// network / chain hash
	GenesisHash []byte `protobuf:"bytes,2,opt,name=genesis_hash,json=genesisHash,proto3" json:"genesis_hash,omitempty"`
	// binary note data
	Note []byte `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
	// The secret private key used for signing (32 bytes).
	PrivateKey []byte `protobuf:"bytes,4,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// network / first round
	FirstRound uint64 `protobuf:"varint,5,opt,name=first_round,json=firstRound,proto3" json:"first_round,omitempty"`
	// network / last round
	LastRound uint64 `protobuf:"varint,6,opt,name=last_round,json=lastRound,proto3" json:"last_round,omitempty"`
	// fee amount
	Fee uint64 `protobuf:"varint,7,opt,name=fee,proto3" json:"fee,omitempty"`
	// public key
	PublicKey []byte `protobuf:"bytes,8,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// message payload
	//
	// Types that are valid to be assigned to MessageOneof:
	//
	//	*SigningInput_Transfer
	//	*SigningInput_AssetTransfer
	//	*SigningInput_AssetOptIn
	MessageOneof  isSigningInput_MessageOneof `protobuf_oneof:"message_oneof"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningInput) Reset() {
	*x = SigningInput{}
	mi := &file_Algorand_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningInput) ProtoMessage() {}

func (x *SigningInput) ProtoReflect() protoreflect.Message {
	mi := &file_Algorand_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningInput.ProtoReflect.Descriptor instead.
func (*SigningInput) Descriptor() ([]byte, []int) {
	return file_Algorand_proto_rawDescGZIP(), []int{3}
}

func (x *SigningInput) GetGenesisId() string {
	if x != nil {
		return x.GenesisId
	}
	return ""
}

func (x *SigningInput) GetGenesisHash() []byte {
	if x != nil {
		return x.GenesisHash
	}
	return nil
}

func (x *SigningInput) GetNote() []byte {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *SigningInput) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *SigningInput) GetFirstRound() uint64 {
	if x != nil {
		return x.FirstRound
	}
	return 0
}

func (x *SigningInput) GetLastRound() uint64 {
	if x != nil {
		return x.LastRound
	}
	return 0
}

func (x *SigningInput) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *SigningInput) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *SigningInput) GetMessageOneof() isSigningInput_MessageOneof {
	if x != nil {
		return x.MessageOneof
	}
	return nil
}

func (x *SigningInput) GetTransfer() *Transfer {
	if x != nil {
		if x, ok := x.MessageOneof.(*SigningInput_Transfer); ok {
			return x.Transfer
		}
	}
	return nil
}

func (x *SigningInput) GetAssetTransfer() *AssetTransfer {
	if x != nil {
		if x, ok := x.MessageOneof.(*SigningInput_AssetTransfer); ok {
			return x.AssetTransfer
		}
	}
	return nil
}

func (x *SigningInput) GetAssetOptIn() *AssetOptIn {
	if x != nil {
		if x, ok := x.MessageOneof.(*SigningInput_AssetOptIn); ok {
			return x.AssetOptIn
		}
	}
	return nil
}

type isSigningInput_MessageOneof interface {
	isSigningInput_MessageOneof()
}

type SigningInput_Transfer struct {
	Transfer *Transfer `protobuf:"bytes,10,opt,name=transfer,proto3,oneof"`
}

type SigningInput_AssetTransfer struct {
	AssetTransfer *AssetTransfer `protobuf:"bytes,11,opt,name=asset_transfer,json=assetTransfer,proto3,oneof"`
}

type SigningInput_AssetOptIn struct {
	AssetOptIn *AssetOptIn `protobuf:"bytes,12,opt,name=asset_opt_in,json=assetOptIn,proto3,oneof"`
}

func (*SigningInput_Transfer) isSigningInput_MessageOneof() {}

func (*SigningInput_AssetTransfer) isSigningInput_MessageOneof() {}

func (*SigningInput_AssetOptIn) isSigningInput_MessageOneof() {}

// Result containing the signed and encoded transaction.
type SigningOutput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Signed and encoded transaction bytes.
	Encoded []byte `protobuf:"bytes,1,opt,name=encoded,proto3" json:"encoded,omitempty"`
	// Signature in base64.
	Signature string `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// Error code, 0 is ok, other codes will be treated as errors.
	Error common.SigningError `protobuf:"varint,3,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// Error description.
	ErrorMessage  string `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningOutput) Reset() {
	*x = SigningOutput{}
	mi := &file_Algorand_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningOutput) ProtoMessage() {}

func (x *SigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_Algorand_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningOutput.ProtoReflect.Descriptor instead.
func (*SigningOutput) Descriptor() ([]byte, []int) {
	return file_Algorand_proto_rawDescGZIP(), []int{4}
}

func (x *SigningOutput) GetEncoded() []byte {
	if x != nil {
		return x.Encoded
	}
	return nil
}

func (x *SigningOutput) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *SigningOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *SigningOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_Algorand_proto protoreflect.FileDescriptor

const file_Algorand_proto_rawDesc = "" +
	"\n" +
	"\x0eAlgorand.proto\x12\x11TW.Algorand.Proto\x1a\fCommon.proto\"A\n" +
	"\bTransfer\x12\x1d\n" +
	"\n" +
	"to_address\x18\x01 \x01(\tR\ttoAddress\x12\x16\n" +
	"\x06amount\x18\x02 \x01(\x04R\x06amount\"a\n" +
	"\rAssetTransfer\x12\x1d\n" +
	"\n" +
	"to_address\x18\x01 \x01(\tR\ttoAddress\x12\x16\n" +
	"\x06amount\x18\x02 \x01(\x04R\x06amount\x12\x19\n" +
	"\basset_id\x18\x03 \x01(\x04R\aassetId\"'\n" +
	"\n" +
	"AssetOptIn\x12\x19\n" +
	"\basset_id\x18\x01 \x01(\x04R\aassetId\"\xd0\x03\n" +
	"\fSigningInput\x12\x1d\n" +
	"\n" +
	"genesis_id\x18\x01 \x01(\tR\tgenesisId\x12!\n" +
	"\fgenesis_hash\x18\x02 \x01(\fR\vgenesisHash\x12\x12\n" +
	"\x04note\x18\x03 \x01(\fR\x04note\x12\x1f\n" +
	"\vprivate_key\x18\x04 \x01(\fR\n" +
	"privateKey\x12\x1f\n" +
	"\vfirst_round\x18\x05 \x01(\x04R\n" +
	"firstRound\x12\x1d\n" +
	"\n" +
	"last_round\x18\x06 \x01(\x04R\tlastRound\x12\x10\n" +
	"\x03fee\x18\a \x01(\x04R\x03fee\x12\x1d\n" +
	"\n" +
	"public_key\x18\b \x01(\fR\tpublicKey\x129\n" +
	"\btransfer\x18\n" +
	" \x01(\v2\x1b.TW.Algorand.Proto.TransferH\x00R\btransfer\x12I\n" +
	"\x0easset_transfer\x18\v \x01(\v2 .TW.Algorand.Proto.AssetTransferH\x00R\rassetTransfer\x12A\n" +
	"\fasset_opt_in\x18\f \x01(\v2\x1d.TW.Algorand.Proto.AssetOptInH\x00R\n" +
	"assetOptInB\x0f\n" +
	"\rmessage_oneof\"\xa1\x01\n" +
	"\rSigningOutput\x12\x18\n" +
	"\aencoded\x18\x01 \x01(\fR\aencoded\x12\x1c\n" +
	"\tsignature\x18\x02 \x01(\tR\tsignature\x123\n" +
	"\x05error\x18\x03 \x01(\x0e2\x1d.TW.Common.Proto.SigningErrorR\x05error\x12#\n" +
	"\rerror_message\x18\x04 \x01(\tR\ferrorMessageB\x17\n" +
	"\x15wallet.core.jni.protob\x06proto3"

var (
	file_Algorand_proto_rawDescOnce sync.Once
	file_Algorand_proto_rawDescData []byte
)

func file_Algorand_proto_rawDescGZIP() []byte {
	file_Algorand_proto_rawDescOnce.Do(func() {
		file_Algorand_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_Algorand_proto_rawDesc), len(file_Algorand_proto_rawDesc)))
	})
	return file_Algorand_proto_rawDescData
}

var file_Algorand_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_Algorand_proto_goTypes = []any{
	(*Transfer)(nil),         // 0: TW.Algorand.Proto.Transfer
	(*AssetTransfer)(nil),    // 1: TW.Algorand.Proto.AssetTransfer
	(*AssetOptIn)(nil),       // 2: TW.Algorand.Proto.AssetOptIn
	(*SigningInput)(nil),     // 3: TW.Algorand.Proto.SigningInput
	(*SigningOutput)(nil),    // 4: TW.Algorand.Proto.SigningOutput
	(common.SigningError)(0), // 5: TW.Common.Proto.SigningError
}
var file_Algorand_proto_depIdxs = []int32{
	0, // 0: TW.Algorand.Proto.SigningInput.transfer:type_name -> TW.Algorand.Proto.Transfer
	1, // 1: TW.Algorand.Proto.SigningInput.asset_transfer:type_name -> TW.Algorand.Proto.AssetTransfer
	2, // 2: TW.Algorand.Proto.SigningInput.asset_opt_in:type_name -> TW.Algorand.Proto.AssetOptIn
	5, // 3: TW.Algorand.Proto.SigningOutput.error:type_name -> TW.Common.Proto.SigningError
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_Algorand_proto_init() }
func file_Algorand_proto_init() {
	if File_Algorand_proto != nil {
		return
	}
	file_Algorand_proto_msgTypes[3].OneofWrappers = []any{
		(*SigningInput_Transfer)(nil),
		(*SigningInput_AssetTransfer)(nil),
		(*SigningInput_AssetOptIn)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_Algorand_proto_rawDesc), len(file_Algorand_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Algorand_proto_goTypes,
		DependencyIndexes: file_Algorand_proto_depIdxs,
		MessageInfos:      file_Algorand_proto_msgTypes,
	}.Build()
	File_Algorand_proto = out.File
	file_Algorand_proto_goTypes = nil
	file_Algorand_proto_depIdxs = nil
}
