// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.20.3
// source: Decred.proto

package decred

import (
	bitcoin "github.com/Cramiumlabs/wallet-core/wrapper/go-wrapper/protos/bitcoin"
	bitcoinv2 "github.com/Cramiumlabs/wallet-core/wrapper/go-wrapper/protos/bitcoinv2"
	common "github.com/Cramiumlabs/wallet-core/wrapper/go-wrapper/protos/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A transfer transaction
type Transaction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Serialization format
	SerializeType uint32 `protobuf:"varint,1,opt,name=serializeType,proto3" json:"serializeType,omitempty"`
	// Transaction data format version
	Version uint32 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	// A list of 1 or more transaction inputs or sources for coins.
	Inputs []*TransactionInput `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// A list of 1 or more transaction outputs or destinations for coins
	Outputs []*TransactionOutput `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// The time when a transaction can be spent (usually zero, in which case it has no effect).
	LockTime uint32 `protobuf:"varint,5,opt,name=lockTime,proto3" json:"lockTime,omitempty"`
	// The block height at which the transaction expires and is no longer valid.
	Expiry        uint32 `protobuf:"varint,6,opt,name=expiry,proto3" json:"expiry,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	mi := &file_Decred_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_Decred_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_Decred_proto_rawDescGZIP(), []int{0}
}

func (x *Transaction) GetSerializeType() uint32 {
	if x != nil {
		return x.SerializeType
	}
	return 0
}

func (x *Transaction) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Transaction) GetInputs() []*TransactionInput {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *Transaction) GetOutputs() []*TransactionOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *Transaction) GetLockTime() uint32 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

func (x *Transaction) GetExpiry() uint32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

// Decred transaction input.
type TransactionInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Reference to the previous transaction's output.
	PreviousOutput *bitcoin.OutPoint `protobuf:"bytes,1,opt,name=previousOutput,proto3" json:"previousOutput,omitempty"`
	// Transaction version as defined by the sender.
	Sequence uint32 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// The amount of the input
	ValueIn int64 `protobuf:"varint,3,opt,name=valueIn,proto3" json:"valueIn,omitempty"`
	// Creation block height
	BlockHeight uint32 `protobuf:"varint,4,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	// Index within the block
	BlockIndex uint32 `protobuf:"varint,5,opt,name=blockIndex,proto3" json:"blockIndex,omitempty"`
	// Computational script for confirming transaction authorization.
	Script        []byte `protobuf:"bytes,6,opt,name=script,proto3" json:"script,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionInput) Reset() {
	*x = TransactionInput{}
	mi := &file_Decred_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionInput) ProtoMessage() {}

func (x *TransactionInput) ProtoReflect() protoreflect.Message {
	mi := &file_Decred_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionInput.ProtoReflect.Descriptor instead.
func (*TransactionInput) Descriptor() ([]byte, []int) {
	return file_Decred_proto_rawDescGZIP(), []int{1}
}

func (x *TransactionInput) GetPreviousOutput() *bitcoin.OutPoint {
	if x != nil {
		return x.PreviousOutput
	}
	return nil
}

func (x *TransactionInput) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *TransactionInput) GetValueIn() int64 {
	if x != nil {
		return x.ValueIn
	}
	return 0
}

func (x *TransactionInput) GetBlockHeight() uint32 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *TransactionInput) GetBlockIndex() uint32 {
	if x != nil {
		return x.BlockIndex
	}
	return 0
}

func (x *TransactionInput) GetScript() []byte {
	if x != nil {
		return x.Script
	}
	return nil
}

// Decred transaction output.
type TransactionOutput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Transaction amount.
	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// Transaction output version.
	Version uint32 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	// Usually contains the public key as a Decred script setting up conditions to claim this output.
	Script        []byte `protobuf:"bytes,3,opt,name=script,proto3" json:"script,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionOutput) Reset() {
	*x = TransactionOutput{}
	mi := &file_Decred_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionOutput) ProtoMessage() {}

func (x *TransactionOutput) ProtoReflect() protoreflect.Message {
	mi := &file_Decred_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionOutput.ProtoReflect.Descriptor instead.
func (*TransactionOutput) Descriptor() ([]byte, []int) {
	return file_Decred_proto_rawDescGZIP(), []int{2}
}

func (x *TransactionOutput) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TransactionOutput) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TransactionOutput) GetScript() []byte {
	if x != nil {
		return x.Script
	}
	return nil
}

// Result containing the signed and encoded transaction.
type SigningOutput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Resulting transaction. Note that the amount may be different than the requested amount to account for fees and available funds.
	Transaction *Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	// Signed and encoded transaction bytes.
	Encoded []byte `protobuf:"bytes,2,opt,name=encoded,proto3" json:"encoded,omitempty"`
	// Transaction id
	TransactionId string `protobuf:"bytes,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// Optional error
	Error        common.SigningError `protobuf:"varint,4,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	ErrorMessage string              `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// Result of a transaction signing using the Bitcoin 2.0 protocol.
	// Set if `Bitcoin.Proto.SigningInput.signing_v2` used.
	SigningResultV2 *bitcoinv2.SigningOutput `protobuf:"bytes,6,opt,name=signing_result_v2,json=signingResultV2,proto3" json:"signing_result_v2,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SigningOutput) Reset() {
	*x = SigningOutput{}
	mi := &file_Decred_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningOutput) ProtoMessage() {}

func (x *SigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_Decred_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningOutput.ProtoReflect.Descriptor instead.
func (*SigningOutput) Descriptor() ([]byte, []int) {
	return file_Decred_proto_rawDescGZIP(), []int{3}
}

func (x *SigningOutput) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *SigningOutput) GetEncoded() []byte {
	if x != nil {
		return x.Encoded
	}
	return nil
}

func (x *SigningOutput) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *SigningOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *SigningOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *SigningOutput) GetSigningResultV2() *bitcoinv2.SigningOutput {
	if x != nil {
		return x.SigningResultV2
	}
	return nil
}

var File_Decred_proto protoreflect.FileDescriptor

const file_Decred_proto_rawDesc = "" +
	"\n" +
	"\fDecred.proto\x12\x0fTW.Decred.Proto\x1a\rBitcoin.proto\x1a\x0fBitcoinV2.proto\x1a\fCommon.proto\"\xfa\x01\n" +
	"\vTransaction\x12$\n" +
	"\rserializeType\x18\x01 \x01(\rR\rserializeType\x12\x18\n" +
	"\aversion\x18\x02 \x01(\rR\aversion\x129\n" +
	"\x06inputs\x18\x03 \x03(\v2!.TW.Decred.Proto.TransactionInputR\x06inputs\x12<\n" +
	"\aoutputs\x18\x04 \x03(\v2\".TW.Decred.Proto.TransactionOutputR\aoutputs\x12\x1a\n" +
	"\blockTime\x18\x05 \x01(\rR\blockTime\x12\x16\n" +
	"\x06expiry\x18\x06 \x01(\rR\x06expiry\"\xe6\x01\n" +
	"\x10TransactionInput\x12B\n" +
	"\x0epreviousOutput\x18\x01 \x01(\v2\x1a.TW.Bitcoin.Proto.OutPointR\x0epreviousOutput\x12\x1a\n" +
	"\bsequence\x18\x02 \x01(\rR\bsequence\x12\x18\n" +
	"\avalueIn\x18\x03 \x01(\x03R\avalueIn\x12 \n" +
	"\vblockHeight\x18\x04 \x01(\rR\vblockHeight\x12\x1e\n" +
	"\n" +
	"blockIndex\x18\x05 \x01(\rR\n" +
	"blockIndex\x12\x16\n" +
	"\x06script\x18\x06 \x01(\fR\x06script\"[\n" +
	"\x11TransactionOutput\x12\x14\n" +
	"\x05value\x18\x01 \x01(\x03R\x05value\x12\x18\n" +
	"\aversion\x18\x02 \x01(\rR\aversion\x12\x16\n" +
	"\x06script\x18\x03 \x01(\fR\x06script\"\xb9\x02\n" +
	"\rSigningOutput\x12>\n" +
	"\vtransaction\x18\x01 \x01(\v2\x1c.TW.Decred.Proto.TransactionR\vtransaction\x12\x18\n" +
	"\aencoded\x18\x02 \x01(\fR\aencoded\x12%\n" +
	"\x0etransaction_id\x18\x03 \x01(\tR\rtransactionId\x123\n" +
	"\x05error\x18\x04 \x01(\x0e2\x1d.TW.Common.Proto.SigningErrorR\x05error\x12#\n" +
	"\rerror_message\x18\x05 \x01(\tR\ferrorMessage\x12M\n" +
	"\x11signing_result_v2\x18\x06 \x01(\v2!.TW.BitcoinV2.Proto.SigningOutputR\x0fsigningResultV2B\x17\n" +
	"\x15wallet.core.jni.protob\x06proto3"

var (
	file_Decred_proto_rawDescOnce sync.Once
	file_Decred_proto_rawDescData []byte
)

func file_Decred_proto_rawDescGZIP() []byte {
	file_Decred_proto_rawDescOnce.Do(func() {
		file_Decred_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_Decred_proto_rawDesc), len(file_Decred_proto_rawDesc)))
	})
	return file_Decred_proto_rawDescData
}

var file_Decred_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_Decred_proto_goTypes = []any{
	(*Transaction)(nil),             // 0: TW.Decred.Proto.Transaction
	(*TransactionInput)(nil),        // 1: TW.Decred.Proto.TransactionInput
	(*TransactionOutput)(nil),       // 2: TW.Decred.Proto.TransactionOutput
	(*SigningOutput)(nil),           // 3: TW.Decred.Proto.SigningOutput
	(*bitcoin.OutPoint)(nil),        // 4: TW.Bitcoin.Proto.OutPoint
	(common.SigningError)(0),        // 5: TW.Common.Proto.SigningError
	(*bitcoinv2.SigningOutput)(nil), // 6: TW.BitcoinV2.Proto.SigningOutput
}
var file_Decred_proto_depIdxs = []int32{
	1, // 0: TW.Decred.Proto.Transaction.inputs:type_name -> TW.Decred.Proto.TransactionInput
	2, // 1: TW.Decred.Proto.Transaction.outputs:type_name -> TW.Decred.Proto.TransactionOutput
	4, // 2: TW.Decred.Proto.TransactionInput.previousOutput:type_name -> TW.Bitcoin.Proto.OutPoint
	0, // 3: TW.Decred.Proto.SigningOutput.transaction:type_name -> TW.Decred.Proto.Transaction
	5, // 4: TW.Decred.Proto.SigningOutput.error:type_name -> TW.Common.Proto.SigningError
	6, // 5: TW.Decred.Proto.SigningOutput.signing_result_v2:type_name -> TW.BitcoinV2.Proto.SigningOutput
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_Decred_proto_init() }
func file_Decred_proto_init() {
	if File_Decred_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_Decred_proto_rawDesc), len(file_Decred_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Decred_proto_goTypes,
		DependencyIndexes: file_Decred_proto_depIdxs,
		MessageInfos:      file_Decred_proto_msgTypes,
	}.Build()
	File_Decred_proto = out.File
	file_Decred_proto_goTypes = nil
	file_Decred_proto_depIdxs = nil
}
