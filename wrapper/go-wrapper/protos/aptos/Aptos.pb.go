// SPDX-License-Identifier: Apache-2.0
//
// Copyright Â© 2017 Trust Wallet.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.20.3
// source: Aptos.proto

package aptos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	common "tw/protos/common"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Necessary fields to process a TransferMessage
type TransferMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Destination Account address (string)
	To string `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	// Amount to be transferred (uint64)
	Amount        uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransferMessage) Reset() {
	*x = TransferMessage{}
	mi := &file_Aptos_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferMessage) ProtoMessage() {}

func (x *TransferMessage) ProtoReflect() protoreflect.Message {
	mi := &file_Aptos_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferMessage.ProtoReflect.Descriptor instead.
func (*TransferMessage) Descriptor() ([]byte, []int) {
	return file_Aptos_proto_rawDescGZIP(), []int{0}
}

func (x *TransferMessage) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *TransferMessage) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// Necessary tag for type function argument
type StructTag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Address of the account
	AccountAddress string `protobuf:"bytes,1,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
	// Module name
	Module string `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	// Identifier
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StructTag) Reset() {
	*x = StructTag{}
	mi := &file_Aptos_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StructTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructTag) ProtoMessage() {}

func (x *StructTag) ProtoReflect() protoreflect.Message {
	mi := &file_Aptos_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructTag.ProtoReflect.Descriptor instead.
func (*StructTag) Descriptor() ([]byte, []int) {
	return file_Aptos_proto_rawDescGZIP(), []int{1}
}

func (x *StructTag) GetAccountAddress() string {
	if x != nil {
		return x.AccountAddress
	}
	return ""
}

func (x *StructTag) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *StructTag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Necessary fields to process a `0x1::coin::transfer` function.
type TokenTransferMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Destination Account address (string)
	To string `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	// Amount to be transferred (uint64)
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// token function to call, e.g BTC: 0x43417434fd869edee76cca2a4d2301e528a1551b1d719b75c350c3c97d15b8b9::coins::BTC
	Function      *StructTag `protobuf:"bytes,3,opt,name=function,proto3" json:"function,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenTransferMessage) Reset() {
	*x = TokenTransferMessage{}
	mi := &file_Aptos_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenTransferMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenTransferMessage) ProtoMessage() {}

func (x *TokenTransferMessage) ProtoReflect() protoreflect.Message {
	mi := &file_Aptos_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenTransferMessage.ProtoReflect.Descriptor instead.
func (*TokenTransferMessage) Descriptor() ([]byte, []int) {
	return file_Aptos_proto_rawDescGZIP(), []int{2}
}

func (x *TokenTransferMessage) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *TokenTransferMessage) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TokenTransferMessage) GetFunction() *StructTag {
	if x != nil {
		return x.Function
	}
	return nil
}

// Necessary fields to process a `0x1::aptos_account::transfer_coins` function.
// Can be used to transfer tokens with registering the recipient account if needed.
type TokenTransferCoinsMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Destination Account address (string)
	To string `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	// Amount to be transferred (uint64)
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// token function to call, e.g BTC: 0x43417434fd869edee76cca2a4d2301e528a1551b1d719b75c350c3c97d15b8b9::coins::BTC
	Function      *StructTag `protobuf:"bytes,3,opt,name=function,proto3" json:"function,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenTransferCoinsMessage) Reset() {
	*x = TokenTransferCoinsMessage{}
	mi := &file_Aptos_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenTransferCoinsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenTransferCoinsMessage) ProtoMessage() {}

func (x *TokenTransferCoinsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_Aptos_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenTransferCoinsMessage.ProtoReflect.Descriptor instead.
func (*TokenTransferCoinsMessage) Descriptor() ([]byte, []int) {
	return file_Aptos_proto_rawDescGZIP(), []int{3}
}

func (x *TokenTransferCoinsMessage) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *TokenTransferCoinsMessage) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TokenTransferCoinsMessage) GetFunction() *StructTag {
	if x != nil {
		return x.Function
	}
	return nil
}

type FungibleAssetTransferMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Fungible Asset address (string)
	MetadataAddress string `protobuf:"bytes,1,opt,name=metadata_address,json=metadataAddress,proto3" json:"metadata_address,omitempty"`
	// Destination Account address (string)
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// Amount to be transferred (uint64)
	Amount        uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FungibleAssetTransferMessage) Reset() {
	*x = FungibleAssetTransferMessage{}
	mi := &file_Aptos_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FungibleAssetTransferMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungibleAssetTransferMessage) ProtoMessage() {}

func (x *FungibleAssetTransferMessage) ProtoReflect() protoreflect.Message {
	mi := &file_Aptos_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungibleAssetTransferMessage.ProtoReflect.Descriptor instead.
func (*FungibleAssetTransferMessage) Descriptor() ([]byte, []int) {
	return file_Aptos_proto_rawDescGZIP(), []int{4}
}

func (x *FungibleAssetTransferMessage) GetMetadataAddress() string {
	if x != nil {
		return x.MetadataAddress
	}
	return ""
}

func (x *FungibleAssetTransferMessage) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *FungibleAssetTransferMessage) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// Necessary fields to process a ManagedTokensRegisterMessage
type ManagedTokensRegisterMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// token function to register, e.g BTC: 0x43417434fd869edee76cca2a4d2301e528a1551b1d719b75c350c3c97d15b8b9::coins::BTC
	Function      *StructTag `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ManagedTokensRegisterMessage) Reset() {
	*x = ManagedTokensRegisterMessage{}
	mi := &file_Aptos_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManagedTokensRegisterMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedTokensRegisterMessage) ProtoMessage() {}

func (x *ManagedTokensRegisterMessage) ProtoReflect() protoreflect.Message {
	mi := &file_Aptos_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedTokensRegisterMessage.ProtoReflect.Descriptor instead.
func (*ManagedTokensRegisterMessage) Descriptor() ([]byte, []int) {
	return file_Aptos_proto_rawDescGZIP(), []int{5}
}

func (x *ManagedTokensRegisterMessage) GetFunction() *StructTag {
	if x != nil {
		return x.Function
	}
	return nil
}

// Necessary fields to process a CreateAccountMessage
type CreateAccountMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// auth account address to create
	AuthKey       string `protobuf:"bytes,1,opt,name=auth_key,json=authKey,proto3" json:"auth_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAccountMessage) Reset() {
	*x = CreateAccountMessage{}
	mi := &file_Aptos_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAccountMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountMessage) ProtoMessage() {}

func (x *CreateAccountMessage) ProtoReflect() protoreflect.Message {
	mi := &file_Aptos_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountMessage.ProtoReflect.Descriptor instead.
func (*CreateAccountMessage) Descriptor() ([]byte, []int) {
	return file_Aptos_proto_rawDescGZIP(), []int{6}
}

func (x *CreateAccountMessage) GetAuthKey() string {
	if x != nil {
		return x.AuthKey
	}
	return ""
}

// Necessary fields to process an OfferNftMessage
type OfferNftMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Receiver address
	Receiver string `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// Creator address
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	// Name of the collection
	CollectionName string `protobuf:"bytes,3,opt,name=collectionName,proto3" json:"collectionName,omitempty"`
	// Name of the NFT
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Property version (should be often 0)
	PropertyVersion uint64 `protobuf:"varint,5,opt,name=property_version,json=propertyVersion,proto3" json:"property_version,omitempty"`
	// Amount of NFT's to transfer (should be often 1)
	Amount        uint64 `protobuf:"varint,6,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OfferNftMessage) Reset() {
	*x = OfferNftMessage{}
	mi := &file_Aptos_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OfferNftMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfferNftMessage) ProtoMessage() {}

func (x *OfferNftMessage) ProtoReflect() protoreflect.Message {
	mi := &file_Aptos_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfferNftMessage.ProtoReflect.Descriptor instead.
func (*OfferNftMessage) Descriptor() ([]byte, []int) {
	return file_Aptos_proto_rawDescGZIP(), []int{7}
}

func (x *OfferNftMessage) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

func (x *OfferNftMessage) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *OfferNftMessage) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *OfferNftMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OfferNftMessage) GetPropertyVersion() uint64 {
	if x != nil {
		return x.PropertyVersion
	}
	return 0
}

func (x *OfferNftMessage) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// Necessary fields to process an CancelOfferNftMessage
type CancelOfferNftMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Receiver address
	Receiver string `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// Creator address
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	// Name of the collection
	CollectionName string `protobuf:"bytes,3,opt,name=collectionName,proto3" json:"collectionName,omitempty"`
	// Name of the NFT
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Property version (should be often 0)
	PropertyVersion uint64 `protobuf:"varint,5,opt,name=property_version,json=propertyVersion,proto3" json:"property_version,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CancelOfferNftMessage) Reset() {
	*x = CancelOfferNftMessage{}
	mi := &file_Aptos_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelOfferNftMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOfferNftMessage) ProtoMessage() {}

func (x *CancelOfferNftMessage) ProtoReflect() protoreflect.Message {
	mi := &file_Aptos_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOfferNftMessage.ProtoReflect.Descriptor instead.
func (*CancelOfferNftMessage) Descriptor() ([]byte, []int) {
	return file_Aptos_proto_rawDescGZIP(), []int{8}
}

func (x *CancelOfferNftMessage) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

func (x *CancelOfferNftMessage) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CancelOfferNftMessage) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *CancelOfferNftMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CancelOfferNftMessage) GetPropertyVersion() uint64 {
	if x != nil {
		return x.PropertyVersion
	}
	return 0
}

// Necessary fields to process an ClaimNftMessage
type ClaimNftMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Sender address
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// Creator address
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	// Name of the collection
	CollectionName string `protobuf:"bytes,3,opt,name=collectionName,proto3" json:"collectionName,omitempty"`
	// Name of the NFT
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Property version (should be often 0)
	PropertyVersion uint64 `protobuf:"varint,5,opt,name=property_version,json=propertyVersion,proto3" json:"property_version,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ClaimNftMessage) Reset() {
	*x = ClaimNftMessage{}
	mi := &file_Aptos_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClaimNftMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimNftMessage) ProtoMessage() {}

func (x *ClaimNftMessage) ProtoReflect() protoreflect.Message {
	mi := &file_Aptos_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimNftMessage.ProtoReflect.Descriptor instead.
func (*ClaimNftMessage) Descriptor() ([]byte, []int) {
	return file_Aptos_proto_rawDescGZIP(), []int{9}
}

func (x *ClaimNftMessage) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *ClaimNftMessage) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *ClaimNftMessage) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *ClaimNftMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClaimNftMessage) GetPropertyVersion() uint64 {
	if x != nil {
		return x.PropertyVersion
	}
	return 0
}

type TortugaClaim struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// idx of ticket to claim
	Idx           uint64 `protobuf:"varint,1,opt,name=idx,proto3" json:"idx,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TortugaClaim) Reset() {
	*x = TortugaClaim{}
	mi := &file_Aptos_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TortugaClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TortugaClaim) ProtoMessage() {}

func (x *TortugaClaim) ProtoReflect() protoreflect.Message {
	mi := &file_Aptos_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TortugaClaim.ProtoReflect.Descriptor instead.
func (*TortugaClaim) Descriptor() ([]byte, []int) {
	return file_Aptos_proto_rawDescGZIP(), []int{10}
}

func (x *TortugaClaim) GetIdx() uint64 {
	if x != nil {
		return x.Idx
	}
	return 0
}

type TortugaStake struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Amount to be stake
	Amount        uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TortugaStake) Reset() {
	*x = TortugaStake{}
	mi := &file_Aptos_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TortugaStake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TortugaStake) ProtoMessage() {}

func (x *TortugaStake) ProtoReflect() protoreflect.Message {
	mi := &file_Aptos_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TortugaStake.ProtoReflect.Descriptor instead.
func (*TortugaStake) Descriptor() ([]byte, []int) {
	return file_Aptos_proto_rawDescGZIP(), []int{11}
}

func (x *TortugaStake) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type TortugaUnstake struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Amount to be stake
	Amount        uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TortugaUnstake) Reset() {
	*x = TortugaUnstake{}
	mi := &file_Aptos_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TortugaUnstake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TortugaUnstake) ProtoMessage() {}

func (x *TortugaUnstake) ProtoReflect() protoreflect.Message {
	mi := &file_Aptos_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TortugaUnstake.ProtoReflect.Descriptor instead.
func (*TortugaUnstake) Descriptor() ([]byte, []int) {
	return file_Aptos_proto_rawDescGZIP(), []int{12}
}

func (x *TortugaUnstake) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type LiquidStaking struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Smart contract address of liquid staking module
	SmartContractAddress string `protobuf:"bytes,1,opt,name=smart_contract_address,json=smartContractAddress,proto3" json:"smart_contract_address,omitempty"`
	// Types that are valid to be assigned to LiquidStakeTransactionPayload:
	//
	//	*LiquidStaking_Stake
	//	*LiquidStaking_Unstake
	//	*LiquidStaking_Claim
	LiquidStakeTransactionPayload isLiquidStaking_LiquidStakeTransactionPayload `protobuf_oneof:"liquid_stake_transaction_payload"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *LiquidStaking) Reset() {
	*x = LiquidStaking{}
	mi := &file_Aptos_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiquidStaking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidStaking) ProtoMessage() {}

func (x *LiquidStaking) ProtoReflect() protoreflect.Message {
	mi := &file_Aptos_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidStaking.ProtoReflect.Descriptor instead.
func (*LiquidStaking) Descriptor() ([]byte, []int) {
	return file_Aptos_proto_rawDescGZIP(), []int{13}
}

func (x *LiquidStaking) GetSmartContractAddress() string {
	if x != nil {
		return x.SmartContractAddress
	}
	return ""
}

func (x *LiquidStaking) GetLiquidStakeTransactionPayload() isLiquidStaking_LiquidStakeTransactionPayload {
	if x != nil {
		return x.LiquidStakeTransactionPayload
	}
	return nil
}

func (x *LiquidStaking) GetStake() *TortugaStake {
	if x != nil {
		if x, ok := x.LiquidStakeTransactionPayload.(*LiquidStaking_Stake); ok {
			return x.Stake
		}
	}
	return nil
}

func (x *LiquidStaking) GetUnstake() *TortugaUnstake {
	if x != nil {
		if x, ok := x.LiquidStakeTransactionPayload.(*LiquidStaking_Unstake); ok {
			return x.Unstake
		}
	}
	return nil
}

func (x *LiquidStaking) GetClaim() *TortugaClaim {
	if x != nil {
		if x, ok := x.LiquidStakeTransactionPayload.(*LiquidStaking_Claim); ok {
			return x.Claim
		}
	}
	return nil
}

type isLiquidStaking_LiquidStakeTransactionPayload interface {
	isLiquidStaking_LiquidStakeTransactionPayload()
}

type LiquidStaking_Stake struct {
	Stake *TortugaStake `protobuf:"bytes,2,opt,name=stake,proto3,oneof"`
}

type LiquidStaking_Unstake struct {
	Unstake *TortugaUnstake `protobuf:"bytes,3,opt,name=unstake,proto3,oneof"`
}

type LiquidStaking_Claim struct {
	Claim *TortugaClaim `protobuf:"bytes,4,opt,name=claim,proto3,oneof"`
}

func (*LiquidStaking_Stake) isLiquidStaking_LiquidStakeTransactionPayload() {}

func (*LiquidStaking_Unstake) isLiquidStaking_LiquidStakeTransactionPayload() {}

func (*LiquidStaking_Claim) isLiquidStaking_LiquidStakeTransactionPayload() {}

type NftMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to NftTransactionPayload:
	//
	//	*NftMessage_OfferNft
	//	*NftMessage_CancelOfferNft
	//	*NftMessage_ClaimNft
	NftTransactionPayload isNftMessage_NftTransactionPayload `protobuf_oneof:"nft_transaction_payload"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *NftMessage) Reset() {
	*x = NftMessage{}
	mi := &file_Aptos_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NftMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftMessage) ProtoMessage() {}

func (x *NftMessage) ProtoReflect() protoreflect.Message {
	mi := &file_Aptos_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftMessage.ProtoReflect.Descriptor instead.
func (*NftMessage) Descriptor() ([]byte, []int) {
	return file_Aptos_proto_rawDescGZIP(), []int{14}
}

func (x *NftMessage) GetNftTransactionPayload() isNftMessage_NftTransactionPayload {
	if x != nil {
		return x.NftTransactionPayload
	}
	return nil
}

func (x *NftMessage) GetOfferNft() *OfferNftMessage {
	if x != nil {
		if x, ok := x.NftTransactionPayload.(*NftMessage_OfferNft); ok {
			return x.OfferNft
		}
	}
	return nil
}

func (x *NftMessage) GetCancelOfferNft() *CancelOfferNftMessage {
	if x != nil {
		if x, ok := x.NftTransactionPayload.(*NftMessage_CancelOfferNft); ok {
			return x.CancelOfferNft
		}
	}
	return nil
}

func (x *NftMessage) GetClaimNft() *ClaimNftMessage {
	if x != nil {
		if x, ok := x.NftTransactionPayload.(*NftMessage_ClaimNft); ok {
			return x.ClaimNft
		}
	}
	return nil
}

type isNftMessage_NftTransactionPayload interface {
	isNftMessage_NftTransactionPayload()
}

type NftMessage_OfferNft struct {
	OfferNft *OfferNftMessage `protobuf:"bytes,1,opt,name=offer_nft,json=offerNft,proto3,oneof"`
}

type NftMessage_CancelOfferNft struct {
	CancelOfferNft *CancelOfferNftMessage `protobuf:"bytes,2,opt,name=cancel_offer_nft,json=cancelOfferNft,proto3,oneof"`
}

type NftMessage_ClaimNft struct {
	ClaimNft *ClaimNftMessage `protobuf:"bytes,3,opt,name=claim_nft,json=claimNft,proto3,oneof"`
}

func (*NftMessage_OfferNft) isNftMessage_NftTransactionPayload() {}

func (*NftMessage_CancelOfferNft) isNftMessage_NftTransactionPayload() {}

func (*NftMessage_ClaimNft) isNftMessage_NftTransactionPayload() {}

// Input data necessary to create a signed transaction.
type SigningInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Sender Account address (string)
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// Sequence number, incremented atomically for each tx present on the account, start at 0 (int64)
	SequenceNumber int64 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// Max gas amount that the user is willing to pay (uint64)
	MaxGasAmount uint64 `protobuf:"varint,3,opt,name=max_gas_amount,json=maxGasAmount,proto3" json:"max_gas_amount,omitempty"`
	// Gas unit price - queried through API (uint64)
	GasUnitPrice uint64 `protobuf:"varint,4,opt,name=gas_unit_price,json=gasUnitPrice,proto3" json:"gas_unit_price,omitempty"`
	// Expiration timestamp for the transaction, can't be in the past (uint64)
	ExpirationTimestampSecs uint64 `protobuf:"varint,5,opt,name=expiration_timestamp_secs,json=expirationTimestampSecs,proto3" json:"expiration_timestamp_secs,omitempty"`
	// Chain id 1 (mainnet) 32(devnet) (uint32 - casted in uint8_t later)
	ChainId uint32 `protobuf:"varint,6,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Private key to sign the transaction (bytes)
	PrivateKey []byte `protobuf:"bytes,7,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// hex encoded function to sign, use it for smart contract approval (string)
	AnyEncoded string `protobuf:"bytes,8,opt,name=any_encoded,json=anyEncoded,proto3" json:"any_encoded,omitempty"`
	// Types that are valid to be assigned to TransactionPayload:
	//
	//	*SigningInput_Transfer
	//	*SigningInput_TokenTransfer
	//	*SigningInput_CreateAccount
	//	*SigningInput_NftMessage
	//	*SigningInput_RegisterToken
	//	*SigningInput_LiquidStakingMessage
	//	*SigningInput_TokenTransferCoins
	//	*SigningInput_FungibleAssetTransfer
	TransactionPayload isSigningInput_TransactionPayload `protobuf_oneof:"transaction_payload"`
	Abi                string                            `protobuf:"bytes,21,opt,name=abi,proto3" json:"abi,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SigningInput) Reset() {
	*x = SigningInput{}
	mi := &file_Aptos_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningInput) ProtoMessage() {}

func (x *SigningInput) ProtoReflect() protoreflect.Message {
	mi := &file_Aptos_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningInput.ProtoReflect.Descriptor instead.
func (*SigningInput) Descriptor() ([]byte, []int) {
	return file_Aptos_proto_rawDescGZIP(), []int{15}
}

func (x *SigningInput) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *SigningInput) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *SigningInput) GetMaxGasAmount() uint64 {
	if x != nil {
		return x.MaxGasAmount
	}
	return 0
}

func (x *SigningInput) GetGasUnitPrice() uint64 {
	if x != nil {
		return x.GasUnitPrice
	}
	return 0
}

func (x *SigningInput) GetExpirationTimestampSecs() uint64 {
	if x != nil {
		return x.ExpirationTimestampSecs
	}
	return 0
}

func (x *SigningInput) GetChainId() uint32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *SigningInput) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *SigningInput) GetAnyEncoded() string {
	if x != nil {
		return x.AnyEncoded
	}
	return ""
}

func (x *SigningInput) GetTransactionPayload() isSigningInput_TransactionPayload {
	if x != nil {
		return x.TransactionPayload
	}
	return nil
}

func (x *SigningInput) GetTransfer() *TransferMessage {
	if x != nil {
		if x, ok := x.TransactionPayload.(*SigningInput_Transfer); ok {
			return x.Transfer
		}
	}
	return nil
}

func (x *SigningInput) GetTokenTransfer() *TokenTransferMessage {
	if x != nil {
		if x, ok := x.TransactionPayload.(*SigningInput_TokenTransfer); ok {
			return x.TokenTransfer
		}
	}
	return nil
}

func (x *SigningInput) GetCreateAccount() *CreateAccountMessage {
	if x != nil {
		if x, ok := x.TransactionPayload.(*SigningInput_CreateAccount); ok {
			return x.CreateAccount
		}
	}
	return nil
}

func (x *SigningInput) GetNftMessage() *NftMessage {
	if x != nil {
		if x, ok := x.TransactionPayload.(*SigningInput_NftMessage); ok {
			return x.NftMessage
		}
	}
	return nil
}

func (x *SigningInput) GetRegisterToken() *ManagedTokensRegisterMessage {
	if x != nil {
		if x, ok := x.TransactionPayload.(*SigningInput_RegisterToken); ok {
			return x.RegisterToken
		}
	}
	return nil
}

func (x *SigningInput) GetLiquidStakingMessage() *LiquidStaking {
	if x != nil {
		if x, ok := x.TransactionPayload.(*SigningInput_LiquidStakingMessage); ok {
			return x.LiquidStakingMessage
		}
	}
	return nil
}

func (x *SigningInput) GetTokenTransferCoins() *TokenTransferCoinsMessage {
	if x != nil {
		if x, ok := x.TransactionPayload.(*SigningInput_TokenTransferCoins); ok {
			return x.TokenTransferCoins
		}
	}
	return nil
}

func (x *SigningInput) GetFungibleAssetTransfer() *FungibleAssetTransferMessage {
	if x != nil {
		if x, ok := x.TransactionPayload.(*SigningInput_FungibleAssetTransfer); ok {
			return x.FungibleAssetTransfer
		}
	}
	return nil
}

func (x *SigningInput) GetAbi() string {
	if x != nil {
		return x.Abi
	}
	return ""
}

type isSigningInput_TransactionPayload interface {
	isSigningInput_TransactionPayload()
}

type SigningInput_Transfer struct {
	Transfer *TransferMessage `protobuf:"bytes,9,opt,name=transfer,proto3,oneof"`
}

type SigningInput_TokenTransfer struct {
	TokenTransfer *TokenTransferMessage `protobuf:"bytes,10,opt,name=token_transfer,json=tokenTransfer,proto3,oneof"`
}

type SigningInput_CreateAccount struct {
	CreateAccount *CreateAccountMessage `protobuf:"bytes,11,opt,name=create_account,json=createAccount,proto3,oneof"`
}

type SigningInput_NftMessage struct {
	NftMessage *NftMessage `protobuf:"bytes,12,opt,name=nft_message,json=nftMessage,proto3,oneof"`
}

type SigningInput_RegisterToken struct {
	RegisterToken *ManagedTokensRegisterMessage `protobuf:"bytes,13,opt,name=register_token,json=registerToken,proto3,oneof"`
}

type SigningInput_LiquidStakingMessage struct {
	LiquidStakingMessage *LiquidStaking `protobuf:"bytes,14,opt,name=liquid_staking_message,json=liquidStakingMessage,proto3,oneof"`
}

type SigningInput_TokenTransferCoins struct {
	TokenTransferCoins *TokenTransferCoinsMessage `protobuf:"bytes,15,opt,name=token_transfer_coins,json=tokenTransferCoins,proto3,oneof"`
}

type SigningInput_FungibleAssetTransfer struct {
	FungibleAssetTransfer *FungibleAssetTransferMessage `protobuf:"bytes,16,opt,name=fungible_asset_transfer,json=fungibleAssetTransfer,proto3,oneof"`
}

func (*SigningInput_Transfer) isSigningInput_TransactionPayload() {}

func (*SigningInput_TokenTransfer) isSigningInput_TransactionPayload() {}

func (*SigningInput_CreateAccount) isSigningInput_TransactionPayload() {}

func (*SigningInput_NftMessage) isSigningInput_TransactionPayload() {}

func (*SigningInput_RegisterToken) isSigningInput_TransactionPayload() {}

func (*SigningInput_LiquidStakingMessage) isSigningInput_TransactionPayload() {}

func (*SigningInput_TokenTransferCoins) isSigningInput_TransactionPayload() {}

func (*SigningInput_FungibleAssetTransfer) isSigningInput_TransactionPayload() {}

// Information related to the signed transaction
type TransactionAuthenticator struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Signature part of the signed transaction (bytes)
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	// Public key of the signer (bytes)
	PublicKey     []byte `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionAuthenticator) Reset() {
	*x = TransactionAuthenticator{}
	mi := &file_Aptos_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionAuthenticator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionAuthenticator) ProtoMessage() {}

func (x *TransactionAuthenticator) ProtoReflect() protoreflect.Message {
	mi := &file_Aptos_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionAuthenticator.ProtoReflect.Descriptor instead.
func (*TransactionAuthenticator) Descriptor() ([]byte, []int) {
	return file_Aptos_proto_rawDescGZIP(), []int{16}
}

func (x *TransactionAuthenticator) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *TransactionAuthenticator) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

// Transaction signing output.
type SigningOutput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / The raw transaction (bytes)
	RawTxn []byte `protobuf:"bytes,1,opt,name=raw_txn,json=rawTxn,proto3" json:"raw_txn,omitempty"`
	// / Public key and signature to authenticate
	Authenticator *TransactionAuthenticator `protobuf:"bytes,2,opt,name=authenticator,proto3" json:"authenticator,omitempty"`
	// / Signed and encoded transaction bytes.
	Encoded []byte `protobuf:"bytes,3,opt,name=encoded,proto3" json:"encoded,omitempty"`
	// Transaction json format for api broadcasting (string)
	Json string `protobuf:"bytes,4,opt,name=json,proto3" json:"json,omitempty"`
	// Error code, 0 is ok, other codes will be treated as errors.
	Error common.SigningError `protobuf:"varint,5,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// Error description.
	ErrorMessage  string `protobuf:"bytes,6,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningOutput) Reset() {
	*x = SigningOutput{}
	mi := &file_Aptos_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningOutput) ProtoMessage() {}

func (x *SigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_Aptos_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningOutput.ProtoReflect.Descriptor instead.
func (*SigningOutput) Descriptor() ([]byte, []int) {
	return file_Aptos_proto_rawDescGZIP(), []int{17}
}

func (x *SigningOutput) GetRawTxn() []byte {
	if x != nil {
		return x.RawTxn
	}
	return nil
}

func (x *SigningOutput) GetAuthenticator() *TransactionAuthenticator {
	if x != nil {
		return x.Authenticator
	}
	return nil
}

func (x *SigningOutput) GetEncoded() []byte {
	if x != nil {
		return x.Encoded
	}
	return nil
}

func (x *SigningOutput) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

func (x *SigningOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *SigningOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_Aptos_proto protoreflect.FileDescriptor

const file_Aptos_proto_rawDesc = "" +
	"\n" +
	"\vAptos.proto\x12\x0eTW.Aptos.Proto\x1a\fCommon.proto\"9\n" +
	"\x0fTransferMessage\x12\x0e\n" +
	"\x02to\x18\x01 \x01(\tR\x02to\x12\x16\n" +
	"\x06amount\x18\x02 \x01(\x04R\x06amount\"`\n" +
	"\tStructTag\x12'\n" +
	"\x0faccount_address\x18\x01 \x01(\tR\x0eaccountAddress\x12\x16\n" +
	"\x06module\x18\x02 \x01(\tR\x06module\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\"u\n" +
	"\x14TokenTransferMessage\x12\x0e\n" +
	"\x02to\x18\x01 \x01(\tR\x02to\x12\x16\n" +
	"\x06amount\x18\x02 \x01(\x04R\x06amount\x125\n" +
	"\bfunction\x18\x03 \x01(\v2\x19.TW.Aptos.Proto.StructTagR\bfunction\"z\n" +
	"\x19TokenTransferCoinsMessage\x12\x0e\n" +
	"\x02to\x18\x01 \x01(\tR\x02to\x12\x16\n" +
	"\x06amount\x18\x02 \x01(\x04R\x06amount\x125\n" +
	"\bfunction\x18\x03 \x01(\v2\x19.TW.Aptos.Proto.StructTagR\bfunction\"q\n" +
	"\x1cFungibleAssetTransferMessage\x12)\n" +
	"\x10metadata_address\x18\x01 \x01(\tR\x0fmetadataAddress\x12\x0e\n" +
	"\x02to\x18\x02 \x01(\tR\x02to\x12\x16\n" +
	"\x06amount\x18\x03 \x01(\x04R\x06amount\"U\n" +
	"\x1cManagedTokensRegisterMessage\x125\n" +
	"\bfunction\x18\x01 \x01(\v2\x19.TW.Aptos.Proto.StructTagR\bfunction\"1\n" +
	"\x14CreateAccountMessage\x12\x19\n" +
	"\bauth_key\x18\x01 \x01(\tR\aauthKey\"\xc6\x01\n" +
	"\x0fOfferNftMessage\x12\x1a\n" +
	"\breceiver\x18\x01 \x01(\tR\breceiver\x12\x18\n" +
	"\acreator\x18\x02 \x01(\tR\acreator\x12&\n" +
	"\x0ecollectionName\x18\x03 \x01(\tR\x0ecollectionName\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12)\n" +
	"\x10property_version\x18\x05 \x01(\x04R\x0fpropertyVersion\x12\x16\n" +
	"\x06amount\x18\x06 \x01(\x04R\x06amount\"\xb4\x01\n" +
	"\x15CancelOfferNftMessage\x12\x1a\n" +
	"\breceiver\x18\x01 \x01(\tR\breceiver\x12\x18\n" +
	"\acreator\x18\x02 \x01(\tR\acreator\x12&\n" +
	"\x0ecollectionName\x18\x03 \x01(\tR\x0ecollectionName\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12)\n" +
	"\x10property_version\x18\x05 \x01(\x04R\x0fpropertyVersion\"\xaa\x01\n" +
	"\x0fClaimNftMessage\x12\x16\n" +
	"\x06sender\x18\x01 \x01(\tR\x06sender\x12\x18\n" +
	"\acreator\x18\x02 \x01(\tR\acreator\x12&\n" +
	"\x0ecollectionName\x18\x03 \x01(\tR\x0ecollectionName\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12)\n" +
	"\x10property_version\x18\x05 \x01(\x04R\x0fpropertyVersion\" \n" +
	"\fTortugaClaim\x12\x10\n" +
	"\x03idx\x18\x01 \x01(\x04R\x03idx\"&\n" +
	"\fTortugaStake\x12\x16\n" +
	"\x06amount\x18\x01 \x01(\x04R\x06amount\"(\n" +
	"\x0eTortugaUnstake\x12\x16\n" +
	"\x06amount\x18\x01 \x01(\x04R\x06amount\"\x91\x02\n" +
	"\rLiquidStaking\x124\n" +
	"\x16smart_contract_address\x18\x01 \x01(\tR\x14smartContractAddress\x124\n" +
	"\x05stake\x18\x02 \x01(\v2\x1c.TW.Aptos.Proto.TortugaStakeH\x00R\x05stake\x12:\n" +
	"\aunstake\x18\x03 \x01(\v2\x1e.TW.Aptos.Proto.TortugaUnstakeH\x00R\aunstake\x124\n" +
	"\x05claim\x18\x04 \x01(\v2\x1c.TW.Aptos.Proto.TortugaClaimH\x00R\x05claimB\"\n" +
	" liquid_stake_transaction_payload\"\xfa\x01\n" +
	"\n" +
	"NftMessage\x12>\n" +
	"\toffer_nft\x18\x01 \x01(\v2\x1f.TW.Aptos.Proto.OfferNftMessageH\x00R\bofferNft\x12Q\n" +
	"\x10cancel_offer_nft\x18\x02 \x01(\v2%.TW.Aptos.Proto.CancelOfferNftMessageH\x00R\x0ecancelOfferNft\x12>\n" +
	"\tclaim_nft\x18\x03 \x01(\v2\x1f.TW.Aptos.Proto.ClaimNftMessageH\x00R\bclaimNftB\x19\n" +
	"\x17nft_transaction_payload\"\xee\a\n" +
	"\fSigningInput\x12\x16\n" +
	"\x06sender\x18\x01 \x01(\tR\x06sender\x12'\n" +
	"\x0fsequence_number\x18\x02 \x01(\x03R\x0esequenceNumber\x12$\n" +
	"\x0emax_gas_amount\x18\x03 \x01(\x04R\fmaxGasAmount\x12$\n" +
	"\x0egas_unit_price\x18\x04 \x01(\x04R\fgasUnitPrice\x12:\n" +
	"\x19expiration_timestamp_secs\x18\x05 \x01(\x04R\x17expirationTimestampSecs\x12\x19\n" +
	"\bchain_id\x18\x06 \x01(\rR\achainId\x12\x1f\n" +
	"\vprivate_key\x18\a \x01(\fR\n" +
	"privateKey\x12\x1f\n" +
	"\vany_encoded\x18\b \x01(\tR\n" +
	"anyEncoded\x12=\n" +
	"\btransfer\x18\t \x01(\v2\x1f.TW.Aptos.Proto.TransferMessageH\x00R\btransfer\x12M\n" +
	"\x0etoken_transfer\x18\n" +
	" \x01(\v2$.TW.Aptos.Proto.TokenTransferMessageH\x00R\rtokenTransfer\x12M\n" +
	"\x0ecreate_account\x18\v \x01(\v2$.TW.Aptos.Proto.CreateAccountMessageH\x00R\rcreateAccount\x12=\n" +
	"\vnft_message\x18\f \x01(\v2\x1a.TW.Aptos.Proto.NftMessageH\x00R\n" +
	"nftMessage\x12U\n" +
	"\x0eregister_token\x18\r \x01(\v2,.TW.Aptos.Proto.ManagedTokensRegisterMessageH\x00R\rregisterToken\x12U\n" +
	"\x16liquid_staking_message\x18\x0e \x01(\v2\x1d.TW.Aptos.Proto.LiquidStakingH\x00R\x14liquidStakingMessage\x12]\n" +
	"\x14token_transfer_coins\x18\x0f \x01(\v2).TW.Aptos.Proto.TokenTransferCoinsMessageH\x00R\x12tokenTransferCoins\x12f\n" +
	"\x17fungible_asset_transfer\x18\x10 \x01(\v2,.TW.Aptos.Proto.FungibleAssetTransferMessageH\x00R\x15fungibleAssetTransfer\x12\x10\n" +
	"\x03abi\x18\x15 \x01(\tR\x03abiB\x15\n" +
	"\x13transaction_payload\"W\n" +
	"\x18TransactionAuthenticator\x12\x1c\n" +
	"\tsignature\x18\x01 \x01(\fR\tsignature\x12\x1d\n" +
	"\n" +
	"public_key\x18\x02 \x01(\fR\tpublicKey\"\x80\x02\n" +
	"\rSigningOutput\x12\x17\n" +
	"\araw_txn\x18\x01 \x01(\fR\x06rawTxn\x12N\n" +
	"\rauthenticator\x18\x02 \x01(\v2(.TW.Aptos.Proto.TransactionAuthenticatorR\rauthenticator\x12\x18\n" +
	"\aencoded\x18\x03 \x01(\fR\aencoded\x12\x12\n" +
	"\x04json\x18\x04 \x01(\tR\x04json\x123\n" +
	"\x05error\x18\x05 \x01(\x0e2\x1d.TW.Common.Proto.SigningErrorR\x05error\x12#\n" +
	"\rerror_message\x18\x06 \x01(\tR\ferrorMessageB\x17\n" +
	"\x15wallet.core.jni.protob\x06proto3"

var (
	file_Aptos_proto_rawDescOnce sync.Once
	file_Aptos_proto_rawDescData []byte
)

func file_Aptos_proto_rawDescGZIP() []byte {
	file_Aptos_proto_rawDescOnce.Do(func() {
		file_Aptos_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_Aptos_proto_rawDesc), len(file_Aptos_proto_rawDesc)))
	})
	return file_Aptos_proto_rawDescData
}

var file_Aptos_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_Aptos_proto_goTypes = []any{
	(*TransferMessage)(nil),              // 0: TW.Aptos.Proto.TransferMessage
	(*StructTag)(nil),                    // 1: TW.Aptos.Proto.StructTag
	(*TokenTransferMessage)(nil),         // 2: TW.Aptos.Proto.TokenTransferMessage
	(*TokenTransferCoinsMessage)(nil),    // 3: TW.Aptos.Proto.TokenTransferCoinsMessage
	(*FungibleAssetTransferMessage)(nil), // 4: TW.Aptos.Proto.FungibleAssetTransferMessage
	(*ManagedTokensRegisterMessage)(nil), // 5: TW.Aptos.Proto.ManagedTokensRegisterMessage
	(*CreateAccountMessage)(nil),         // 6: TW.Aptos.Proto.CreateAccountMessage
	(*OfferNftMessage)(nil),              // 7: TW.Aptos.Proto.OfferNftMessage
	(*CancelOfferNftMessage)(nil),        // 8: TW.Aptos.Proto.CancelOfferNftMessage
	(*ClaimNftMessage)(nil),              // 9: TW.Aptos.Proto.ClaimNftMessage
	(*TortugaClaim)(nil),                 // 10: TW.Aptos.Proto.TortugaClaim
	(*TortugaStake)(nil),                 // 11: TW.Aptos.Proto.TortugaStake
	(*TortugaUnstake)(nil),               // 12: TW.Aptos.Proto.TortugaUnstake
	(*LiquidStaking)(nil),                // 13: TW.Aptos.Proto.LiquidStaking
	(*NftMessage)(nil),                   // 14: TW.Aptos.Proto.NftMessage
	(*SigningInput)(nil),                 // 15: TW.Aptos.Proto.SigningInput
	(*TransactionAuthenticator)(nil),     // 16: TW.Aptos.Proto.TransactionAuthenticator
	(*SigningOutput)(nil),                // 17: TW.Aptos.Proto.SigningOutput
	(common.SigningError)(0),             // 18: TW.Common.Proto.SigningError
}
var file_Aptos_proto_depIdxs = []int32{
	1,  // 0: TW.Aptos.Proto.TokenTransferMessage.function:type_name -> TW.Aptos.Proto.StructTag
	1,  // 1: TW.Aptos.Proto.TokenTransferCoinsMessage.function:type_name -> TW.Aptos.Proto.StructTag
	1,  // 2: TW.Aptos.Proto.ManagedTokensRegisterMessage.function:type_name -> TW.Aptos.Proto.StructTag
	11, // 3: TW.Aptos.Proto.LiquidStaking.stake:type_name -> TW.Aptos.Proto.TortugaStake
	12, // 4: TW.Aptos.Proto.LiquidStaking.unstake:type_name -> TW.Aptos.Proto.TortugaUnstake
	10, // 5: TW.Aptos.Proto.LiquidStaking.claim:type_name -> TW.Aptos.Proto.TortugaClaim
	7,  // 6: TW.Aptos.Proto.NftMessage.offer_nft:type_name -> TW.Aptos.Proto.OfferNftMessage
	8,  // 7: TW.Aptos.Proto.NftMessage.cancel_offer_nft:type_name -> TW.Aptos.Proto.CancelOfferNftMessage
	9,  // 8: TW.Aptos.Proto.NftMessage.claim_nft:type_name -> TW.Aptos.Proto.ClaimNftMessage
	0,  // 9: TW.Aptos.Proto.SigningInput.transfer:type_name -> TW.Aptos.Proto.TransferMessage
	2,  // 10: TW.Aptos.Proto.SigningInput.token_transfer:type_name -> TW.Aptos.Proto.TokenTransferMessage
	6,  // 11: TW.Aptos.Proto.SigningInput.create_account:type_name -> TW.Aptos.Proto.CreateAccountMessage
	14, // 12: TW.Aptos.Proto.SigningInput.nft_message:type_name -> TW.Aptos.Proto.NftMessage
	5,  // 13: TW.Aptos.Proto.SigningInput.register_token:type_name -> TW.Aptos.Proto.ManagedTokensRegisterMessage
	13, // 14: TW.Aptos.Proto.SigningInput.liquid_staking_message:type_name -> TW.Aptos.Proto.LiquidStaking
	3,  // 15: TW.Aptos.Proto.SigningInput.token_transfer_coins:type_name -> TW.Aptos.Proto.TokenTransferCoinsMessage
	4,  // 16: TW.Aptos.Proto.SigningInput.fungible_asset_transfer:type_name -> TW.Aptos.Proto.FungibleAssetTransferMessage
	16, // 17: TW.Aptos.Proto.SigningOutput.authenticator:type_name -> TW.Aptos.Proto.TransactionAuthenticator
	18, // 18: TW.Aptos.Proto.SigningOutput.error:type_name -> TW.Common.Proto.SigningError
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_Aptos_proto_init() }
func file_Aptos_proto_init() {
	if File_Aptos_proto != nil {
		return
	}
	file_Aptos_proto_msgTypes[13].OneofWrappers = []any{
		(*LiquidStaking_Stake)(nil),
		(*LiquidStaking_Unstake)(nil),
		(*LiquidStaking_Claim)(nil),
	}
	file_Aptos_proto_msgTypes[14].OneofWrappers = []any{
		(*NftMessage_OfferNft)(nil),
		(*NftMessage_CancelOfferNft)(nil),
		(*NftMessage_ClaimNft)(nil),
	}
	file_Aptos_proto_msgTypes[15].OneofWrappers = []any{
		(*SigningInput_Transfer)(nil),
		(*SigningInput_TokenTransfer)(nil),
		(*SigningInput_CreateAccount)(nil),
		(*SigningInput_NftMessage)(nil),
		(*SigningInput_RegisterToken)(nil),
		(*SigningInput_LiquidStakingMessage)(nil),
		(*SigningInput_TokenTransferCoins)(nil),
		(*SigningInput_FungibleAssetTransfer)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_Aptos_proto_rawDesc), len(file_Aptos_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Aptos_proto_goTypes,
		DependencyIndexes: file_Aptos_proto_depIdxs,
		MessageInfos:      file_Aptos_proto_msgTypes,
	}.Build()
	File_Aptos_proto = out.File
	file_Aptos_proto_goTypes = nil
	file_Aptos_proto_depIdxs = nil
}
