// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.20.3
// source: Theta.proto

package theta

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	common "tw/protos/common"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// / Input data necessary to create a signed transaction
type SigningInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Chain ID string, mainnet, testnet and privatenet
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// / Recipient address
	ToAddress string `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// / Theta token amount to send in wei (uint256, serialized big endian)
	ThetaAmount []byte `protobuf:"bytes,3,opt,name=theta_amount,json=thetaAmount,proto3" json:"theta_amount,omitempty"`
	// / TFuel token amount to send in wei (uint256, serialized big endian)
	TfuelAmount []byte `protobuf:"bytes,4,opt,name=tfuel_amount,json=tfuelAmount,proto3" json:"tfuel_amount,omitempty"`
	// / Sequence number of the transaction for the sender address
	Sequence uint64 `protobuf:"varint,5,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// / Fee amount in TFuel wei for the transaction (uint256, serialized big endian)
	Fee []byte `protobuf:"bytes,6,opt,name=fee,proto3" json:"fee,omitempty"`
	// / The secret private key used for signing (32 bytes).
	PrivateKey []byte `protobuf:"bytes,7,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// / Public key
	PublicKey     []byte `protobuf:"bytes,8,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningInput) Reset() {
	*x = SigningInput{}
	mi := &file_Theta_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningInput) ProtoMessage() {}

func (x *SigningInput) ProtoReflect() protoreflect.Message {
	mi := &file_Theta_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningInput.ProtoReflect.Descriptor instead.
func (*SigningInput) Descriptor() ([]byte, []int) {
	return file_Theta_proto_rawDescGZIP(), []int{0}
}

func (x *SigningInput) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *SigningInput) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *SigningInput) GetThetaAmount() []byte {
	if x != nil {
		return x.ThetaAmount
	}
	return nil
}

func (x *SigningInput) GetTfuelAmount() []byte {
	if x != nil {
		return x.TfuelAmount
	}
	return nil
}

func (x *SigningInput) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *SigningInput) GetFee() []byte {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *SigningInput) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *SigningInput) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

// Result containing the signed and encoded transaction.
type SigningOutput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Signed and encoded transaction bytes
	Encoded []byte `protobuf:"bytes,1,opt,name=encoded,proto3" json:"encoded,omitempty"`
	// / Signature
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// error code, 0 is ok, other codes will be treated as errors
	Error common.SigningError `protobuf:"varint,3,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// error code description
	ErrorMessage  string `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningOutput) Reset() {
	*x = SigningOutput{}
	mi := &file_Theta_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningOutput) ProtoMessage() {}

func (x *SigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_Theta_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningOutput.ProtoReflect.Descriptor instead.
func (*SigningOutput) Descriptor() ([]byte, []int) {
	return file_Theta_proto_rawDescGZIP(), []int{1}
}

func (x *SigningOutput) GetEncoded() []byte {
	if x != nil {
		return x.Encoded
	}
	return nil
}

func (x *SigningOutput) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SigningOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *SigningOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_Theta_proto protoreflect.FileDescriptor

const file_Theta_proto_rawDesc = "" +
	"\n" +
	"\vTheta.proto\x12\x0eTW.Theta.Proto\x1a\fCommon.proto\"\xfc\x01\n" +
	"\fSigningInput\x12\x19\n" +
	"\bchain_id\x18\x01 \x01(\tR\achainId\x12\x1d\n" +
	"\n" +
	"to_address\x18\x02 \x01(\tR\ttoAddress\x12!\n" +
	"\ftheta_amount\x18\x03 \x01(\fR\vthetaAmount\x12!\n" +
	"\ftfuel_amount\x18\x04 \x01(\fR\vtfuelAmount\x12\x1a\n" +
	"\bsequence\x18\x05 \x01(\x04R\bsequence\x12\x10\n" +
	"\x03fee\x18\x06 \x01(\fR\x03fee\x12\x1f\n" +
	"\vprivate_key\x18\a \x01(\fR\n" +
	"privateKey\x12\x1d\n" +
	"\n" +
	"public_key\x18\b \x01(\fR\tpublicKey\"\xa1\x01\n" +
	"\rSigningOutput\x12\x18\n" +
	"\aencoded\x18\x01 \x01(\fR\aencoded\x12\x1c\n" +
	"\tsignature\x18\x02 \x01(\fR\tsignature\x123\n" +
	"\x05error\x18\x03 \x01(\x0e2\x1d.TW.Common.Proto.SigningErrorR\x05error\x12#\n" +
	"\rerror_message\x18\x04 \x01(\tR\ferrorMessageB\x17\n" +
	"\x15wallet.core.jni.protob\x06proto3"

var (
	file_Theta_proto_rawDescOnce sync.Once
	file_Theta_proto_rawDescData []byte
)

func file_Theta_proto_rawDescGZIP() []byte {
	file_Theta_proto_rawDescOnce.Do(func() {
		file_Theta_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_Theta_proto_rawDesc), len(file_Theta_proto_rawDesc)))
	})
	return file_Theta_proto_rawDescData
}

var file_Theta_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_Theta_proto_goTypes = []any{
	(*SigningInput)(nil),     // 0: TW.Theta.Proto.SigningInput
	(*SigningOutput)(nil),    // 1: TW.Theta.Proto.SigningOutput
	(common.SigningError)(0), // 2: TW.Common.Proto.SigningError
}
var file_Theta_proto_depIdxs = []int32{
	2, // 0: TW.Theta.Proto.SigningOutput.error:type_name -> TW.Common.Proto.SigningError
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_Theta_proto_init() }
func file_Theta_proto_init() {
	if File_Theta_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_Theta_proto_rawDesc), len(file_Theta_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Theta_proto_goTypes,
		DependencyIndexes: file_Theta_proto_depIdxs,
		MessageInfos:      file_Theta_proto_msgTypes,
	}.Build()
	File_Theta_proto = out.File
	file_Theta_proto_goTypes = nil
	file_Theta_proto_depIdxs = nil
}
