// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.20.3
// source: EthereumRlp.proto

package ethereumrlp

import (
	common "github.com/Cramiumlabs/wallet-core/wrapper/go-wrapper/protos/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// List of elements.
type RlpList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*RlpItem             `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RlpList) Reset() {
	*x = RlpList{}
	mi := &file_EthereumRlp_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RlpList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RlpList) ProtoMessage() {}

func (x *RlpList) ProtoReflect() protoreflect.Message {
	mi := &file_EthereumRlp_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RlpList.ProtoReflect.Descriptor instead.
func (*RlpList) Descriptor() ([]byte, []int) {
	return file_EthereumRlp_proto_rawDescGZIP(), []int{0}
}

func (x *RlpList) GetItems() []*RlpItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// RLP item.
type RlpItem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Item:
	//
	//	*RlpItem_StringItem
	//	*RlpItem_NumberU64
	//	*RlpItem_NumberU256
	//	*RlpItem_Address
	//	*RlpItem_Data
	//	*RlpItem_List
	//	*RlpItem_RawEncoded
	Item          isRlpItem_Item `protobuf_oneof:"item"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RlpItem) Reset() {
	*x = RlpItem{}
	mi := &file_EthereumRlp_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RlpItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RlpItem) ProtoMessage() {}

func (x *RlpItem) ProtoReflect() protoreflect.Message {
	mi := &file_EthereumRlp_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RlpItem.ProtoReflect.Descriptor instead.
func (*RlpItem) Descriptor() ([]byte, []int) {
	return file_EthereumRlp_proto_rawDescGZIP(), []int{1}
}

func (x *RlpItem) GetItem() isRlpItem_Item {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *RlpItem) GetStringItem() string {
	if x != nil {
		if x, ok := x.Item.(*RlpItem_StringItem); ok {
			return x.StringItem
		}
	}
	return ""
}

func (x *RlpItem) GetNumberU64() uint64 {
	if x != nil {
		if x, ok := x.Item.(*RlpItem_NumberU64); ok {
			return x.NumberU64
		}
	}
	return 0
}

func (x *RlpItem) GetNumberU256() []byte {
	if x != nil {
		if x, ok := x.Item.(*RlpItem_NumberU256); ok {
			return x.NumberU256
		}
	}
	return nil
}

func (x *RlpItem) GetAddress() string {
	if x != nil {
		if x, ok := x.Item.(*RlpItem_Address); ok {
			return x.Address
		}
	}
	return ""
}

func (x *RlpItem) GetData() []byte {
	if x != nil {
		if x, ok := x.Item.(*RlpItem_Data); ok {
			return x.Data
		}
	}
	return nil
}

func (x *RlpItem) GetList() *RlpList {
	if x != nil {
		if x, ok := x.Item.(*RlpItem_List); ok {
			return x.List
		}
	}
	return nil
}

func (x *RlpItem) GetRawEncoded() []byte {
	if x != nil {
		if x, ok := x.Item.(*RlpItem_RawEncoded); ok {
			return x.RawEncoded
		}
	}
	return nil
}

type isRlpItem_Item interface {
	isRlpItem_Item()
}

type RlpItem_StringItem struct {
	// A string to be encoded.
	StringItem string `protobuf:"bytes,1,opt,name=string_item,json=stringItem,proto3,oneof"`
}

type RlpItem_NumberU64 struct {
	// A U64 number to be encoded.
	NumberU64 uint64 `protobuf:"varint,2,opt,name=number_u64,json=numberU64,proto3,oneof"`
}

type RlpItem_NumberU256 struct {
	// A U256 number to be encoded.
	NumberU256 []byte `protobuf:"bytes,3,opt,name=number_u256,json=numberU256,proto3,oneof"`
}

type RlpItem_Address struct {
	// An address to be encoded.
	Address string `protobuf:"bytes,4,opt,name=address,proto3,oneof"`
}

type RlpItem_Data struct {
	// A data to be encoded.
	Data []byte `protobuf:"bytes,5,opt,name=data,proto3,oneof"`
}

type RlpItem_List struct {
	// A list of items to be encoded.
	List *RlpList `protobuf:"bytes,6,opt,name=list,proto3,oneof"`
}

type RlpItem_RawEncoded struct {
	// An RLP encoded item to be appended as it is.
	RawEncoded []byte `protobuf:"bytes,7,opt,name=raw_encoded,json=rawEncoded,proto3,oneof"`
}

func (*RlpItem_StringItem) isRlpItem_Item() {}

func (*RlpItem_NumberU64) isRlpItem_Item() {}

func (*RlpItem_NumberU256) isRlpItem_Item() {}

func (*RlpItem_Address) isRlpItem_Item() {}

func (*RlpItem_Data) isRlpItem_Item() {}

func (*RlpItem_List) isRlpItem_Item() {}

func (*RlpItem_RawEncoded) isRlpItem_Item() {}

// RLP encoding input.
type EncodingInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// An item or a list to encode.
	Item          *RlpItem `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncodingInput) Reset() {
	*x = EncodingInput{}
	mi := &file_EthereumRlp_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncodingInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodingInput) ProtoMessage() {}

func (x *EncodingInput) ProtoReflect() protoreflect.Message {
	mi := &file_EthereumRlp_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodingInput.ProtoReflect.Descriptor instead.
func (*EncodingInput) Descriptor() ([]byte, []int) {
	return file_EthereumRlp_proto_rawDescGZIP(), []int{2}
}

func (x *EncodingInput) GetItem() *RlpItem {
	if x != nil {
		return x.Item
	}
	return nil
}

// / RLP encoding output.
type EncodingOutput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// An item RLP encoded.
	Encoded []byte `protobuf:"bytes,1,opt,name=encoded,proto3" json:"encoded,omitempty"`
	// Error code, 0 is ok, other codes will be treated as errors.
	Error common.SigningError `protobuf:"varint,2,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// Error code description.
	ErrorMessage  string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncodingOutput) Reset() {
	*x = EncodingOutput{}
	mi := &file_EthereumRlp_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncodingOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodingOutput) ProtoMessage() {}

func (x *EncodingOutput) ProtoReflect() protoreflect.Message {
	mi := &file_EthereumRlp_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodingOutput.ProtoReflect.Descriptor instead.
func (*EncodingOutput) Descriptor() ([]byte, []int) {
	return file_EthereumRlp_proto_rawDescGZIP(), []int{3}
}

func (x *EncodingOutput) GetEncoded() []byte {
	if x != nil {
		return x.Encoded
	}
	return nil
}

func (x *EncodingOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *EncodingOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_EthereumRlp_proto protoreflect.FileDescriptor

const file_EthereumRlp_proto_rawDesc = "" +
	"\n" +
	"\x11EthereumRlp.proto\x12\x14TW.EthereumRlp.Proto\x1a\fCommon.proto\">\n" +
	"\aRlpList\x123\n" +
	"\x05items\x18\x01 \x03(\v2\x1d.TW.EthereumRlp.Proto.RlpItemR\x05items\"\x82\x02\n" +
	"\aRlpItem\x12!\n" +
	"\vstring_item\x18\x01 \x01(\tH\x00R\n" +
	"stringItem\x12\x1f\n" +
	"\n" +
	"number_u64\x18\x02 \x01(\x04H\x00R\tnumberU64\x12!\n" +
	"\vnumber_u256\x18\x03 \x01(\fH\x00R\n" +
	"numberU256\x12\x1a\n" +
	"\aaddress\x18\x04 \x01(\tH\x00R\aaddress\x12\x14\n" +
	"\x04data\x18\x05 \x01(\fH\x00R\x04data\x123\n" +
	"\x04list\x18\x06 \x01(\v2\x1d.TW.EthereumRlp.Proto.RlpListH\x00R\x04list\x12!\n" +
	"\vraw_encoded\x18\a \x01(\fH\x00R\n" +
	"rawEncodedB\x06\n" +
	"\x04item\"B\n" +
	"\rEncodingInput\x121\n" +
	"\x04item\x18\x01 \x01(\v2\x1d.TW.EthereumRlp.Proto.RlpItemR\x04item\"\x84\x01\n" +
	"\x0eEncodingOutput\x12\x18\n" +
	"\aencoded\x18\x01 \x01(\fR\aencoded\x123\n" +
	"\x05error\x18\x02 \x01(\x0e2\x1d.TW.Common.Proto.SigningErrorR\x05error\x12#\n" +
	"\rerror_message\x18\x03 \x01(\tR\ferrorMessageB\x17\n" +
	"\x15wallet.core.jni.protob\x06proto3"

var (
	file_EthereumRlp_proto_rawDescOnce sync.Once
	file_EthereumRlp_proto_rawDescData []byte
)

func file_EthereumRlp_proto_rawDescGZIP() []byte {
	file_EthereumRlp_proto_rawDescOnce.Do(func() {
		file_EthereumRlp_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_EthereumRlp_proto_rawDesc), len(file_EthereumRlp_proto_rawDesc)))
	})
	return file_EthereumRlp_proto_rawDescData
}

var file_EthereumRlp_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_EthereumRlp_proto_goTypes = []any{
	(*RlpList)(nil),          // 0: TW.EthereumRlp.Proto.RlpList
	(*RlpItem)(nil),          // 1: TW.EthereumRlp.Proto.RlpItem
	(*EncodingInput)(nil),    // 2: TW.EthereumRlp.Proto.EncodingInput
	(*EncodingOutput)(nil),   // 3: TW.EthereumRlp.Proto.EncodingOutput
	(common.SigningError)(0), // 4: TW.Common.Proto.SigningError
}
var file_EthereumRlp_proto_depIdxs = []int32{
	1, // 0: TW.EthereumRlp.Proto.RlpList.items:type_name -> TW.EthereumRlp.Proto.RlpItem
	0, // 1: TW.EthereumRlp.Proto.RlpItem.list:type_name -> TW.EthereumRlp.Proto.RlpList
	1, // 2: TW.EthereumRlp.Proto.EncodingInput.item:type_name -> TW.EthereumRlp.Proto.RlpItem
	4, // 3: TW.EthereumRlp.Proto.EncodingOutput.error:type_name -> TW.Common.Proto.SigningError
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_EthereumRlp_proto_init() }
func file_EthereumRlp_proto_init() {
	if File_EthereumRlp_proto != nil {
		return
	}
	file_EthereumRlp_proto_msgTypes[1].OneofWrappers = []any{
		(*RlpItem_StringItem)(nil),
		(*RlpItem_NumberU64)(nil),
		(*RlpItem_NumberU256)(nil),
		(*RlpItem_Address)(nil),
		(*RlpItem_Data)(nil),
		(*RlpItem_List)(nil),
		(*RlpItem_RawEncoded)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_EthereumRlp_proto_rawDesc), len(file_EthereumRlp_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_EthereumRlp_proto_goTypes,
		DependencyIndexes: file_EthereumRlp_proto_depIdxs,
		MessageInfos:      file_EthereumRlp_proto_msgTypes,
	}.Build()
	File_EthereumRlp_proto = out.File
	file_EthereumRlp_proto_goTypes = nil
	file_EthereumRlp_proto_depIdxs = nil
}
