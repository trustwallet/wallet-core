// SPDX-License-Identifier: Apache-2.0
//
// Copyright Â© 2017 Trust Wallet.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.20.3
// source: MultiversX.proto

package multiversx

import (
	common "github.com/Cramiumlabs/wallet-core/wrapper/go-wrapper/protos/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Generic action. Using one of the more specific actions (e.g. transfers, see below) is recommended.
type GenericAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Accounts involved
	Accounts *Accounts `protobuf:"bytes,1,opt,name=accounts,proto3" json:"accounts,omitempty"`
	// amount
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// additional data
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// transaction version
	Version uint32 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	// Generally speaking, the "options" field can be ignored (not set) by applications using TW Core.
	Options       uint32 `protobuf:"varint,5,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenericAction) Reset() {
	*x = GenericAction{}
	mi := &file_MultiversX_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenericAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericAction) ProtoMessage() {}

func (x *GenericAction) ProtoReflect() protoreflect.Message {
	mi := &file_MultiversX_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericAction.ProtoReflect.Descriptor instead.
func (*GenericAction) Descriptor() ([]byte, []int) {
	return file_MultiversX_proto_rawDescGZIP(), []int{0}
}

func (x *GenericAction) GetAccounts() *Accounts {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *GenericAction) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *GenericAction) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *GenericAction) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *GenericAction) GetOptions() uint32 {
	if x != nil {
		return x.Options
	}
	return 0
}

// EGLD transfer (move balance).
type EGLDTransfer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Accounts involved
	Accounts *Accounts `protobuf:"bytes,1,opt,name=accounts,proto3" json:"accounts,omitempty"`
	// Transfer amount (string)
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Data   string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// transaction version, if empty, the default value will be used
	Version       uint32 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EGLDTransfer) Reset() {
	*x = EGLDTransfer{}
	mi := &file_MultiversX_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EGLDTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EGLDTransfer) ProtoMessage() {}

func (x *EGLDTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_MultiversX_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EGLDTransfer.ProtoReflect.Descriptor instead.
func (*EGLDTransfer) Descriptor() ([]byte, []int) {
	return file_MultiversX_proto_rawDescGZIP(), []int{1}
}

func (x *EGLDTransfer) GetAccounts() *Accounts {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *EGLDTransfer) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *EGLDTransfer) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *EGLDTransfer) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// ESDT transfer (transfer regular ESDTs - fungible tokens).
type ESDTTransfer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Accounts involved
	Accounts *Accounts `protobuf:"bytes,1,opt,name=accounts,proto3" json:"accounts,omitempty"`
	// Token ID
	TokenIdentifier string `protobuf:"bytes,2,opt,name=token_identifier,json=tokenIdentifier,proto3" json:"token_identifier,omitempty"`
	// Transfer token amount (string)
	Amount string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// transaction version, if empty, the default value will be used
	Version       uint32 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ESDTTransfer) Reset() {
	*x = ESDTTransfer{}
	mi := &file_MultiversX_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ESDTTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESDTTransfer) ProtoMessage() {}

func (x *ESDTTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_MultiversX_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESDTTransfer.ProtoReflect.Descriptor instead.
func (*ESDTTransfer) Descriptor() ([]byte, []int) {
	return file_MultiversX_proto_rawDescGZIP(), []int{2}
}

func (x *ESDTTransfer) GetAccounts() *Accounts {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *ESDTTransfer) GetTokenIdentifier() string {
	if x != nil {
		return x.TokenIdentifier
	}
	return ""
}

func (x *ESDTTransfer) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ESDTTransfer) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// ESDTNFT transfer (transfer NFTs, SFTs and Meta ESDTs).
type ESDTNFTTransfer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Accounts involved
	Accounts *Accounts `protobuf:"bytes,1,opt,name=accounts,proto3" json:"accounts,omitempty"`
	// tokens
	TokenCollection string `protobuf:"bytes,2,opt,name=token_collection,json=tokenCollection,proto3" json:"token_collection,omitempty"`
	// nonce of the token
	TokenNonce uint64 `protobuf:"varint,3,opt,name=token_nonce,json=tokenNonce,proto3" json:"token_nonce,omitempty"`
	// transfer amount
	Amount string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// transaction version, if empty, the default value will be used
	Version       uint32 `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ESDTNFTTransfer) Reset() {
	*x = ESDTNFTTransfer{}
	mi := &file_MultiversX_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ESDTNFTTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESDTNFTTransfer) ProtoMessage() {}

func (x *ESDTNFTTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_MultiversX_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESDTNFTTransfer.ProtoReflect.Descriptor instead.
func (*ESDTNFTTransfer) Descriptor() ([]byte, []int) {
	return file_MultiversX_proto_rawDescGZIP(), []int{3}
}

func (x *ESDTNFTTransfer) GetAccounts() *Accounts {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *ESDTNFTTransfer) GetTokenCollection() string {
	if x != nil {
		return x.TokenCollection
	}
	return ""
}

func (x *ESDTNFTTransfer) GetTokenNonce() uint64 {
	if x != nil {
		return x.TokenNonce
	}
	return 0
}

func (x *ESDTNFTTransfer) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ESDTNFTTransfer) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// Transaction sender & receiver etc.
type Accounts struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Nonce of the sender
	SenderNonce uint64 `protobuf:"varint,1,opt,name=sender_nonce,json=senderNonce,proto3" json:"sender_nonce,omitempty"`
	// Sender address
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// Sender username
	SenderUsername string `protobuf:"bytes,3,opt,name=sender_username,json=senderUsername,proto3" json:"sender_username,omitempty"`
	// Receiver address
	Receiver string `protobuf:"bytes,4,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// Receiver username
	ReceiverUsername string `protobuf:"bytes,5,opt,name=receiver_username,json=receiverUsername,proto3" json:"receiver_username,omitempty"`
	// Guardian address
	Guardian string `protobuf:"bytes,6,opt,name=guardian,proto3" json:"guardian,omitempty"`
	// Relayer address
	Relayer       string `protobuf:"bytes,7,opt,name=relayer,proto3" json:"relayer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Accounts) Reset() {
	*x = Accounts{}
	mi := &file_MultiversX_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Accounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Accounts) ProtoMessage() {}

func (x *Accounts) ProtoReflect() protoreflect.Message {
	mi := &file_MultiversX_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Accounts.ProtoReflect.Descriptor instead.
func (*Accounts) Descriptor() ([]byte, []int) {
	return file_MultiversX_proto_rawDescGZIP(), []int{4}
}

func (x *Accounts) GetSenderNonce() uint64 {
	if x != nil {
		return x.SenderNonce
	}
	return 0
}

func (x *Accounts) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *Accounts) GetSenderUsername() string {
	if x != nil {
		return x.SenderUsername
	}
	return ""
}

func (x *Accounts) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

func (x *Accounts) GetReceiverUsername() string {
	if x != nil {
		return x.ReceiverUsername
	}
	return ""
}

func (x *Accounts) GetGuardian() string {
	if x != nil {
		return x.Guardian
	}
	return ""
}

func (x *Accounts) GetRelayer() string {
	if x != nil {
		return x.Relayer
	}
	return ""
}

// Input data necessary to create a signed transaction.
type SigningInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The secret private key used for signing (32 bytes).
	PrivateKey []byte `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// Chain identifier, string
	ChainId string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Gas price
	GasPrice uint64 `protobuf:"varint,3,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	// Limit for the gas used
	GasLimit uint64 `protobuf:"varint,4,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	// transfer payload
	//
	// Types that are valid to be assigned to MessageOneof:
	//
	//	*SigningInput_GenericAction
	//	*SigningInput_EgldTransfer
	//	*SigningInput_EsdtTransfer
	//	*SigningInput_EsdtnftTransfer
	MessageOneof  isSigningInput_MessageOneof `protobuf_oneof:"message_oneof"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningInput) Reset() {
	*x = SigningInput{}
	mi := &file_MultiversX_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningInput) ProtoMessage() {}

func (x *SigningInput) ProtoReflect() protoreflect.Message {
	mi := &file_MultiversX_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningInput.ProtoReflect.Descriptor instead.
func (*SigningInput) Descriptor() ([]byte, []int) {
	return file_MultiversX_proto_rawDescGZIP(), []int{5}
}

func (x *SigningInput) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *SigningInput) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *SigningInput) GetGasPrice() uint64 {
	if x != nil {
		return x.GasPrice
	}
	return 0
}

func (x *SigningInput) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *SigningInput) GetMessageOneof() isSigningInput_MessageOneof {
	if x != nil {
		return x.MessageOneof
	}
	return nil
}

func (x *SigningInput) GetGenericAction() *GenericAction {
	if x != nil {
		if x, ok := x.MessageOneof.(*SigningInput_GenericAction); ok {
			return x.GenericAction
		}
	}
	return nil
}

func (x *SigningInput) GetEgldTransfer() *EGLDTransfer {
	if x != nil {
		if x, ok := x.MessageOneof.(*SigningInput_EgldTransfer); ok {
			return x.EgldTransfer
		}
	}
	return nil
}

func (x *SigningInput) GetEsdtTransfer() *ESDTTransfer {
	if x != nil {
		if x, ok := x.MessageOneof.(*SigningInput_EsdtTransfer); ok {
			return x.EsdtTransfer
		}
	}
	return nil
}

func (x *SigningInput) GetEsdtnftTransfer() *ESDTNFTTransfer {
	if x != nil {
		if x, ok := x.MessageOneof.(*SigningInput_EsdtnftTransfer); ok {
			return x.EsdtnftTransfer
		}
	}
	return nil
}

type isSigningInput_MessageOneof interface {
	isSigningInput_MessageOneof()
}

type SigningInput_GenericAction struct {
	GenericAction *GenericAction `protobuf:"bytes,5,opt,name=generic_action,json=genericAction,proto3,oneof"`
}

type SigningInput_EgldTransfer struct {
	EgldTransfer *EGLDTransfer `protobuf:"bytes,6,opt,name=egld_transfer,json=egldTransfer,proto3,oneof"`
}

type SigningInput_EsdtTransfer struct {
	EsdtTransfer *ESDTTransfer `protobuf:"bytes,7,opt,name=esdt_transfer,json=esdtTransfer,proto3,oneof"`
}

type SigningInput_EsdtnftTransfer struct {
	EsdtnftTransfer *ESDTNFTTransfer `protobuf:"bytes,8,opt,name=esdtnft_transfer,json=esdtnftTransfer,proto3,oneof"`
}

func (*SigningInput_GenericAction) isSigningInput_MessageOneof() {}

func (*SigningInput_EgldTransfer) isSigningInput_MessageOneof() {}

func (*SigningInput_EsdtTransfer) isSigningInput_MessageOneof() {}

func (*SigningInput_EsdtnftTransfer) isSigningInput_MessageOneof() {}

// Result containing the signed and encoded transaction.
type SigningOutput struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Encoded   string                 `protobuf:"bytes,1,opt,name=encoded,proto3" json:"encoded,omitempty"`
	Signature string                 `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// error code, 0 is ok, other codes will be treated as errors
	Error common.SigningError `protobuf:"varint,3,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// error code description
	ErrorMessage  string `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningOutput) Reset() {
	*x = SigningOutput{}
	mi := &file_MultiversX_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningOutput) ProtoMessage() {}

func (x *SigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_MultiversX_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningOutput.ProtoReflect.Descriptor instead.
func (*SigningOutput) Descriptor() ([]byte, []int) {
	return file_MultiversX_proto_rawDescGZIP(), []int{6}
}

func (x *SigningOutput) GetEncoded() string {
	if x != nil {
		return x.Encoded
	}
	return ""
}

func (x *SigningOutput) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *SigningOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *SigningOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_MultiversX_proto protoreflect.FileDescriptor

const file_MultiversX_proto_rawDesc = "" +
	"\n" +
	"\x10MultiversX.proto\x12\x13TW.MultiversX.Proto\x1a\fCommon.proto\"\xa8\x01\n" +
	"\rGenericAction\x129\n" +
	"\baccounts\x18\x01 \x01(\v2\x1d.TW.MultiversX.Proto.AccountsR\baccounts\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\x12\x12\n" +
	"\x04data\x18\x03 \x01(\tR\x04data\x12\x18\n" +
	"\aversion\x18\x04 \x01(\rR\aversion\x12\x18\n" +
	"\aoptions\x18\x05 \x01(\rR\aoptions\"\x8f\x01\n" +
	"\fEGLDTransfer\x129\n" +
	"\baccounts\x18\x01 \x01(\v2\x1d.TW.MultiversX.Proto.AccountsR\baccounts\x12\x16\n" +
	"\x06amount\x18\x02 \x01(\tR\x06amount\x12\x12\n" +
	"\x04data\x18\x03 \x01(\tR\x04data\x12\x18\n" +
	"\aversion\x18\x04 \x01(\rR\aversion\"\xa6\x01\n" +
	"\fESDTTransfer\x129\n" +
	"\baccounts\x18\x01 \x01(\v2\x1d.TW.MultiversX.Proto.AccountsR\baccounts\x12)\n" +
	"\x10token_identifier\x18\x02 \x01(\tR\x0ftokenIdentifier\x12\x16\n" +
	"\x06amount\x18\x03 \x01(\tR\x06amount\x12\x18\n" +
	"\aversion\x18\x04 \x01(\rR\aversion\"\xca\x01\n" +
	"\x0fESDTNFTTransfer\x129\n" +
	"\baccounts\x18\x01 \x01(\v2\x1d.TW.MultiversX.Proto.AccountsR\baccounts\x12)\n" +
	"\x10token_collection\x18\x02 \x01(\tR\x0ftokenCollection\x12\x1f\n" +
	"\vtoken_nonce\x18\x03 \x01(\x04R\n" +
	"tokenNonce\x12\x16\n" +
	"\x06amount\x18\x04 \x01(\tR\x06amount\x12\x18\n" +
	"\aversion\x18\x05 \x01(\rR\aversion\"\xed\x01\n" +
	"\bAccounts\x12!\n" +
	"\fsender_nonce\x18\x01 \x01(\x04R\vsenderNonce\x12\x16\n" +
	"\x06sender\x18\x02 \x01(\tR\x06sender\x12'\n" +
	"\x0fsender_username\x18\x03 \x01(\tR\x0esenderUsername\x12\x1a\n" +
	"\breceiver\x18\x04 \x01(\tR\breceiver\x12+\n" +
	"\x11receiver_username\x18\x05 \x01(\tR\x10receiverUsername\x12\x1a\n" +
	"\bguardian\x18\x06 \x01(\tR\bguardian\x12\x18\n" +
	"\arelayer\x18\a \x01(\tR\arelayer\"\xc9\x03\n" +
	"\fSigningInput\x12\x1f\n" +
	"\vprivate_key\x18\x01 \x01(\fR\n" +
	"privateKey\x12\x19\n" +
	"\bchain_id\x18\x02 \x01(\tR\achainId\x12\x1b\n" +
	"\tgas_price\x18\x03 \x01(\x04R\bgasPrice\x12\x1b\n" +
	"\tgas_limit\x18\x04 \x01(\x04R\bgasLimit\x12K\n" +
	"\x0egeneric_action\x18\x05 \x01(\v2\".TW.MultiversX.Proto.GenericActionH\x00R\rgenericAction\x12H\n" +
	"\regld_transfer\x18\x06 \x01(\v2!.TW.MultiversX.Proto.EGLDTransferH\x00R\fegldTransfer\x12H\n" +
	"\resdt_transfer\x18\a \x01(\v2!.TW.MultiversX.Proto.ESDTTransferH\x00R\fesdtTransfer\x12Q\n" +
	"\x10esdtnft_transfer\x18\b \x01(\v2$.TW.MultiversX.Proto.ESDTNFTTransferH\x00R\x0fesdtnftTransferB\x0f\n" +
	"\rmessage_oneof\"\xa1\x01\n" +
	"\rSigningOutput\x12\x18\n" +
	"\aencoded\x18\x01 \x01(\tR\aencoded\x12\x1c\n" +
	"\tsignature\x18\x02 \x01(\tR\tsignature\x123\n" +
	"\x05error\x18\x03 \x01(\x0e2\x1d.TW.Common.Proto.SigningErrorR\x05error\x12#\n" +
	"\rerror_message\x18\x04 \x01(\tR\ferrorMessageB\x17\n" +
	"\x15wallet.core.jni.protob\x06proto3"

var (
	file_MultiversX_proto_rawDescOnce sync.Once
	file_MultiversX_proto_rawDescData []byte
)

func file_MultiversX_proto_rawDescGZIP() []byte {
	file_MultiversX_proto_rawDescOnce.Do(func() {
		file_MultiversX_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_MultiversX_proto_rawDesc), len(file_MultiversX_proto_rawDesc)))
	})
	return file_MultiversX_proto_rawDescData
}

var file_MultiversX_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_MultiversX_proto_goTypes = []any{
	(*GenericAction)(nil),    // 0: TW.MultiversX.Proto.GenericAction
	(*EGLDTransfer)(nil),     // 1: TW.MultiversX.Proto.EGLDTransfer
	(*ESDTTransfer)(nil),     // 2: TW.MultiversX.Proto.ESDTTransfer
	(*ESDTNFTTransfer)(nil),  // 3: TW.MultiversX.Proto.ESDTNFTTransfer
	(*Accounts)(nil),         // 4: TW.MultiversX.Proto.Accounts
	(*SigningInput)(nil),     // 5: TW.MultiversX.Proto.SigningInput
	(*SigningOutput)(nil),    // 6: TW.MultiversX.Proto.SigningOutput
	(common.SigningError)(0), // 7: TW.Common.Proto.SigningError
}
var file_MultiversX_proto_depIdxs = []int32{
	4, // 0: TW.MultiversX.Proto.GenericAction.accounts:type_name -> TW.MultiversX.Proto.Accounts
	4, // 1: TW.MultiversX.Proto.EGLDTransfer.accounts:type_name -> TW.MultiversX.Proto.Accounts
	4, // 2: TW.MultiversX.Proto.ESDTTransfer.accounts:type_name -> TW.MultiversX.Proto.Accounts
	4, // 3: TW.MultiversX.Proto.ESDTNFTTransfer.accounts:type_name -> TW.MultiversX.Proto.Accounts
	0, // 4: TW.MultiversX.Proto.SigningInput.generic_action:type_name -> TW.MultiversX.Proto.GenericAction
	1, // 5: TW.MultiversX.Proto.SigningInput.egld_transfer:type_name -> TW.MultiversX.Proto.EGLDTransfer
	2, // 6: TW.MultiversX.Proto.SigningInput.esdt_transfer:type_name -> TW.MultiversX.Proto.ESDTTransfer
	3, // 7: TW.MultiversX.Proto.SigningInput.esdtnft_transfer:type_name -> TW.MultiversX.Proto.ESDTNFTTransfer
	7, // 8: TW.MultiversX.Proto.SigningOutput.error:type_name -> TW.Common.Proto.SigningError
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_MultiversX_proto_init() }
func file_MultiversX_proto_init() {
	if File_MultiversX_proto != nil {
		return
	}
	file_MultiversX_proto_msgTypes[5].OneofWrappers = []any{
		(*SigningInput_GenericAction)(nil),
		(*SigningInput_EgldTransfer)(nil),
		(*SigningInput_EsdtTransfer)(nil),
		(*SigningInput_EsdtnftTransfer)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_MultiversX_proto_rawDesc), len(file_MultiversX_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_MultiversX_proto_goTypes,
		DependencyIndexes: file_MultiversX_proto_depIdxs,
		MessageInfos:      file_MultiversX_proto_msgTypes,
	}.Build()
	File_MultiversX_proto = out.File
	file_MultiversX_proto_goTypes = nil
	file_MultiversX_proto_depIdxs = nil
}
