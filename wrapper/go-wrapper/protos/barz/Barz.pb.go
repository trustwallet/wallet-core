// SPDX-License-Identifier: Apache-2.0
//
// Copyright Â© 2017 Trust Wallet.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.20.3
// source: Barz.proto

package barz

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// FacetCutAction represents the action to be performed for a FacetCut
type FacetCutAction int32

const (
	FacetCutAction_ADD     FacetCutAction = 0
	FacetCutAction_REPLACE FacetCutAction = 1
	FacetCutAction_REMOVE  FacetCutAction = 2
)

// Enum value maps for FacetCutAction.
var (
	FacetCutAction_name = map[int32]string{
		0: "ADD",
		1: "REPLACE",
		2: "REMOVE",
	}
	FacetCutAction_value = map[string]int32{
		"ADD":     0,
		"REPLACE": 1,
		"REMOVE":  2,
	}
)

func (x FacetCutAction) Enum() *FacetCutAction {
	p := new(FacetCutAction)
	*p = x
	return p
}

func (x FacetCutAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FacetCutAction) Descriptor() protoreflect.EnumDescriptor {
	return file_Barz_proto_enumTypes[0].Descriptor()
}

func (FacetCutAction) Type() protoreflect.EnumType {
	return &file_Barz_proto_enumTypes[0]
}

func (x FacetCutAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FacetCutAction.Descriptor instead.
func (FacetCutAction) EnumDescriptor() ([]byte, []int) {
	return file_Barz_proto_rawDescGZIP(), []int{0}
}

// Input parameters for calculating a counterfactual address for ERC-4337 based smart contract wallet
type ContractAddressInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ERC-4337 entry point
	EntryPoint string `protobuf:"bytes,1,opt,name=entry_point,json=entryPoint,proto3" json:"entry_point,omitempty"`
	// Address of the contract factory
	Factory string `protobuf:"bytes,2,opt,name=factory,proto3" json:"factory,omitempty"`
	// Diamond proxy facets required for the contract setup
	AccountFacet      string `protobuf:"bytes,3,opt,name=account_facet,json=accountFacet,proto3" json:"account_facet,omitempty"`
	VerificationFacet string `protobuf:"bytes,4,opt,name=verification_facet,json=verificationFacet,proto3" json:"verification_facet,omitempty"`
	FacetRegistry     string `protobuf:"bytes,5,opt,name=facet_registry,json=facetRegistry,proto3" json:"facet_registry,omitempty"`
	DefaultFallback   string `protobuf:"bytes,6,opt,name=default_fallback,json=defaultFallback,proto3" json:"default_fallback,omitempty"`
	// Bytecode of the smart contract to deploy
	Bytecode string `protobuf:"bytes,7,opt,name=bytecode,proto3" json:"bytecode,omitempty"`
	// PublicKey of the wallet
	PublicKey string `protobuf:"bytes,8,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// Salt is used to derive multiple account from the same public key
	Salt          uint32 `protobuf:"varint,9,opt,name=salt,proto3" json:"salt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractAddressInput) Reset() {
	*x = ContractAddressInput{}
	mi := &file_Barz_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractAddressInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractAddressInput) ProtoMessage() {}

func (x *ContractAddressInput) ProtoReflect() protoreflect.Message {
	mi := &file_Barz_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractAddressInput.ProtoReflect.Descriptor instead.
func (*ContractAddressInput) Descriptor() ([]byte, []int) {
	return file_Barz_proto_rawDescGZIP(), []int{0}
}

func (x *ContractAddressInput) GetEntryPoint() string {
	if x != nil {
		return x.EntryPoint
	}
	return ""
}

func (x *ContractAddressInput) GetFactory() string {
	if x != nil {
		return x.Factory
	}
	return ""
}

func (x *ContractAddressInput) GetAccountFacet() string {
	if x != nil {
		return x.AccountFacet
	}
	return ""
}

func (x *ContractAddressInput) GetVerificationFacet() string {
	if x != nil {
		return x.VerificationFacet
	}
	return ""
}

func (x *ContractAddressInput) GetFacetRegistry() string {
	if x != nil {
		return x.FacetRegistry
	}
	return ""
}

func (x *ContractAddressInput) GetDefaultFallback() string {
	if x != nil {
		return x.DefaultFallback
	}
	return ""
}

func (x *ContractAddressInput) GetBytecode() string {
	if x != nil {
		return x.Bytecode
	}
	return ""
}

func (x *ContractAddressInput) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *ContractAddressInput) GetSalt() uint32 {
	if x != nil {
		return x.Salt
	}
	return 0
}

// FacetCut represents a single operation to be performed on a facet
type FacetCut struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	FacetAddress      string                 `protobuf:"bytes,1,opt,name=facet_address,json=facetAddress,proto3" json:"facet_address,omitempty"`                // The address of the facet
	Action            FacetCutAction         `protobuf:"varint,2,opt,name=action,proto3,enum=TW.Barz.Proto.FacetCutAction" json:"action,omitempty"`             // The action to perform
	FunctionSelectors [][]byte               `protobuf:"bytes,3,rep,name=function_selectors,json=functionSelectors,proto3" json:"function_selectors,omitempty"` // List of function selectors, each is bytes4
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *FacetCut) Reset() {
	*x = FacetCut{}
	mi := &file_Barz_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FacetCut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacetCut) ProtoMessage() {}

func (x *FacetCut) ProtoReflect() protoreflect.Message {
	mi := &file_Barz_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacetCut.ProtoReflect.Descriptor instead.
func (*FacetCut) Descriptor() ([]byte, []int) {
	return file_Barz_proto_rawDescGZIP(), []int{1}
}

func (x *FacetCut) GetFacetAddress() string {
	if x != nil {
		return x.FacetAddress
	}
	return ""
}

func (x *FacetCut) GetAction() FacetCutAction {
	if x != nil {
		return x.Action
	}
	return FacetCutAction_ADD
}

func (x *FacetCut) GetFunctionSelectors() [][]byte {
	if x != nil {
		return x.FunctionSelectors
	}
	return nil
}

// DiamondCutInput represents the input parameters for a diamondCut operation
type DiamondCutInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FacetCuts     []*FacetCut            `protobuf:"bytes,1,rep,name=facet_cuts,json=facetCuts,proto3" json:"facet_cuts,omitempty"`       // List of facet cuts to apply
	InitAddress   string                 `protobuf:"bytes,2,opt,name=init_address,json=initAddress,proto3" json:"init_address,omitempty"` // Address to call with `init` data after applying cuts
	InitData      []byte                 `protobuf:"bytes,3,opt,name=init_data,json=initData,proto3" json:"init_data,omitempty"`          // Data to pass to `init` function call
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiamondCutInput) Reset() {
	*x = DiamondCutInput{}
	mi := &file_Barz_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiamondCutInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiamondCutInput) ProtoMessage() {}

func (x *DiamondCutInput) ProtoReflect() protoreflect.Message {
	mi := &file_Barz_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiamondCutInput.ProtoReflect.Descriptor instead.
func (*DiamondCutInput) Descriptor() ([]byte, []int) {
	return file_Barz_proto_rawDescGZIP(), []int{2}
}

func (x *DiamondCutInput) GetFacetCuts() []*FacetCut {
	if x != nil {
		return x.FacetCuts
	}
	return nil
}

func (x *DiamondCutInput) GetInitAddress() string {
	if x != nil {
		return x.InitAddress
	}
	return ""
}

func (x *DiamondCutInput) GetInitData() []byte {
	if x != nil {
		return x.InitData
	}
	return nil
}

var File_Barz_proto protoreflect.FileDescriptor

const file_Barz_proto_rawDesc = "" +
	"\n" +
	"\n" +
	"Barz.proto\x12\rTW.Barz.Proto\"\xc6\x02\n" +
	"\x14ContractAddressInput\x12\x1f\n" +
	"\ventry_point\x18\x01 \x01(\tR\n" +
	"entryPoint\x12\x18\n" +
	"\afactory\x18\x02 \x01(\tR\afactory\x12#\n" +
	"\raccount_facet\x18\x03 \x01(\tR\faccountFacet\x12-\n" +
	"\x12verification_facet\x18\x04 \x01(\tR\x11verificationFacet\x12%\n" +
	"\x0efacet_registry\x18\x05 \x01(\tR\rfacetRegistry\x12)\n" +
	"\x10default_fallback\x18\x06 \x01(\tR\x0fdefaultFallback\x12\x1a\n" +
	"\bbytecode\x18\a \x01(\tR\bbytecode\x12\x1d\n" +
	"\n" +
	"public_key\x18\b \x01(\tR\tpublicKey\x12\x12\n" +
	"\x04salt\x18\t \x01(\rR\x04salt\"\x95\x01\n" +
	"\bFacetCut\x12#\n" +
	"\rfacet_address\x18\x01 \x01(\tR\ffacetAddress\x125\n" +
	"\x06action\x18\x02 \x01(\x0e2\x1d.TW.Barz.Proto.FacetCutActionR\x06action\x12-\n" +
	"\x12function_selectors\x18\x03 \x03(\fR\x11functionSelectors\"\x89\x01\n" +
	"\x0fDiamondCutInput\x126\n" +
	"\n" +
	"facet_cuts\x18\x01 \x03(\v2\x17.TW.Barz.Proto.FacetCutR\tfacetCuts\x12!\n" +
	"\finit_address\x18\x02 \x01(\tR\vinitAddress\x12\x1b\n" +
	"\tinit_data\x18\x03 \x01(\fR\binitData*2\n" +
	"\x0eFacetCutAction\x12\a\n" +
	"\x03ADD\x10\x00\x12\v\n" +
	"\aREPLACE\x10\x01\x12\n" +
	"\n" +
	"\x06REMOVE\x10\x02B\x17\n" +
	"\x15wallet.core.jni.protob\x06proto3"

var (
	file_Barz_proto_rawDescOnce sync.Once
	file_Barz_proto_rawDescData []byte
)

func file_Barz_proto_rawDescGZIP() []byte {
	file_Barz_proto_rawDescOnce.Do(func() {
		file_Barz_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_Barz_proto_rawDesc), len(file_Barz_proto_rawDesc)))
	})
	return file_Barz_proto_rawDescData
}

var file_Barz_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_Barz_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_Barz_proto_goTypes = []any{
	(FacetCutAction)(0),          // 0: TW.Barz.Proto.FacetCutAction
	(*ContractAddressInput)(nil), // 1: TW.Barz.Proto.ContractAddressInput
	(*FacetCut)(nil),             // 2: TW.Barz.Proto.FacetCut
	(*DiamondCutInput)(nil),      // 3: TW.Barz.Proto.DiamondCutInput
}
var file_Barz_proto_depIdxs = []int32{
	0, // 0: TW.Barz.Proto.FacetCut.action:type_name -> TW.Barz.Proto.FacetCutAction
	2, // 1: TW.Barz.Proto.DiamondCutInput.facet_cuts:type_name -> TW.Barz.Proto.FacetCut
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_Barz_proto_init() }
func file_Barz_proto_init() {
	if File_Barz_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_Barz_proto_rawDesc), len(file_Barz_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Barz_proto_goTypes,
		DependencyIndexes: file_Barz_proto_depIdxs,
		EnumInfos:         file_Barz_proto_enumTypes,
		MessageInfos:      file_Barz_proto_msgTypes,
	}.Build()
	File_Barz_proto = out.File
	file_Barz_proto_goTypes = nil
	file_Barz_proto_depIdxs = nil
}
