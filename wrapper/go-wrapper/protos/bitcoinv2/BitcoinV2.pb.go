// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.20.3
// source: BitcoinV2.proto

package bitcoinv2

import (
	babylonstaking "github.com/Cramiumlabs/wallet-core/wrapper/go-wrapper/protos/babylonstaking"
	common "github.com/Cramiumlabs/wallet-core/wrapper/go-wrapper/protos/common"
	decredv2 "github.com/Cramiumlabs/wallet-core/wrapper/go-wrapper/protos/decredv2"
	utxo "github.com/Cramiumlabs/wallet-core/wrapper/go-wrapper/protos/utxo"
	zcash "github.com/Cramiumlabs/wallet-core/wrapper/go-wrapper/protos/zcash"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InputSelector int32

const (
	// Automatically select enough inputs in an ascending order to cover the outputs of the transaction.
	InputSelector_SelectAscending InputSelector = 0
	// Automatically select enough inputs in the given order to cover the outputs of the transaction.
	InputSelector_SelectInOrder InputSelector = 1
	// Automatically select enough inputs in an descending order to cover the outputs of the transaction.
	InputSelector_SelectDescending InputSelector = 2
	// Use all the inputs provided in the given order.
	InputSelector_UseAll InputSelector = 10
)

// Enum value maps for InputSelector.
var (
	InputSelector_name = map[int32]string{
		0:  "SelectAscending",
		1:  "SelectInOrder",
		2:  "SelectDescending",
		10: "UseAll",
	}
	InputSelector_value = map[string]int32{
		"SelectAscending":  0,
		"SelectInOrder":    1,
		"SelectDescending": 2,
		"UseAll":           10,
	}
)

func (x InputSelector) Enum() *InputSelector {
	p := new(InputSelector)
	*p = x
	return p
}

func (x InputSelector) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InputSelector) Descriptor() protoreflect.EnumDescriptor {
	return file_BitcoinV2_proto_enumTypes[0].Descriptor()
}

func (InputSelector) Type() protoreflect.EnumType {
	return &file_BitcoinV2_proto_enumTypes[0]
}

func (x InputSelector) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InputSelector.Descriptor instead.
func (InputSelector) EnumDescriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{0}
}

type TransactionVersion int32

const (
	// V1 is used by default.
	TransactionVersion_UseDefault TransactionVersion = 0
	// Original transaction version.
	TransactionVersion_V1 TransactionVersion = 1
	// https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki#specification
	TransactionVersion_V2 TransactionVersion = 2
)

// Enum value maps for TransactionVersion.
var (
	TransactionVersion_name = map[int32]string{
		0: "UseDefault",
		1: "V1",
		2: "V2",
	}
	TransactionVersion_value = map[string]int32{
		"UseDefault": 0,
		"V1":         1,
		"V2":         2,
	}
)

func (x TransactionVersion) Enum() *TransactionVersion {
	p := new(TransactionVersion)
	*p = x
	return p
}

func (x TransactionVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_BitcoinV2_proto_enumTypes[1].Descriptor()
}

func (TransactionVersion) Type() protoreflect.EnumType {
	return &file_BitcoinV2_proto_enumTypes[1]
}

func (x TransactionVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionVersion.Descriptor instead.
func (TransactionVersion) EnumDescriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{1}
}

type PreSigningOutput_SigningMethod int32

const (
	// Used for P2SH and P2PKH - standard ecdsa secp256k1 signing
	PreSigningOutput_Legacy PreSigningOutput_SigningMethod = 0
	// Used for P2WSH and P2WPKH - standard ecdsa secp256k1 signing
	PreSigningOutput_Segwit PreSigningOutput_SigningMethod = 1
	// Used for P2TR key-path and P2TR script-pay - schnorr signing
	PreSigningOutput_Taproot PreSigningOutput_SigningMethod = 2
)

// Enum value maps for PreSigningOutput_SigningMethod.
var (
	PreSigningOutput_SigningMethod_name = map[int32]string{
		0: "Legacy",
		1: "Segwit",
		2: "Taproot",
	}
	PreSigningOutput_SigningMethod_value = map[string]int32{
		"Legacy":  0,
		"Segwit":  1,
		"Taproot": 2,
	}
)

func (x PreSigningOutput_SigningMethod) Enum() *PreSigningOutput_SigningMethod {
	p := new(PreSigningOutput_SigningMethod)
	*p = x
	return p
}

func (x PreSigningOutput_SigningMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PreSigningOutput_SigningMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_BitcoinV2_proto_enumTypes[2].Descriptor()
}

func (PreSigningOutput_SigningMethod) Type() protoreflect.EnumType {
	return &file_BitcoinV2_proto_enumTypes[2]
}

func (x PreSigningOutput_SigningMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PreSigningOutput_SigningMethod.Descriptor instead.
func (PreSigningOutput_SigningMethod) EnumDescriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{9, 0}
}

// Either a public key or public key hash.
type PublicKeyOrHash struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Variant:
	//
	//	*PublicKeyOrHash_Pubkey
	//	*PublicKeyOrHash_Hash
	Variant       isPublicKeyOrHash_Variant `protobuf_oneof:"variant"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublicKeyOrHash) Reset() {
	*x = PublicKeyOrHash{}
	mi := &file_BitcoinV2_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublicKeyOrHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKeyOrHash) ProtoMessage() {}

func (x *PublicKeyOrHash) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKeyOrHash.ProtoReflect.Descriptor instead.
func (*PublicKeyOrHash) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{0}
}

func (x *PublicKeyOrHash) GetVariant() isPublicKeyOrHash_Variant {
	if x != nil {
		return x.Variant
	}
	return nil
}

func (x *PublicKeyOrHash) GetPubkey() []byte {
	if x != nil {
		if x, ok := x.Variant.(*PublicKeyOrHash_Pubkey); ok {
			return x.Pubkey
		}
	}
	return nil
}

func (x *PublicKeyOrHash) GetHash() []byte {
	if x != nil {
		if x, ok := x.Variant.(*PublicKeyOrHash_Hash); ok {
			return x.Hash
		}
	}
	return nil
}

type isPublicKeyOrHash_Variant interface {
	isPublicKeyOrHash_Variant()
}

type PublicKeyOrHash_Pubkey struct {
	// Public key bytes.
	Pubkey []byte `protobuf:"bytes,1,opt,name=pubkey,proto3,oneof"`
}

type PublicKeyOrHash_Hash struct {
	// Public key hash.
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3,oneof"`
}

func (*PublicKeyOrHash_Pubkey) isPublicKeyOrHash_Variant() {}

func (*PublicKeyOrHash_Hash) isPublicKeyOrHash_Variant() {}

// Public key and corresponding signature.
type PublicKeySignature struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Public key bytes. Type of the public key depends on the context.
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// Signature 64-length byte array.
	Signature     []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublicKeySignature) Reset() {
	*x = PublicKeySignature{}
	mi := &file_BitcoinV2_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublicKeySignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKeySignature) ProtoMessage() {}

func (x *PublicKeySignature) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKeySignature.ProtoReflect.Descriptor instead.
func (*PublicKeySignature) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{1}
}

func (x *PublicKeySignature) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *PublicKeySignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type Input struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Reference to the previous transaction's output.
	OutPoint *utxo.OutPoint `protobuf:"bytes,1,opt,name=out_point,json=outPoint,proto3" json:"out_point,omitempty"`
	// The amount of satoshis of this input.
	Value int64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	// The sighash type, normally `All`.
	// See `TWBitcoinSigHashType` enum.
	SighashType uint32 `protobuf:"varint,3,opt,name=sighash_type,json=sighashType,proto3" json:"sighash_type,omitempty"`
	// Optional sequence number, used for timelocks, replace-by-fee, etc.
	// Leave empty to use a default 4294967295 (0xFFFFFFFF) value.
	Sequence *Input_Sequence `protobuf:"bytes,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Script for claiming this UTXO.
	//
	// Types that are valid to be assigned to ClaimingScript:
	//
	//	*Input_ScriptBuilder
	//	*Input_ScriptData
	//	*Input_ReceiverAddress
	ClaimingScript isInput_ClaimingScript `protobuf_oneof:"claiming_script"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Input) Reset() {
	*x = Input{}
	mi := &file_BitcoinV2_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Input) ProtoMessage() {}

func (x *Input) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Input.ProtoReflect.Descriptor instead.
func (*Input) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{2}
}

func (x *Input) GetOutPoint() *utxo.OutPoint {
	if x != nil {
		return x.OutPoint
	}
	return nil
}

func (x *Input) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Input) GetSighashType() uint32 {
	if x != nil {
		return x.SighashType
	}
	return 0
}

func (x *Input) GetSequence() *Input_Sequence {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *Input) GetClaimingScript() isInput_ClaimingScript {
	if x != nil {
		return x.ClaimingScript
	}
	return nil
}

func (x *Input) GetScriptBuilder() *Input_InputBuilder {
	if x != nil {
		if x, ok := x.ClaimingScript.(*Input_ScriptBuilder); ok {
			return x.ScriptBuilder
		}
	}
	return nil
}

func (x *Input) GetScriptData() []byte {
	if x != nil {
		if x, ok := x.ClaimingScript.(*Input_ScriptData); ok {
			return x.ScriptData
		}
	}
	return nil
}

func (x *Input) GetReceiverAddress() string {
	if x != nil {
		if x, ok := x.ClaimingScript.(*Input_ReceiverAddress); ok {
			return x.ReceiverAddress
		}
	}
	return ""
}

type isInput_ClaimingScript interface {
	isInput_ClaimingScript()
}

type Input_ScriptBuilder struct {
	// Construct claiming script with a builder pattern.
	ScriptBuilder *Input_InputBuilder `protobuf:"bytes,5,opt,name=script_builder,json=scriptBuilder,proto3,oneof"`
}

type Input_ScriptData struct {
	// Spending script pubkey data.
	// Use this variant if the UTXO claiming script is known already, otherwise use `InputBuilder`.
	// Please note that the signing method (eg "legacy" or "segwit") will be determined by parsing the script data as:
	// - P2PK, P2PKH - legacy signing method;
	// - P2WPKH - segwit signing method.
	ScriptData []byte `protobuf:"bytes,6,opt,name=script_data,json=scriptData,proto3,oneof"`
}

type Input_ReceiverAddress struct {
	// Derive a spending script pubkey from a receiver address.
	// E.g "bc1" segwit address will be P2WPKH claiming script.
	// TODO consider deprecating this because we can't determine if the script pubkey is P2PK or P2PKH actually.
	ReceiverAddress string `protobuf:"bytes,7,opt,name=receiver_address,json=receiverAddress,proto3,oneof"`
}

func (*Input_ScriptBuilder) isInput_ClaimingScript() {}

func (*Input_ScriptData) isInput_ClaimingScript() {}

func (*Input_ReceiverAddress) isInput_ClaimingScript() {}

type Output struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The amount of satoshis to send.
	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// Types that are valid to be assigned to ToRecipient:
	//
	//	*Output_Builder
	//	*Output_CustomScriptPubkey
	//	*Output_ToAddress
	ToRecipient   isOutput_ToRecipient `protobuf_oneof:"to_recipient"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Output) Reset() {
	*x = Output{}
	mi := &file_BitcoinV2_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output) ProtoMessage() {}

func (x *Output) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output.ProtoReflect.Descriptor instead.
func (*Output) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{3}
}

func (x *Output) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Output) GetToRecipient() isOutput_ToRecipient {
	if x != nil {
		return x.ToRecipient
	}
	return nil
}

func (x *Output) GetBuilder() *Output_OutputBuilder {
	if x != nil {
		if x, ok := x.ToRecipient.(*Output_Builder); ok {
			return x.Builder
		}
	}
	return nil
}

func (x *Output) GetCustomScriptPubkey() []byte {
	if x != nil {
		if x, ok := x.ToRecipient.(*Output_CustomScriptPubkey); ok {
			return x.CustomScriptPubkey
		}
	}
	return nil
}

func (x *Output) GetToAddress() string {
	if x != nil {
		if x, ok := x.ToRecipient.(*Output_ToAddress); ok {
			return x.ToAddress
		}
	}
	return ""
}

type isOutput_ToRecipient interface {
	isOutput_ToRecipient()
}

type Output_Builder struct {
	// Construct output with builder pattern.
	Builder *Output_OutputBuilder `protobuf:"bytes,2,opt,name=builder,proto3,oneof"`
}

type Output_CustomScriptPubkey struct {
	// Construct output by providing the scriptPubkey directly.
	CustomScriptPubkey []byte `protobuf:"bytes,3,opt,name=custom_script_pubkey,json=customScriptPubkey,proto3,oneof"`
}

type Output_ToAddress struct {
	// Derive the expected output from the provided address.
	ToAddress string `protobuf:"bytes,4,opt,name=to_address,json=toAddress,proto3,oneof"`
}

func (*Output_Builder) isOutput_ToRecipient() {}

func (*Output_CustomScriptPubkey) isOutput_ToRecipient() {}

func (*Output_ToAddress) isOutput_ToRecipient() {}

type ChainInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// P2PKH prefix for this chain.
	P2PkhPrefix uint32 `protobuf:"varint,1,opt,name=p2pkh_prefix,json=p2pkhPrefix,proto3" json:"p2pkh_prefix,omitempty"`
	// P2SH prefix for this coin type.
	P2ShPrefix uint32 `protobuf:"varint,2,opt,name=p2sh_prefix,json=p2shPrefix,proto3" json:"p2sh_prefix,omitempty"`
	// HRP for this coin type if applicable.
	Hrp           string `protobuf:"bytes,3,opt,name=hrp,proto3" json:"hrp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChainInfo) Reset() {
	*x = ChainInfo{}
	mi := &file_BitcoinV2_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChainInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainInfo) ProtoMessage() {}

func (x *ChainInfo) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainInfo.ProtoReflect.Descriptor instead.
func (*ChainInfo) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{4}
}

func (x *ChainInfo) GetP2PkhPrefix() uint32 {
	if x != nil {
		return x.P2PkhPrefix
	}
	return 0
}

func (x *ChainInfo) GetP2ShPrefix() uint32 {
	if x != nil {
		return x.P2ShPrefix
	}
	return 0
}

func (x *ChainInfo) GetHrp() string {
	if x != nil {
		return x.Hrp
	}
	return ""
}

// Transaction builder used in `SigningInput`.
type TransactionBuilder struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Transaction version.
	Version TransactionVersion `protobuf:"varint,1,opt,name=version,proto3,enum=TW.BitcoinV2.Proto.TransactionVersion" json:"version,omitempty"`
	// (optional) Block height or timestamp indicating at what point transactions can be included in a block.
	// Zero by default.
	LockTime uint32 `protobuf:"varint,2,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
	// The inputs to spend.
	Inputs []*Input `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// The output of the transaction. Note that the change output is specified
	// in the `change_output` field.
	Outputs []*Output `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// How the inputs should be selected.
	InputSelector InputSelector `protobuf:"varint,5,opt,name=input_selector,json=inputSelector,proto3,enum=TW.BitcoinV2.Proto.InputSelector" json:"input_selector,omitempty"`
	// The amount of satoshis per vbyte ("satVb"), used for fee calculation.
	// Can be satoshis per byte ("satB") **ONLY** when transaction does not contain segwit UTXOs.
	FeePerVb int64 `protobuf:"varint,6,opt,name=fee_per_vb,json=feePerVb,proto3" json:"fee_per_vb,omitempty"`
	// (optional) The change output to be added (return to sender) at the end of the outputs list.
	// The `Output.value` will be overwritten, leave default.
	// Note there can be no change output if the change amount is less than dust threshold.
	// Leave empty to explicitly disable change output creation.
	ChangeOutput *Output `protobuf:"bytes,7,opt,name=change_output,json=changeOutput,proto3" json:"change_output,omitempty"`
	// The only output with a max available amount to be send.
	// If set, `SigningInput.outputs` and `SigningInput.change` will be ignored.
	// The `Output.value` will be overwritten, leave default.
	MaxAmountOutput *Output `protobuf:"bytes,8,opt,name=max_amount_output,json=maxAmountOutput,proto3" json:"max_amount_output,omitempty"`
	// One of the "Dust" amount policies.
	// Later, we plan to add support for `DynamicDust` policy with a `min_relay_fee` amount.
	//
	// Types that are valid to be assigned to DustPolicy:
	//
	//	*TransactionBuilder_FixedDustThreshold
	DustPolicy isTransactionBuilder_DustPolicy `protobuf_oneof:"dust_policy"`
	// Types that are valid to be assigned to ChainSpecific:
	//
	//	*TransactionBuilder_ZcashExtraData
	ChainSpecific isTransactionBuilder_ChainSpecific `protobuf_oneof:"chain_specific"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionBuilder) Reset() {
	*x = TransactionBuilder{}
	mi := &file_BitcoinV2_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionBuilder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionBuilder) ProtoMessage() {}

func (x *TransactionBuilder) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionBuilder.ProtoReflect.Descriptor instead.
func (*TransactionBuilder) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{5}
}

func (x *TransactionBuilder) GetVersion() TransactionVersion {
	if x != nil {
		return x.Version
	}
	return TransactionVersion_UseDefault
}

func (x *TransactionBuilder) GetLockTime() uint32 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

func (x *TransactionBuilder) GetInputs() []*Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *TransactionBuilder) GetOutputs() []*Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *TransactionBuilder) GetInputSelector() InputSelector {
	if x != nil {
		return x.InputSelector
	}
	return InputSelector_SelectAscending
}

func (x *TransactionBuilder) GetFeePerVb() int64 {
	if x != nil {
		return x.FeePerVb
	}
	return 0
}

func (x *TransactionBuilder) GetChangeOutput() *Output {
	if x != nil {
		return x.ChangeOutput
	}
	return nil
}

func (x *TransactionBuilder) GetMaxAmountOutput() *Output {
	if x != nil {
		return x.MaxAmountOutput
	}
	return nil
}

func (x *TransactionBuilder) GetDustPolicy() isTransactionBuilder_DustPolicy {
	if x != nil {
		return x.DustPolicy
	}
	return nil
}

func (x *TransactionBuilder) GetFixedDustThreshold() int64 {
	if x != nil {
		if x, ok := x.DustPolicy.(*TransactionBuilder_FixedDustThreshold); ok {
			return x.FixedDustThreshold
		}
	}
	return 0
}

func (x *TransactionBuilder) GetChainSpecific() isTransactionBuilder_ChainSpecific {
	if x != nil {
		return x.ChainSpecific
	}
	return nil
}

func (x *TransactionBuilder) GetZcashExtraData() *zcash.TransactionBuilderExtraData {
	if x != nil {
		if x, ok := x.ChainSpecific.(*TransactionBuilder_ZcashExtraData); ok {
			return x.ZcashExtraData
		}
	}
	return nil
}

type isTransactionBuilder_DustPolicy interface {
	isTransactionBuilder_DustPolicy()
}

type TransactionBuilder_FixedDustThreshold struct {
	// Use a constant "Dust" threshold.
	FixedDustThreshold int64 `protobuf:"varint,10,opt,name=fixed_dust_threshold,json=fixedDustThreshold,proto3,oneof"`
}

func (*TransactionBuilder_FixedDustThreshold) isTransactionBuilder_DustPolicy() {}

type isTransactionBuilder_ChainSpecific interface {
	isTransactionBuilder_ChainSpecific()
}

type TransactionBuilder_ZcashExtraData struct {
	// ZCash specific transaction data.
	ZcashExtraData *zcash.TransactionBuilderExtraData `protobuf:"bytes,20,opt,name=zcash_extra_data,json=zcashExtraData,proto3,oneof"`
}

func (*TransactionBuilder_ZcashExtraData) isTransactionBuilder_ChainSpecific() {}

// Partially Signed Bitcoin Transaction.
type Psbt struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Partially Signed Bitcoin Transaction binary encoded.
	Psbt          []byte `protobuf:"bytes,1,opt,name=psbt,proto3" json:"psbt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Psbt) Reset() {
	*x = Psbt{}
	mi := &file_BitcoinV2_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Psbt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Psbt) ProtoMessage() {}

func (x *Psbt) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Psbt.ProtoReflect.Descriptor instead.
func (*Psbt) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{6}
}

func (x *Psbt) GetPsbt() []byte {
	if x != nil {
		return x.Psbt
	}
	return nil
}

type SigningInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// User private keys.
	// Only required if the `sign` method is called.
	PrivateKeys [][]byte `protobuf:"bytes,1,rep,name=private_keys,json=privateKeys,proto3" json:"private_keys,omitempty"`
	// User public keys.
	// Only required if the `plan`, `preImageHash` methods are called.
	PublicKeys [][]byte `protobuf:"bytes,2,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty"`
	// Chain info includes p2pkh, p2sh address prefixes.
	// The parameter needs to be set if an input/output has a receiver address pattern.
	ChainInfo *ChainInfo `protobuf:"bytes,3,opt,name=chain_info,json=chainInfo,proto3" json:"chain_info,omitempty"`
	// Whether disable auxiliary random data when signing.
	// Use for testing **ONLY**.
	DangerousUseFixedSchnorrRng bool `protobuf:"varint,4,opt,name=dangerous_use_fixed_schnorr_rng,json=dangerousUseFixedSchnorrRng,proto3" json:"dangerous_use_fixed_schnorr_rng,omitempty"`
	// The transaction signing type.
	//
	// Types that are valid to be assigned to Transaction:
	//
	//	*SigningInput_Builder
	//	*SigningInput_Psbt
	Transaction   isSigningInput_Transaction `protobuf_oneof:"transaction"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningInput) Reset() {
	*x = SigningInput{}
	mi := &file_BitcoinV2_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningInput) ProtoMessage() {}

func (x *SigningInput) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningInput.ProtoReflect.Descriptor instead.
func (*SigningInput) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{7}
}

func (x *SigningInput) GetPrivateKeys() [][]byte {
	if x != nil {
		return x.PrivateKeys
	}
	return nil
}

func (x *SigningInput) GetPublicKeys() [][]byte {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

func (x *SigningInput) GetChainInfo() *ChainInfo {
	if x != nil {
		return x.ChainInfo
	}
	return nil
}

func (x *SigningInput) GetDangerousUseFixedSchnorrRng() bool {
	if x != nil {
		return x.DangerousUseFixedSchnorrRng
	}
	return false
}

func (x *SigningInput) GetTransaction() isSigningInput_Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *SigningInput) GetBuilder() *TransactionBuilder {
	if x != nil {
		if x, ok := x.Transaction.(*SigningInput_Builder); ok {
			return x.Builder
		}
	}
	return nil
}

func (x *SigningInput) GetPsbt() *Psbt {
	if x != nil {
		if x, ok := x.Transaction.(*SigningInput_Psbt); ok {
			return x.Psbt
		}
	}
	return nil
}

type isSigningInput_Transaction interface {
	isSigningInput_Transaction()
}

type SigningInput_Builder struct {
	// Build a transaction to be signed.
	Builder *TransactionBuilder `protobuf:"bytes,10,opt,name=builder,proto3,oneof"`
}

type SigningInput_Psbt struct {
	// Finalize a Partially Signed Bitcoin Transaction by signing the rest of UTXOs.
	Psbt *Psbt `protobuf:"bytes,11,opt,name=psbt,proto3,oneof"`
}

func (*SigningInput_Builder) isSigningInput_Transaction() {}

func (*SigningInput_Psbt) isSigningInput_Transaction() {}

type TransactionPlan struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A possible error, `OK` if none.
	Error common.SigningError `protobuf:"varint,1,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// Error description.
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// Selected unspent transaction outputs (subset of all input UTXOs).
	Inputs []*Input `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Transaction outputs including a change output if applied.
	Outputs []*Output `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// Maximum available amount in all the transaction input UTXOs.
	// That is an amount that will be spent by this transaction.
	AvailableAmount int64 `protobuf:"varint,5,opt,name=available_amount,json=availableAmount,proto3" json:"available_amount,omitempty"`
	// Total sending amount in all the transaction outputs.
	// That is an amount that will be sent (including change output if applied).
	SendAmount int64 `protobuf:"varint,6,opt,name=send_amount,json=sendAmount,proto3" json:"send_amount,omitempty"`
	// The estimated `vsize` in `vbytes`.
	// It is used to compare how much blockweight needs to be allocated to confirm a transaction.
	// For non-segwit transactions, `vsize` = `size`.
	VsizeEstimate uint64 `protobuf:"varint,7,opt,name=vsize_estimate,json=vsizeEstimate,proto3" json:"vsize_estimate,omitempty"`
	// The estimated fees of the transaction in satoshis.
	FeeEstimate int64 `protobuf:"varint,8,opt,name=fee_estimate,json=feeEstimate,proto3" json:"fee_estimate,omitempty"`
	// Remaining change.
	// Zero if not applied.
	Change        int64 `protobuf:"varint,9,opt,name=change,proto3" json:"change,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionPlan) Reset() {
	*x = TransactionPlan{}
	mi := &file_BitcoinV2_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionPlan) ProtoMessage() {}

func (x *TransactionPlan) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionPlan.ProtoReflect.Descriptor instead.
func (*TransactionPlan) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{8}
}

func (x *TransactionPlan) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *TransactionPlan) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *TransactionPlan) GetInputs() []*Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *TransactionPlan) GetOutputs() []*Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *TransactionPlan) GetAvailableAmount() int64 {
	if x != nil {
		return x.AvailableAmount
	}
	return 0
}

func (x *TransactionPlan) GetSendAmount() int64 {
	if x != nil {
		return x.SendAmount
	}
	return 0
}

func (x *TransactionPlan) GetVsizeEstimate() uint64 {
	if x != nil {
		return x.VsizeEstimate
	}
	return 0
}

func (x *TransactionPlan) GetFeeEstimate() int64 {
	if x != nil {
		return x.FeeEstimate
	}
	return 0
}

func (x *TransactionPlan) GetChange() int64 {
	if x != nil {
		return x.Change
	}
	return 0
}

type PreSigningOutput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A possible error, `OK` if none.
	Error common.SigningError `protobuf:"varint,1,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// Error description.
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// The sighashes to be signed; ECDSA for legacy and Segwit, Schnorr for Taproot.
	Sighashes     []*PreSigningOutput_Sighash `protobuf:"bytes,4,rep,name=sighashes,proto3" json:"sighashes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PreSigningOutput) Reset() {
	*x = PreSigningOutput{}
	mi := &file_BitcoinV2_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreSigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreSigningOutput) ProtoMessage() {}

func (x *PreSigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreSigningOutput.ProtoReflect.Descriptor instead.
func (*PreSigningOutput) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{9}
}

func (x *PreSigningOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *PreSigningOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *PreSigningOutput) GetSighashes() []*PreSigningOutput_Sighash {
	if x != nil {
		return x.Sighashes
	}
	return nil
}

type SigningOutput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A possible error, `OK` if none.
	Error common.SigningError `protobuf:"varint,1,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// Error description.
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// The encoded transaction that can be submitted to the network.
	Encoded []byte `protobuf:"bytes,4,opt,name=encoded,proto3" json:"encoded,omitempty"`
	// The transaction ID (hash).
	Txid []byte `protobuf:"bytes,5,opt,name=txid,proto3" json:"txid,omitempty"`
	// The total `vsize` in `vbytes`.
	// It is used to compare how much blockweight needs to be allocated to confirm a transaction.
	// For non-segwit transactions, `vsize` = `size`.
	Vsize uint64 `protobuf:"varint,6,opt,name=vsize,proto3" json:"vsize,omitempty"`
	// Transaction weight is defined as Base transaction size * 3 + Total transaction size
	// (ie. the same method as calculating Block weight from Base size and Total size).
	Weight uint64 `protobuf:"varint,7,opt,name=weight,proto3" json:"weight,omitempty"`
	// The total and final fee of the transaction in satoshis.
	Fee int64 `protobuf:"varint,8,opt,name=fee,proto3" json:"fee,omitempty"`
	// Optional. Signed transaction serialized as PSBT.
	// Set if `SigningInput.psbt` is used.
	Psbt *Psbt `protobuf:"bytes,9,opt,name=psbt,proto3" json:"psbt,omitempty"`
	// Resulting transaction.
	//
	// Types that are valid to be assigned to Transaction:
	//
	//	*SigningOutput_Bitcoin
	//	*SigningOutput_Zcash
	//	*SigningOutput_Decred
	Transaction   isSigningOutput_Transaction `protobuf_oneof:"transaction"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningOutput) Reset() {
	*x = SigningOutput{}
	mi := &file_BitcoinV2_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningOutput) ProtoMessage() {}

func (x *SigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningOutput.ProtoReflect.Descriptor instead.
func (*SigningOutput) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{10}
}

func (x *SigningOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *SigningOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *SigningOutput) GetEncoded() []byte {
	if x != nil {
		return x.Encoded
	}
	return nil
}

func (x *SigningOutput) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *SigningOutput) GetVsize() uint64 {
	if x != nil {
		return x.Vsize
	}
	return 0
}

func (x *SigningOutput) GetWeight() uint64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *SigningOutput) GetFee() int64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *SigningOutput) GetPsbt() *Psbt {
	if x != nil {
		return x.Psbt
	}
	return nil
}

func (x *SigningOutput) GetTransaction() isSigningOutput_Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *SigningOutput) GetBitcoin() *utxo.Transaction {
	if x != nil {
		if x, ok := x.Transaction.(*SigningOutput_Bitcoin); ok {
			return x.Bitcoin
		}
	}
	return nil
}

func (x *SigningOutput) GetZcash() *zcash.Transaction {
	if x != nil {
		if x, ok := x.Transaction.(*SigningOutput_Zcash); ok {
			return x.Zcash
		}
	}
	return nil
}

func (x *SigningOutput) GetDecred() *decredv2.Transaction {
	if x != nil {
		if x, ok := x.Transaction.(*SigningOutput_Decred); ok {
			return x.Decred
		}
	}
	return nil
}

type isSigningOutput_Transaction interface {
	isSigningOutput_Transaction()
}

type SigningOutput_Bitcoin struct {
	// Standard Bitcoin transaction.
	Bitcoin *utxo.Transaction `protobuf:"bytes,15,opt,name=bitcoin,proto3,oneof"`
}

type SigningOutput_Zcash struct {
	// ZCash transaction.
	Zcash *zcash.Transaction `protobuf:"bytes,16,opt,name=zcash,proto3,oneof"`
}

type SigningOutput_Decred struct {
	// Decred transaction.
	Decred *decredv2.Transaction `protobuf:"bytes,17,opt,name=decred,proto3,oneof"`
}

func (*SigningOutput_Bitcoin) isSigningOutput_Transaction() {}

func (*SigningOutput_Zcash) isSigningOutput_Transaction() {}

func (*SigningOutput_Decred) isSigningOutput_Transaction() {}

// Optional sequence number, used for timelocks, replace-by-fee, etc.
type Input_Sequence struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sequence      uint32                 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Input_Sequence) Reset() {
	*x = Input_Sequence{}
	mi := &file_BitcoinV2_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Input_Sequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Input_Sequence) ProtoMessage() {}

func (x *Input_Sequence) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Input_Sequence.ProtoReflect.Descriptor instead.
func (*Input_Sequence) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Input_Sequence) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

type Input_InputBuilder struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Variant:
	//
	//	*Input_InputBuilder_P2Pk
	//	*Input_InputBuilder_P2Pkh
	//	*Input_InputBuilder_P2Wpkh
	//	*Input_InputBuilder_P2TrKeyPath
	//	*Input_InputBuilder_Brc20Inscribe
	//	*Input_InputBuilder_BabylonStakingTimelockPath
	//	*Input_InputBuilder_BabylonStakingUnbondingPath
	//	*Input_InputBuilder_BabylonStakingSlashingPath
	//	*Input_InputBuilder_BabylonUnbondingTimelockPath
	//	*Input_InputBuilder_BabylonUnbondingSlashingPath
	Variant       isInput_InputBuilder_Variant `protobuf_oneof:"variant"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Input_InputBuilder) Reset() {
	*x = Input_InputBuilder{}
	mi := &file_BitcoinV2_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Input_InputBuilder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Input_InputBuilder) ProtoMessage() {}

func (x *Input_InputBuilder) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Input_InputBuilder.ProtoReflect.Descriptor instead.
func (*Input_InputBuilder) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Input_InputBuilder) GetVariant() isInput_InputBuilder_Variant {
	if x != nil {
		return x.Variant
	}
	return nil
}

func (x *Input_InputBuilder) GetP2Pk() []byte {
	if x != nil {
		if x, ok := x.Variant.(*Input_InputBuilder_P2Pk); ok {
			return x.P2Pk
		}
	}
	return nil
}

func (x *Input_InputBuilder) GetP2Pkh() *PublicKeyOrHash {
	if x != nil {
		if x, ok := x.Variant.(*Input_InputBuilder_P2Pkh); ok {
			return x.P2Pkh
		}
	}
	return nil
}

func (x *Input_InputBuilder) GetP2Wpkh() *PublicKeyOrHash {
	if x != nil {
		if x, ok := x.Variant.(*Input_InputBuilder_P2Wpkh); ok {
			return x.P2Wpkh
		}
	}
	return nil
}

func (x *Input_InputBuilder) GetP2TrKeyPath() []byte {
	if x != nil {
		if x, ok := x.Variant.(*Input_InputBuilder_P2TrKeyPath); ok {
			return x.P2TrKeyPath
		}
	}
	return nil
}

func (x *Input_InputBuilder) GetBrc20Inscribe() *Input_InputBrc20Inscription {
	if x != nil {
		if x, ok := x.Variant.(*Input_InputBuilder_Brc20Inscribe); ok {
			return x.Brc20Inscribe
		}
	}
	return nil
}

func (x *Input_InputBuilder) GetBabylonStakingTimelockPath() *babylonstaking.InputBuilder_StakingTimelockPath {
	if x != nil {
		if x, ok := x.Variant.(*Input_InputBuilder_BabylonStakingTimelockPath); ok {
			return x.BabylonStakingTimelockPath
		}
	}
	return nil
}

func (x *Input_InputBuilder) GetBabylonStakingUnbondingPath() *babylonstaking.InputBuilder_StakingUnbondingPath {
	if x != nil {
		if x, ok := x.Variant.(*Input_InputBuilder_BabylonStakingUnbondingPath); ok {
			return x.BabylonStakingUnbondingPath
		}
	}
	return nil
}

func (x *Input_InputBuilder) GetBabylonStakingSlashingPath() *babylonstaking.InputBuilder_StakingSlashingPath {
	if x != nil {
		if x, ok := x.Variant.(*Input_InputBuilder_BabylonStakingSlashingPath); ok {
			return x.BabylonStakingSlashingPath
		}
	}
	return nil
}

func (x *Input_InputBuilder) GetBabylonUnbondingTimelockPath() *babylonstaking.InputBuilder_UnbondingTimelockPath {
	if x != nil {
		if x, ok := x.Variant.(*Input_InputBuilder_BabylonUnbondingTimelockPath); ok {
			return x.BabylonUnbondingTimelockPath
		}
	}
	return nil
}

func (x *Input_InputBuilder) GetBabylonUnbondingSlashingPath() *babylonstaking.InputBuilder_UnbondingSlashingPath {
	if x != nil {
		if x, ok := x.Variant.(*Input_InputBuilder_BabylonUnbondingSlashingPath); ok {
			return x.BabylonUnbondingSlashingPath
		}
	}
	return nil
}

type isInput_InputBuilder_Variant interface {
	isInput_InputBuilder_Variant()
}

type Input_InputBuilder_P2Pk struct {
	// Pay-to-Public-Key, specify the public key.
	P2Pk []byte `protobuf:"bytes,2,opt,name=p2pk,proto3,oneof"`
}

type Input_InputBuilder_P2Pkh struct {
	// Pay-to-Public-Key-Hash, specify the public key.
	P2Pkh *PublicKeyOrHash `protobuf:"bytes,3,opt,name=p2pkh,proto3,oneof"`
}

type Input_InputBuilder_P2Wpkh struct {
	// Pay-to-Public-Key-Hash, specify the public key.
	P2Wpkh *PublicKeyOrHash `protobuf:"bytes,5,opt,name=p2wpkh,proto3,oneof"`
}

type Input_InputBuilder_P2TrKeyPath struct {
	// Pay-to-Taproot-key-path (balance transfers), specify the public key.
	P2TrKeyPath []byte `protobuf:"bytes,7,opt,name=p2tr_key_path,json=p2trKeyPath,proto3,oneof"`
}

type Input_InputBuilder_Brc20Inscribe struct {
	// Create a BRC20 inscription.
	Brc20Inscribe *Input_InputBrc20Inscription `protobuf:"bytes,9,opt,name=brc20_inscribe,json=brc20Inscribe,proto3,oneof"`
}

type Input_InputBuilder_BabylonStakingTimelockPath struct {
	// Spend a Staking Output via timelock path (staking time expired).
	// In other words, create a Withdraw transaction.
	BabylonStakingTimelockPath *babylonstaking.InputBuilder_StakingTimelockPath `protobuf:"bytes,15,opt,name=babylon_staking_timelock_path,json=babylonStakingTimelockPath,proto3,oneof"`
}

type Input_InputBuilder_BabylonStakingUnbondingPath struct {
	// Spend a Staking Output via unbonding path.
	// In other words, create an Unbonding transaction.
	BabylonStakingUnbondingPath *babylonstaking.InputBuilder_StakingUnbondingPath `protobuf:"bytes,16,opt,name=babylon_staking_unbonding_path,json=babylonStakingUnbondingPath,proto3,oneof"`
}

type Input_InputBuilder_BabylonStakingSlashingPath struct {
	// Spend a Staking Output via slashing path.
	// In other words, generate an unsigned slashing transaction, pre-sign the staker's signature only and share to Babylon PoS chain.
	BabylonStakingSlashingPath *babylonstaking.InputBuilder_StakingSlashingPath `protobuf:"bytes,17,opt,name=babylon_staking_slashing_path,json=babylonStakingSlashingPath,proto3,oneof"`
}

type Input_InputBuilder_BabylonUnbondingTimelockPath struct {
	// Spend an Unbonding Output via timelock path (unbonding time expired).
	// In other words, create a Withdraw transaction spending an Unbonding transaction.
	BabylonUnbondingTimelockPath *babylonstaking.InputBuilder_UnbondingTimelockPath `protobuf:"bytes,18,opt,name=babylon_unbonding_timelock_path,json=babylonUnbondingTimelockPath,proto3,oneof"`
}

type Input_InputBuilder_BabylonUnbondingSlashingPath struct {
	// Spend an Unbonding Output via slashing path.
	// In other words, generate an unsigned Slashing transaction, pre-sign the staker's signature only and share to Babylon PoS chain.
	BabylonUnbondingSlashingPath *babylonstaking.InputBuilder_UnbondingSlashingPath `protobuf:"bytes,19,opt,name=babylon_unbonding_slashing_path,json=babylonUnbondingSlashingPath,proto3,oneof"`
}

func (*Input_InputBuilder_P2Pk) isInput_InputBuilder_Variant() {}

func (*Input_InputBuilder_P2Pkh) isInput_InputBuilder_Variant() {}

func (*Input_InputBuilder_P2Wpkh) isInput_InputBuilder_Variant() {}

func (*Input_InputBuilder_P2TrKeyPath) isInput_InputBuilder_Variant() {}

func (*Input_InputBuilder_Brc20Inscribe) isInput_InputBuilder_Variant() {}

func (*Input_InputBuilder_BabylonStakingTimelockPath) isInput_InputBuilder_Variant() {}

func (*Input_InputBuilder_BabylonStakingUnbondingPath) isInput_InputBuilder_Variant() {}

func (*Input_InputBuilder_BabylonStakingSlashingPath) isInput_InputBuilder_Variant() {}

func (*Input_InputBuilder_BabylonUnbondingTimelockPath) isInput_InputBuilder_Variant() {}

func (*Input_InputBuilder_BabylonUnbondingSlashingPath) isInput_InputBuilder_Variant() {}

type Input_InputTaprootScriptPath struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The payload of the Taproot transaction.
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	// The control block of the Taproot transaction required for claiming.
	ControlBlock  []byte `protobuf:"bytes,3,opt,name=control_block,json=controlBlock,proto3" json:"control_block,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Input_InputTaprootScriptPath) Reset() {
	*x = Input_InputTaprootScriptPath{}
	mi := &file_BitcoinV2_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Input_InputTaprootScriptPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Input_InputTaprootScriptPath) ProtoMessage() {}

func (x *Input_InputTaprootScriptPath) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Input_InputTaprootScriptPath.ProtoReflect.Descriptor instead.
func (*Input_InputTaprootScriptPath) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{2, 2}
}

func (x *Input_InputTaprootScriptPath) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Input_InputTaprootScriptPath) GetControlBlock() []byte {
	if x != nil {
		return x.ControlBlock
	}
	return nil
}

type Input_InputBrc20Inscription struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The recipient of the inscription, usually the sender.
	InscribeTo []byte `protobuf:"bytes,2,opt,name=inscribe_to,json=inscribeTo,proto3" json:"inscribe_to,omitempty"`
	// The ticker of the BRC20 inscription.
	Ticker string `protobuf:"bytes,3,opt,name=ticker,proto3" json:"ticker,omitempty"`
	// The BRC20 token transfer amount.
	TransferAmount string `protobuf:"bytes,4,opt,name=transfer_amount,json=transferAmount,proto3" json:"transfer_amount,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Input_InputBrc20Inscription) Reset() {
	*x = Input_InputBrc20Inscription{}
	mi := &file_BitcoinV2_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Input_InputBrc20Inscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Input_InputBrc20Inscription) ProtoMessage() {}

func (x *Input_InputBrc20Inscription) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Input_InputBrc20Inscription.ProtoReflect.Descriptor instead.
func (*Input_InputBrc20Inscription) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{2, 3}
}

func (x *Input_InputBrc20Inscription) GetInscribeTo() []byte {
	if x != nil {
		return x.InscribeTo
	}
	return nil
}

func (x *Input_InputBrc20Inscription) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *Input_InputBrc20Inscription) GetTransferAmount() string {
	if x != nil {
		return x.TransferAmount
	}
	return ""
}

type Output_OutputBuilder struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Variant:
	//
	//	*Output_OutputBuilder_P2Sh
	//	*Output_OutputBuilder_P2Pk
	//	*Output_OutputBuilder_P2Pkh
	//	*Output_OutputBuilder_P2Wsh
	//	*Output_OutputBuilder_P2Wpkh
	//	*Output_OutputBuilder_P2TrKeyPath
	//	*Output_OutputBuilder_P2TrScriptPath
	//	*Output_OutputBuilder_P2TrDangerousAssumeTweaked
	//	*Output_OutputBuilder_Brc20Inscribe
	//	*Output_OutputBuilder_OpReturn
	//	*Output_OutputBuilder_BabylonStaking
	//	*Output_OutputBuilder_BabylonUnbonding
	//	*Output_OutputBuilder_BabylonStakingOpReturn
	Variant       isOutput_OutputBuilder_Variant `protobuf_oneof:"variant"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Output_OutputBuilder) Reset() {
	*x = Output_OutputBuilder{}
	mi := &file_BitcoinV2_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Output_OutputBuilder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output_OutputBuilder) ProtoMessage() {}

func (x *Output_OutputBuilder) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output_OutputBuilder.ProtoReflect.Descriptor instead.
func (*Output_OutputBuilder) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Output_OutputBuilder) GetVariant() isOutput_OutputBuilder_Variant {
	if x != nil {
		return x.Variant
	}
	return nil
}

func (x *Output_OutputBuilder) GetP2Sh() *Output_RedeemScriptOrHash {
	if x != nil {
		if x, ok := x.Variant.(*Output_OutputBuilder_P2Sh); ok {
			return x.P2Sh
		}
	}
	return nil
}

func (x *Output_OutputBuilder) GetP2Pk() []byte {
	if x != nil {
		if x, ok := x.Variant.(*Output_OutputBuilder_P2Pk); ok {
			return x.P2Pk
		}
	}
	return nil
}

func (x *Output_OutputBuilder) GetP2Pkh() *PublicKeyOrHash {
	if x != nil {
		if x, ok := x.Variant.(*Output_OutputBuilder_P2Pkh); ok {
			return x.P2Pkh
		}
	}
	return nil
}

func (x *Output_OutputBuilder) GetP2Wsh() *Output_RedeemScriptOrHash {
	if x != nil {
		if x, ok := x.Variant.(*Output_OutputBuilder_P2Wsh); ok {
			return x.P2Wsh
		}
	}
	return nil
}

func (x *Output_OutputBuilder) GetP2Wpkh() *PublicKeyOrHash {
	if x != nil {
		if x, ok := x.Variant.(*Output_OutputBuilder_P2Wpkh); ok {
			return x.P2Wpkh
		}
	}
	return nil
}

func (x *Output_OutputBuilder) GetP2TrKeyPath() []byte {
	if x != nil {
		if x, ok := x.Variant.(*Output_OutputBuilder_P2TrKeyPath); ok {
			return x.P2TrKeyPath
		}
	}
	return nil
}

func (x *Output_OutputBuilder) GetP2TrScriptPath() *Output_OutputTaprootScriptPath {
	if x != nil {
		if x, ok := x.Variant.(*Output_OutputBuilder_P2TrScriptPath); ok {
			return x.P2TrScriptPath
		}
	}
	return nil
}

func (x *Output_OutputBuilder) GetP2TrDangerousAssumeTweaked() []byte {
	if x != nil {
		if x, ok := x.Variant.(*Output_OutputBuilder_P2TrDangerousAssumeTweaked); ok {
			return x.P2TrDangerousAssumeTweaked
		}
	}
	return nil
}

func (x *Output_OutputBuilder) GetBrc20Inscribe() *Output_OutputBrc20Inscription {
	if x != nil {
		if x, ok := x.Variant.(*Output_OutputBuilder_Brc20Inscribe); ok {
			return x.Brc20Inscribe
		}
	}
	return nil
}

func (x *Output_OutputBuilder) GetOpReturn() []byte {
	if x != nil {
		if x, ok := x.Variant.(*Output_OutputBuilder_OpReturn); ok {
			return x.OpReturn
		}
	}
	return nil
}

func (x *Output_OutputBuilder) GetBabylonStaking() *babylonstaking.OutputBuilder_StakingOutput {
	if x != nil {
		if x, ok := x.Variant.(*Output_OutputBuilder_BabylonStaking); ok {
			return x.BabylonStaking
		}
	}
	return nil
}

func (x *Output_OutputBuilder) GetBabylonUnbonding() *babylonstaking.OutputBuilder_UnbondingOutput {
	if x != nil {
		if x, ok := x.Variant.(*Output_OutputBuilder_BabylonUnbonding); ok {
			return x.BabylonUnbonding
		}
	}
	return nil
}

func (x *Output_OutputBuilder) GetBabylonStakingOpReturn() *babylonstaking.OutputBuilder_OpReturn {
	if x != nil {
		if x, ok := x.Variant.(*Output_OutputBuilder_BabylonStakingOpReturn); ok {
			return x.BabylonStakingOpReturn
		}
	}
	return nil
}

type isOutput_OutputBuilder_Variant interface {
	isOutput_OutputBuilder_Variant()
}

type Output_OutputBuilder_P2Sh struct {
	// Pay-to-Script-Hash, specify the redeem script or its hash.
	P2Sh *Output_RedeemScriptOrHash `protobuf:"bytes,1,opt,name=p2sh,proto3,oneof"`
}

type Output_OutputBuilder_P2Pk struct {
	// Pay-to-Public-Key, specify the public key.
	P2Pk []byte `protobuf:"bytes,2,opt,name=p2pk,proto3,oneof"`
}

type Output_OutputBuilder_P2Pkh struct {
	// Pay-to-Public-Key-Hash, specify the public key or its hash.
	P2Pkh *PublicKeyOrHash `protobuf:"bytes,3,opt,name=p2pkh,proto3,oneof"`
}

type Output_OutputBuilder_P2Wsh struct {
	// Pay-to-Witness-Script-Hash, specify the redeem script or its hash.
	P2Wsh *Output_RedeemScriptOrHash `protobuf:"bytes,4,opt,name=p2wsh,proto3,oneof"`
}

type Output_OutputBuilder_P2Wpkh struct {
	// Pay-to-Public-Key-Hash, specify the public key or its hash.
	P2Wpkh *PublicKeyOrHash `protobuf:"bytes,5,opt,name=p2wpkh,proto3,oneof"`
}

type Output_OutputBuilder_P2TrKeyPath struct {
	// Pay-to-Taproot-key-path (balance transfers), specify the public key.
	P2TrKeyPath []byte `protobuf:"bytes,6,opt,name=p2tr_key_path,json=p2trKeyPath,proto3,oneof"`
}

type Output_OutputBuilder_P2TrScriptPath struct {
	// Pay-to-Taproot-script-path (complex transfers)
	P2TrScriptPath *Output_OutputTaprootScriptPath `protobuf:"bytes,7,opt,name=p2tr_script_path,json=p2trScriptPath,proto3,oneof"`
}

type Output_OutputBuilder_P2TrDangerousAssumeTweaked struct {
	P2TrDangerousAssumeTweaked []byte `protobuf:"bytes,8,opt,name=p2tr_dangerous_assume_tweaked,json=p2trDangerousAssumeTweaked,proto3,oneof"`
}

type Output_OutputBuilder_Brc20Inscribe struct {
	Brc20Inscribe *Output_OutputBrc20Inscription `protobuf:"bytes,9,opt,name=brc20_inscribe,json=brc20Inscribe,proto3,oneof"`
}

type Output_OutputBuilder_OpReturn struct {
	// OP_RETURN output. In most cases, with a zero-amount.
	OpReturn []byte `protobuf:"bytes,12,opt,name=op_return,json=opReturn,proto3,oneof"`
}

type Output_OutputBuilder_BabylonStaking struct {
	// Create a Babylon `Staking` output.
	BabylonStaking *babylonstaking.OutputBuilder_StakingOutput `protobuf:"bytes,15,opt,name=babylon_staking,json=babylonStaking,proto3,oneof"`
}

type Output_OutputBuilder_BabylonUnbonding struct {
	// Create a Babylon `Unbonding` output.
	BabylonUnbonding *babylonstaking.OutputBuilder_UnbondingOutput `protobuf:"bytes,16,opt,name=babylon_unbonding,json=babylonUnbonding,proto3,oneof"`
}

type Output_OutputBuilder_BabylonStakingOpReturn struct {
	// Create a Babylon `Staking` OP_RETURN output.
	BabylonStakingOpReturn *babylonstaking.OutputBuilder_OpReturn `protobuf:"bytes,17,opt,name=babylon_staking_op_return,json=babylonStakingOpReturn,proto3,oneof"`
}

func (*Output_OutputBuilder_P2Sh) isOutput_OutputBuilder_Variant() {}

func (*Output_OutputBuilder_P2Pk) isOutput_OutputBuilder_Variant() {}

func (*Output_OutputBuilder_P2Pkh) isOutput_OutputBuilder_Variant() {}

func (*Output_OutputBuilder_P2Wsh) isOutput_OutputBuilder_Variant() {}

func (*Output_OutputBuilder_P2Wpkh) isOutput_OutputBuilder_Variant() {}

func (*Output_OutputBuilder_P2TrKeyPath) isOutput_OutputBuilder_Variant() {}

func (*Output_OutputBuilder_P2TrScriptPath) isOutput_OutputBuilder_Variant() {}

func (*Output_OutputBuilder_P2TrDangerousAssumeTweaked) isOutput_OutputBuilder_Variant() {}

func (*Output_OutputBuilder_Brc20Inscribe) isOutput_OutputBuilder_Variant() {}

func (*Output_OutputBuilder_OpReturn) isOutput_OutputBuilder_Variant() {}

func (*Output_OutputBuilder_BabylonStaking) isOutput_OutputBuilder_Variant() {}

func (*Output_OutputBuilder_BabylonUnbonding) isOutput_OutputBuilder_Variant() {}

func (*Output_OutputBuilder_BabylonStakingOpReturn) isOutput_OutputBuilder_Variant() {}

// Either a redeem script or its hash.
type Output_RedeemScriptOrHash struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Variant:
	//
	//	*Output_RedeemScriptOrHash_RedeemScript
	//	*Output_RedeemScriptOrHash_Hash
	Variant       isOutput_RedeemScriptOrHash_Variant `protobuf_oneof:"variant"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Output_RedeemScriptOrHash) Reset() {
	*x = Output_RedeemScriptOrHash{}
	mi := &file_BitcoinV2_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Output_RedeemScriptOrHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output_RedeemScriptOrHash) ProtoMessage() {}

func (x *Output_RedeemScriptOrHash) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output_RedeemScriptOrHash.ProtoReflect.Descriptor instead.
func (*Output_RedeemScriptOrHash) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{3, 1}
}

func (x *Output_RedeemScriptOrHash) GetVariant() isOutput_RedeemScriptOrHash_Variant {
	if x != nil {
		return x.Variant
	}
	return nil
}

func (x *Output_RedeemScriptOrHash) GetRedeemScript() []byte {
	if x != nil {
		if x, ok := x.Variant.(*Output_RedeemScriptOrHash_RedeemScript); ok {
			return x.RedeemScript
		}
	}
	return nil
}

func (x *Output_RedeemScriptOrHash) GetHash() []byte {
	if x != nil {
		if x, ok := x.Variant.(*Output_RedeemScriptOrHash_Hash); ok {
			return x.Hash
		}
	}
	return nil
}

type isOutput_RedeemScriptOrHash_Variant interface {
	isOutput_RedeemScriptOrHash_Variant()
}

type Output_RedeemScriptOrHash_RedeemScript struct {
	// Redeem script bytes.
	RedeemScript []byte `protobuf:"bytes,1,opt,name=redeem_script,json=redeemScript,proto3,oneof"`
}

type Output_RedeemScriptOrHash_Hash struct {
	// Public key hash.
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3,oneof"`
}

func (*Output_RedeemScriptOrHash_RedeemScript) isOutput_RedeemScriptOrHash_Variant() {}

func (*Output_RedeemScriptOrHash_Hash) isOutput_RedeemScriptOrHash_Variant() {}

type Output_OutputTaprootScriptPath struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The internal key, usually the public key of the recipient.
	InternalKey []byte `protobuf:"bytes,1,opt,name=internal_key,json=internalKey,proto3" json:"internal_key,omitempty"`
	// The merkle root of the Taproot script(s), required to compute the sighash.
	MerkleRoot    []byte `protobuf:"bytes,2,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Output_OutputTaprootScriptPath) Reset() {
	*x = Output_OutputTaprootScriptPath{}
	mi := &file_BitcoinV2_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Output_OutputTaprootScriptPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output_OutputTaprootScriptPath) ProtoMessage() {}

func (x *Output_OutputTaprootScriptPath) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output_OutputTaprootScriptPath.ProtoReflect.Descriptor instead.
func (*Output_OutputTaprootScriptPath) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{3, 2}
}

func (x *Output_OutputTaprootScriptPath) GetInternalKey() []byte {
	if x != nil {
		return x.InternalKey
	}
	return nil
}

func (x *Output_OutputTaprootScriptPath) GetMerkleRoot() []byte {
	if x != nil {
		return x.MerkleRoot
	}
	return nil
}

type Output_OutputBrc20Inscription struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The recipient of the inscription, usually the sender.
	InscribeTo []byte `protobuf:"bytes,1,opt,name=inscribe_to,json=inscribeTo,proto3" json:"inscribe_to,omitempty"`
	// The ticker of the BRC20 inscription.
	Ticker string `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
	// The BRC20 token transfer amount.
	TransferAmount string `protobuf:"bytes,3,opt,name=transfer_amount,json=transferAmount,proto3" json:"transfer_amount,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Output_OutputBrc20Inscription) Reset() {
	*x = Output_OutputBrc20Inscription{}
	mi := &file_BitcoinV2_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Output_OutputBrc20Inscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output_OutputBrc20Inscription) ProtoMessage() {}

func (x *Output_OutputBrc20Inscription) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output_OutputBrc20Inscription.ProtoReflect.Descriptor instead.
func (*Output_OutputBrc20Inscription) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{3, 3}
}

func (x *Output_OutputBrc20Inscription) GetInscribeTo() []byte {
	if x != nil {
		return x.InscribeTo
	}
	return nil
}

func (x *Output_OutputBrc20Inscription) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *Output_OutputBrc20Inscription) GetTransferAmount() string {
	if x != nil {
		return x.TransferAmount
	}
	return ""
}

type PreSigningOutput_Sighash struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Public key used for signing.
	// Please note it can be tweaked in case of P2TR scriptPubkey.
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// The sighash to be signed.
	Sighash []byte `protobuf:"bytes,2,opt,name=sighash,proto3" json:"sighash,omitempty"`
	// Signing method to be used to sign the sighash.
	SigningMethod PreSigningOutput_SigningMethod `protobuf:"varint,3,opt,name=signing_method,json=signingMethod,proto3,enum=TW.BitcoinV2.Proto.PreSigningOutput_SigningMethod" json:"signing_method,omitempty"`
	// Taproot tweak if `Taproot` signing method is used.
	// Empty if there is no need to tweak the private to sign the sighash.
	Tweak         *PreSigningOutput_TaprootTweak `protobuf:"bytes,4,opt,name=tweak,proto3" json:"tweak,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PreSigningOutput_Sighash) Reset() {
	*x = PreSigningOutput_Sighash{}
	mi := &file_BitcoinV2_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreSigningOutput_Sighash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreSigningOutput_Sighash) ProtoMessage() {}

func (x *PreSigningOutput_Sighash) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreSigningOutput_Sighash.ProtoReflect.Descriptor instead.
func (*PreSigningOutput_Sighash) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{9, 0}
}

func (x *PreSigningOutput_Sighash) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *PreSigningOutput_Sighash) GetSighash() []byte {
	if x != nil {
		return x.Sighash
	}
	return nil
}

func (x *PreSigningOutput_Sighash) GetSigningMethod() PreSigningOutput_SigningMethod {
	if x != nil {
		return x.SigningMethod
	}
	return PreSigningOutput_Legacy
}

func (x *PreSigningOutput_Sighash) GetTweak() *PreSigningOutput_TaprootTweak {
	if x != nil {
		return x.Tweak
	}
	return nil
}

type PreSigningOutput_TaprootTweak struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 32 bytes merkle root of the script tree.
	// Empty if there are no scripts, and the private key should be tweaked without a merkle root.
	MerkleRoot    []byte `protobuf:"bytes,1,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PreSigningOutput_TaprootTweak) Reset() {
	*x = PreSigningOutput_TaprootTweak{}
	mi := &file_BitcoinV2_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreSigningOutput_TaprootTweak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreSigningOutput_TaprootTweak) ProtoMessage() {}

func (x *PreSigningOutput_TaprootTweak) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreSigningOutput_TaprootTweak.ProtoReflect.Descriptor instead.
func (*PreSigningOutput_TaprootTweak) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{9, 1}
}

func (x *PreSigningOutput_TaprootTweak) GetMerkleRoot() []byte {
	if x != nil {
		return x.MerkleRoot
	}
	return nil
}

var File_BitcoinV2_proto protoreflect.FileDescriptor

const file_BitcoinV2_proto_rawDesc = "" +
	"\n" +
	"\x0fBitcoinV2.proto\x12\x12TW.BitcoinV2.Proto\x1a\x14BabylonStaking.proto\x1a\fCommon.proto\x1a\x0eDecredV2.proto\x1a\n" +
	"Utxo.proto\x1a\vZcash.proto\"L\n" +
	"\x0fPublicKeyOrHash\x12\x18\n" +
	"\x06pubkey\x18\x01 \x01(\fH\x00R\x06pubkey\x12\x14\n" +
	"\x04hash\x18\x02 \x01(\fH\x00R\x04hashB\t\n" +
	"\avariant\"Q\n" +
	"\x12PublicKeySignature\x12\x1d\n" +
	"\n" +
	"public_key\x18\x01 \x01(\fR\tpublicKey\x12\x1c\n" +
	"\tsignature\x18\x02 \x01(\fR\tsignature\"\xa6\f\n" +
	"\x05Input\x124\n" +
	"\tout_point\x18\x01 \x01(\v2\x17.TW.Utxo.Proto.OutPointR\boutPoint\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value\x12!\n" +
	"\fsighash_type\x18\x03 \x01(\rR\vsighashType\x12>\n" +
	"\bsequence\x18\x04 \x01(\v2\".TW.BitcoinV2.Proto.Input.SequenceR\bsequence\x12O\n" +
	"\x0escript_builder\x18\x05 \x01(\v2&.TW.BitcoinV2.Proto.Input.InputBuilderH\x00R\rscriptBuilder\x12!\n" +
	"\vscript_data\x18\x06 \x01(\fH\x00R\n" +
	"scriptData\x12+\n" +
	"\x10receiver_address\x18\a \x01(\tH\x00R\x0freceiverAddress\x1a&\n" +
	"\bSequence\x12\x1a\n" +
	"\bsequence\x18\x01 \x01(\rR\bsequence\x1a\xbd\a\n" +
	"\fInputBuilder\x12\x14\n" +
	"\x04p2pk\x18\x02 \x01(\fH\x00R\x04p2pk\x12;\n" +
	"\x05p2pkh\x18\x03 \x01(\v2#.TW.BitcoinV2.Proto.PublicKeyOrHashH\x00R\x05p2pkh\x12=\n" +
	"\x06p2wpkh\x18\x05 \x01(\v2#.TW.BitcoinV2.Proto.PublicKeyOrHashH\x00R\x06p2wpkh\x12$\n" +
	"\rp2tr_key_path\x18\a \x01(\fH\x00R\vp2trKeyPath\x12X\n" +
	"\x0ebrc20_inscribe\x18\t \x01(\v2/.TW.BitcoinV2.Proto.Input.InputBrc20InscriptionH\x00R\rbrc20Inscribe\x12~\n" +
	"\x1dbabylon_staking_timelock_path\x18\x0f \x01(\v29.TW.BabylonStaking.Proto.InputBuilder.StakingTimelockPathH\x00R\x1ababylonStakingTimelockPath\x12\x81\x01\n" +
	"\x1ebabylon_staking_unbonding_path\x18\x10 \x01(\v2:.TW.BabylonStaking.Proto.InputBuilder.StakingUnbondingPathH\x00R\x1bbabylonStakingUnbondingPath\x12~\n" +
	"\x1dbabylon_staking_slashing_path\x18\x11 \x01(\v29.TW.BabylonStaking.Proto.InputBuilder.StakingSlashingPathH\x00R\x1ababylonStakingSlashingPath\x12\x84\x01\n" +
	"\x1fbabylon_unbonding_timelock_path\x18\x12 \x01(\v2;.TW.BabylonStaking.Proto.InputBuilder.UnbondingTimelockPathH\x00R\x1cbabylonUnbondingTimelockPath\x12\x84\x01\n" +
	"\x1fbabylon_unbonding_slashing_path\x18\x13 \x01(\v2;.TW.BabylonStaking.Proto.InputBuilder.UnbondingSlashingPathH\x00R\x1cbabylonUnbondingSlashingPathB\t\n" +
	"\avariant\x1aW\n" +
	"\x16InputTaprootScriptPath\x12\x18\n" +
	"\apayload\x18\x02 \x01(\fR\apayload\x12#\n" +
	"\rcontrol_block\x18\x03 \x01(\fR\fcontrolBlock\x1ay\n" +
	"\x15InputBrc20Inscription\x12\x1f\n" +
	"\vinscribe_to\x18\x02 \x01(\fR\n" +
	"inscribeTo\x12\x16\n" +
	"\x06ticker\x18\x03 \x01(\tR\x06ticker\x12'\n" +
	"\x0ftransfer_amount\x18\x04 \x01(\tR\x0etransferAmountB\x11\n" +
	"\x0fclaiming_script\"\xb9\v\n" +
	"\x06Output\x12\x14\n" +
	"\x05value\x18\x01 \x01(\x03R\x05value\x12D\n" +
	"\abuilder\x18\x02 \x01(\v2(.TW.BitcoinV2.Proto.Output.OutputBuilderH\x00R\abuilder\x122\n" +
	"\x14custom_script_pubkey\x18\x03 \x01(\fH\x00R\x12customScriptPubkey\x12\x1f\n" +
	"\n" +
	"to_address\x18\x04 \x01(\tH\x00R\ttoAddress\x1a\xb4\a\n" +
	"\rOutputBuilder\x12C\n" +
	"\x04p2sh\x18\x01 \x01(\v2-.TW.BitcoinV2.Proto.Output.RedeemScriptOrHashH\x00R\x04p2sh\x12\x14\n" +
	"\x04p2pk\x18\x02 \x01(\fH\x00R\x04p2pk\x12;\n" +
	"\x05p2pkh\x18\x03 \x01(\v2#.TW.BitcoinV2.Proto.PublicKeyOrHashH\x00R\x05p2pkh\x12E\n" +
	"\x05p2wsh\x18\x04 \x01(\v2-.TW.BitcoinV2.Proto.Output.RedeemScriptOrHashH\x00R\x05p2wsh\x12=\n" +
	"\x06p2wpkh\x18\x05 \x01(\v2#.TW.BitcoinV2.Proto.PublicKeyOrHashH\x00R\x06p2wpkh\x12$\n" +
	"\rp2tr_key_path\x18\x06 \x01(\fH\x00R\vp2trKeyPath\x12^\n" +
	"\x10p2tr_script_path\x18\a \x01(\v22.TW.BitcoinV2.Proto.Output.OutputTaprootScriptPathH\x00R\x0ep2trScriptPath\x12C\n" +
	"\x1dp2tr_dangerous_assume_tweaked\x18\b \x01(\fH\x00R\x1ap2trDangerousAssumeTweaked\x12Z\n" +
	"\x0ebrc20_inscribe\x18\t \x01(\v21.TW.BitcoinV2.Proto.Output.OutputBrc20InscriptionH\x00R\rbrc20Inscribe\x12\x1d\n" +
	"\top_return\x18\f \x01(\fH\x00R\bopReturn\x12_\n" +
	"\x0fbabylon_staking\x18\x0f \x01(\v24.TW.BabylonStaking.Proto.OutputBuilder.StakingOutputH\x00R\x0ebabylonStaking\x12e\n" +
	"\x11babylon_unbonding\x18\x10 \x01(\v26.TW.BabylonStaking.Proto.OutputBuilder.UnbondingOutputH\x00R\x10babylonUnbonding\x12l\n" +
	"\x19babylon_staking_op_return\x18\x11 \x01(\v2/.TW.BabylonStaking.Proto.OutputBuilder.OpReturnH\x00R\x16babylonStakingOpReturnB\t\n" +
	"\avariant\x1a\\\n" +
	"\x12RedeemScriptOrHash\x12%\n" +
	"\rredeem_script\x18\x01 \x01(\fH\x00R\fredeemScript\x12\x14\n" +
	"\x04hash\x18\x02 \x01(\fH\x00R\x04hashB\t\n" +
	"\avariant\x1a]\n" +
	"\x17OutputTaprootScriptPath\x12!\n" +
	"\finternal_key\x18\x01 \x01(\fR\vinternalKey\x12\x1f\n" +
	"\vmerkle_root\x18\x02 \x01(\fR\n" +
	"merkleRoot\x1az\n" +
	"\x16OutputBrc20Inscription\x12\x1f\n" +
	"\vinscribe_to\x18\x01 \x01(\fR\n" +
	"inscribeTo\x12\x16\n" +
	"\x06ticker\x18\x02 \x01(\tR\x06ticker\x12'\n" +
	"\x0ftransfer_amount\x18\x03 \x01(\tR\x0etransferAmountB\x0e\n" +
	"\fto_recipient\"a\n" +
	"\tChainInfo\x12!\n" +
	"\fp2pkh_prefix\x18\x01 \x01(\rR\vp2pkhPrefix\x12\x1f\n" +
	"\vp2sh_prefix\x18\x02 \x01(\rR\n" +
	"p2shPrefix\x12\x10\n" +
	"\x03hrp\x18\x03 \x01(\tR\x03hrp\"\xfb\x04\n" +
	"\x12TransactionBuilder\x12@\n" +
	"\aversion\x18\x01 \x01(\x0e2&.TW.BitcoinV2.Proto.TransactionVersionR\aversion\x12\x1b\n" +
	"\tlock_time\x18\x02 \x01(\rR\blockTime\x121\n" +
	"\x06inputs\x18\x03 \x03(\v2\x19.TW.BitcoinV2.Proto.InputR\x06inputs\x124\n" +
	"\aoutputs\x18\x04 \x03(\v2\x1a.TW.BitcoinV2.Proto.OutputR\aoutputs\x12H\n" +
	"\x0einput_selector\x18\x05 \x01(\x0e2!.TW.BitcoinV2.Proto.InputSelectorR\rinputSelector\x12\x1c\n" +
	"\n" +
	"fee_per_vb\x18\x06 \x01(\x03R\bfeePerVb\x12?\n" +
	"\rchange_output\x18\a \x01(\v2\x1a.TW.BitcoinV2.Proto.OutputR\fchangeOutput\x12F\n" +
	"\x11max_amount_output\x18\b \x01(\v2\x1a.TW.BitcoinV2.Proto.OutputR\x0fmaxAmountOutput\x122\n" +
	"\x14fixed_dust_threshold\x18\n" +
	" \x01(\x03H\x00R\x12fixedDustThreshold\x12W\n" +
	"\x10zcash_extra_data\x18\x14 \x01(\v2+.TW.Zcash.Proto.TransactionBuilderExtraDataH\x01R\x0ezcashExtraDataB\r\n" +
	"\vdust_policyB\x10\n" +
	"\x0echain_specific\"\x1a\n" +
	"\x04Psbt\x12\x12\n" +
	"\x04psbt\x18\x01 \x01(\fR\x04psbt\"\xd9\x02\n" +
	"\fSigningInput\x12!\n" +
	"\fprivate_keys\x18\x01 \x03(\fR\vprivateKeys\x12\x1f\n" +
	"\vpublic_keys\x18\x02 \x03(\fR\n" +
	"publicKeys\x12<\n" +
	"\n" +
	"chain_info\x18\x03 \x01(\v2\x1d.TW.BitcoinV2.Proto.ChainInfoR\tchainInfo\x12D\n" +
	"\x1fdangerous_use_fixed_schnorr_rng\x18\x04 \x01(\bR\x1bdangerousUseFixedSchnorrRng\x12B\n" +
	"\abuilder\x18\n" +
	" \x01(\v2&.TW.BitcoinV2.Proto.TransactionBuilderH\x00R\abuilder\x12.\n" +
	"\x04psbt\x18\v \x01(\v2\x18.TW.BitcoinV2.Proto.PsbtH\x00R\x04psbtB\r\n" +
	"\vtransaction\"\x82\x03\n" +
	"\x0fTransactionPlan\x123\n" +
	"\x05error\x18\x01 \x01(\x0e2\x1d.TW.Common.Proto.SigningErrorR\x05error\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage\x121\n" +
	"\x06inputs\x18\x03 \x03(\v2\x19.TW.BitcoinV2.Proto.InputR\x06inputs\x124\n" +
	"\aoutputs\x18\x04 \x03(\v2\x1a.TW.BitcoinV2.Proto.OutputR\aoutputs\x12)\n" +
	"\x10available_amount\x18\x05 \x01(\x03R\x0favailableAmount\x12\x1f\n" +
	"\vsend_amount\x18\x06 \x01(\x03R\n" +
	"sendAmount\x12%\n" +
	"\x0evsize_estimate\x18\a \x01(\x04R\rvsizeEstimate\x12!\n" +
	"\ffee_estimate\x18\b \x01(\x03R\vfeeEstimate\x12\x16\n" +
	"\x06change\x18\t \x01(\x03R\x06change\"\x88\x04\n" +
	"\x10PreSigningOutput\x123\n" +
	"\x05error\x18\x01 \x01(\x0e2\x1d.TW.Common.Proto.SigningErrorR\x05error\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage\x12J\n" +
	"\tsighashes\x18\x04 \x03(\v2,.TW.BitcoinV2.Proto.PreSigningOutput.SighashR\tsighashes\x1a\xe6\x01\n" +
	"\aSighash\x12\x1d\n" +
	"\n" +
	"public_key\x18\x01 \x01(\fR\tpublicKey\x12\x18\n" +
	"\asighash\x18\x02 \x01(\fR\asighash\x12Y\n" +
	"\x0esigning_method\x18\x03 \x01(\x0e22.TW.BitcoinV2.Proto.PreSigningOutput.SigningMethodR\rsigningMethod\x12G\n" +
	"\x05tweak\x18\x04 \x01(\v21.TW.BitcoinV2.Proto.PreSigningOutput.TaprootTweakR\x05tweak\x1a/\n" +
	"\fTaprootTweak\x12\x1f\n" +
	"\vmerkle_root\x18\x01 \x01(\fR\n" +
	"merkleRoot\"4\n" +
	"\rSigningMethod\x12\n" +
	"\n" +
	"\x06Legacy\x10\x00\x12\n" +
	"\n" +
	"\x06Segwit\x10\x01\x12\v\n" +
	"\aTaproot\x10\x02\"\xbb\x03\n" +
	"\rSigningOutput\x123\n" +
	"\x05error\x18\x01 \x01(\x0e2\x1d.TW.Common.Proto.SigningErrorR\x05error\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage\x12\x18\n" +
	"\aencoded\x18\x04 \x01(\fR\aencoded\x12\x12\n" +
	"\x04txid\x18\x05 \x01(\fR\x04txid\x12\x14\n" +
	"\x05vsize\x18\x06 \x01(\x04R\x05vsize\x12\x16\n" +
	"\x06weight\x18\a \x01(\x04R\x06weight\x12\x10\n" +
	"\x03fee\x18\b \x01(\x03R\x03fee\x12,\n" +
	"\x04psbt\x18\t \x01(\v2\x18.TW.BitcoinV2.Proto.PsbtR\x04psbt\x126\n" +
	"\abitcoin\x18\x0f \x01(\v2\x1a.TW.Utxo.Proto.TransactionH\x00R\abitcoin\x123\n" +
	"\x05zcash\x18\x10 \x01(\v2\x1b.TW.Zcash.Proto.TransactionH\x00R\x05zcash\x128\n" +
	"\x06decred\x18\x11 \x01(\v2\x1e.TW.DecredV2.Proto.TransactionH\x00R\x06decredB\r\n" +
	"\vtransaction*Y\n" +
	"\rInputSelector\x12\x13\n" +
	"\x0fSelectAscending\x10\x00\x12\x11\n" +
	"\rSelectInOrder\x10\x01\x12\x14\n" +
	"\x10SelectDescending\x10\x02\x12\n" +
	"\n" +
	"\x06UseAll\x10\n" +
	"*4\n" +
	"\x12TransactionVersion\x12\x0e\n" +
	"\n" +
	"UseDefault\x10\x00\x12\x06\n" +
	"\x02V1\x10\x01\x12\x06\n" +
	"\x02V2\x10\x02B\x17\n" +
	"\x15wallet.core.jni.protob\x06proto3"

var (
	file_BitcoinV2_proto_rawDescOnce sync.Once
	file_BitcoinV2_proto_rawDescData []byte
)

func file_BitcoinV2_proto_rawDescGZIP() []byte {
	file_BitcoinV2_proto_rawDescOnce.Do(func() {
		file_BitcoinV2_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_BitcoinV2_proto_rawDesc), len(file_BitcoinV2_proto_rawDesc)))
	})
	return file_BitcoinV2_proto_rawDescData
}

var file_BitcoinV2_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_BitcoinV2_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_BitcoinV2_proto_goTypes = []any{
	(InputSelector)(0),                                        // 0: TW.BitcoinV2.Proto.InputSelector
	(TransactionVersion)(0),                                   // 1: TW.BitcoinV2.Proto.TransactionVersion
	(PreSigningOutput_SigningMethod)(0),                       // 2: TW.BitcoinV2.Proto.PreSigningOutput.SigningMethod
	(*PublicKeyOrHash)(nil),                                   // 3: TW.BitcoinV2.Proto.PublicKeyOrHash
	(*PublicKeySignature)(nil),                                // 4: TW.BitcoinV2.Proto.PublicKeySignature
	(*Input)(nil),                                             // 5: TW.BitcoinV2.Proto.Input
	(*Output)(nil),                                            // 6: TW.BitcoinV2.Proto.Output
	(*ChainInfo)(nil),                                         // 7: TW.BitcoinV2.Proto.ChainInfo
	(*TransactionBuilder)(nil),                                // 8: TW.BitcoinV2.Proto.TransactionBuilder
	(*Psbt)(nil),                                              // 9: TW.BitcoinV2.Proto.Psbt
	(*SigningInput)(nil),                                      // 10: TW.BitcoinV2.Proto.SigningInput
	(*TransactionPlan)(nil),                                   // 11: TW.BitcoinV2.Proto.TransactionPlan
	(*PreSigningOutput)(nil),                                  // 12: TW.BitcoinV2.Proto.PreSigningOutput
	(*SigningOutput)(nil),                                     // 13: TW.BitcoinV2.Proto.SigningOutput
	(*Input_Sequence)(nil),                                    // 14: TW.BitcoinV2.Proto.Input.Sequence
	(*Input_InputBuilder)(nil),                                // 15: TW.BitcoinV2.Proto.Input.InputBuilder
	(*Input_InputTaprootScriptPath)(nil),                      // 16: TW.BitcoinV2.Proto.Input.InputTaprootScriptPath
	(*Input_InputBrc20Inscription)(nil),                       // 17: TW.BitcoinV2.Proto.Input.InputBrc20Inscription
	(*Output_OutputBuilder)(nil),                              // 18: TW.BitcoinV2.Proto.Output.OutputBuilder
	(*Output_RedeemScriptOrHash)(nil),                         // 19: TW.BitcoinV2.Proto.Output.RedeemScriptOrHash
	(*Output_OutputTaprootScriptPath)(nil),                    // 20: TW.BitcoinV2.Proto.Output.OutputTaprootScriptPath
	(*Output_OutputBrc20Inscription)(nil),                     // 21: TW.BitcoinV2.Proto.Output.OutputBrc20Inscription
	(*PreSigningOutput_Sighash)(nil),                          // 22: TW.BitcoinV2.Proto.PreSigningOutput.Sighash
	(*PreSigningOutput_TaprootTweak)(nil),                     // 23: TW.BitcoinV2.Proto.PreSigningOutput.TaprootTweak
	(*utxo.OutPoint)(nil),                                     // 24: TW.Utxo.Proto.OutPoint
	(*zcash.TransactionBuilderExtraData)(nil),                 // 25: TW.Zcash.Proto.TransactionBuilderExtraData
	(common.SigningError)(0),                                  // 26: TW.Common.Proto.SigningError
	(*utxo.Transaction)(nil),                                  // 27: TW.Utxo.Proto.Transaction
	(*zcash.Transaction)(nil),                                 // 28: TW.Zcash.Proto.Transaction
	(*decredv2.Transaction)(nil),                              // 29: TW.DecredV2.Proto.Transaction
	(*babylonstaking.InputBuilder_StakingTimelockPath)(nil),   // 30: TW.BabylonStaking.Proto.InputBuilder.StakingTimelockPath
	(*babylonstaking.InputBuilder_StakingUnbondingPath)(nil),  // 31: TW.BabylonStaking.Proto.InputBuilder.StakingUnbondingPath
	(*babylonstaking.InputBuilder_StakingSlashingPath)(nil),   // 32: TW.BabylonStaking.Proto.InputBuilder.StakingSlashingPath
	(*babylonstaking.InputBuilder_UnbondingTimelockPath)(nil), // 33: TW.BabylonStaking.Proto.InputBuilder.UnbondingTimelockPath
	(*babylonstaking.InputBuilder_UnbondingSlashingPath)(nil), // 34: TW.BabylonStaking.Proto.InputBuilder.UnbondingSlashingPath
	(*babylonstaking.OutputBuilder_StakingOutput)(nil),        // 35: TW.BabylonStaking.Proto.OutputBuilder.StakingOutput
	(*babylonstaking.OutputBuilder_UnbondingOutput)(nil),      // 36: TW.BabylonStaking.Proto.OutputBuilder.UnbondingOutput
	(*babylonstaking.OutputBuilder_OpReturn)(nil),             // 37: TW.BabylonStaking.Proto.OutputBuilder.OpReturn
}
var file_BitcoinV2_proto_depIdxs = []int32{
	24, // 0: TW.BitcoinV2.Proto.Input.out_point:type_name -> TW.Utxo.Proto.OutPoint
	14, // 1: TW.BitcoinV2.Proto.Input.sequence:type_name -> TW.BitcoinV2.Proto.Input.Sequence
	15, // 2: TW.BitcoinV2.Proto.Input.script_builder:type_name -> TW.BitcoinV2.Proto.Input.InputBuilder
	18, // 3: TW.BitcoinV2.Proto.Output.builder:type_name -> TW.BitcoinV2.Proto.Output.OutputBuilder
	1,  // 4: TW.BitcoinV2.Proto.TransactionBuilder.version:type_name -> TW.BitcoinV2.Proto.TransactionVersion
	5,  // 5: TW.BitcoinV2.Proto.TransactionBuilder.inputs:type_name -> TW.BitcoinV2.Proto.Input
	6,  // 6: TW.BitcoinV2.Proto.TransactionBuilder.outputs:type_name -> TW.BitcoinV2.Proto.Output
	0,  // 7: TW.BitcoinV2.Proto.TransactionBuilder.input_selector:type_name -> TW.BitcoinV2.Proto.InputSelector
	6,  // 8: TW.BitcoinV2.Proto.TransactionBuilder.change_output:type_name -> TW.BitcoinV2.Proto.Output
	6,  // 9: TW.BitcoinV2.Proto.TransactionBuilder.max_amount_output:type_name -> TW.BitcoinV2.Proto.Output
	25, // 10: TW.BitcoinV2.Proto.TransactionBuilder.zcash_extra_data:type_name -> TW.Zcash.Proto.TransactionBuilderExtraData
	7,  // 11: TW.BitcoinV2.Proto.SigningInput.chain_info:type_name -> TW.BitcoinV2.Proto.ChainInfo
	8,  // 12: TW.BitcoinV2.Proto.SigningInput.builder:type_name -> TW.BitcoinV2.Proto.TransactionBuilder
	9,  // 13: TW.BitcoinV2.Proto.SigningInput.psbt:type_name -> TW.BitcoinV2.Proto.Psbt
	26, // 14: TW.BitcoinV2.Proto.TransactionPlan.error:type_name -> TW.Common.Proto.SigningError
	5,  // 15: TW.BitcoinV2.Proto.TransactionPlan.inputs:type_name -> TW.BitcoinV2.Proto.Input
	6,  // 16: TW.BitcoinV2.Proto.TransactionPlan.outputs:type_name -> TW.BitcoinV2.Proto.Output
	26, // 17: TW.BitcoinV2.Proto.PreSigningOutput.error:type_name -> TW.Common.Proto.SigningError
	22, // 18: TW.BitcoinV2.Proto.PreSigningOutput.sighashes:type_name -> TW.BitcoinV2.Proto.PreSigningOutput.Sighash
	26, // 19: TW.BitcoinV2.Proto.SigningOutput.error:type_name -> TW.Common.Proto.SigningError
	9,  // 20: TW.BitcoinV2.Proto.SigningOutput.psbt:type_name -> TW.BitcoinV2.Proto.Psbt
	27, // 21: TW.BitcoinV2.Proto.SigningOutput.bitcoin:type_name -> TW.Utxo.Proto.Transaction
	28, // 22: TW.BitcoinV2.Proto.SigningOutput.zcash:type_name -> TW.Zcash.Proto.Transaction
	29, // 23: TW.BitcoinV2.Proto.SigningOutput.decred:type_name -> TW.DecredV2.Proto.Transaction
	3,  // 24: TW.BitcoinV2.Proto.Input.InputBuilder.p2pkh:type_name -> TW.BitcoinV2.Proto.PublicKeyOrHash
	3,  // 25: TW.BitcoinV2.Proto.Input.InputBuilder.p2wpkh:type_name -> TW.BitcoinV2.Proto.PublicKeyOrHash
	17, // 26: TW.BitcoinV2.Proto.Input.InputBuilder.brc20_inscribe:type_name -> TW.BitcoinV2.Proto.Input.InputBrc20Inscription
	30, // 27: TW.BitcoinV2.Proto.Input.InputBuilder.babylon_staking_timelock_path:type_name -> TW.BabylonStaking.Proto.InputBuilder.StakingTimelockPath
	31, // 28: TW.BitcoinV2.Proto.Input.InputBuilder.babylon_staking_unbonding_path:type_name -> TW.BabylonStaking.Proto.InputBuilder.StakingUnbondingPath
	32, // 29: TW.BitcoinV2.Proto.Input.InputBuilder.babylon_staking_slashing_path:type_name -> TW.BabylonStaking.Proto.InputBuilder.StakingSlashingPath
	33, // 30: TW.BitcoinV2.Proto.Input.InputBuilder.babylon_unbonding_timelock_path:type_name -> TW.BabylonStaking.Proto.InputBuilder.UnbondingTimelockPath
	34, // 31: TW.BitcoinV2.Proto.Input.InputBuilder.babylon_unbonding_slashing_path:type_name -> TW.BabylonStaking.Proto.InputBuilder.UnbondingSlashingPath
	19, // 32: TW.BitcoinV2.Proto.Output.OutputBuilder.p2sh:type_name -> TW.BitcoinV2.Proto.Output.RedeemScriptOrHash
	3,  // 33: TW.BitcoinV2.Proto.Output.OutputBuilder.p2pkh:type_name -> TW.BitcoinV2.Proto.PublicKeyOrHash
	19, // 34: TW.BitcoinV2.Proto.Output.OutputBuilder.p2wsh:type_name -> TW.BitcoinV2.Proto.Output.RedeemScriptOrHash
	3,  // 35: TW.BitcoinV2.Proto.Output.OutputBuilder.p2wpkh:type_name -> TW.BitcoinV2.Proto.PublicKeyOrHash
	20, // 36: TW.BitcoinV2.Proto.Output.OutputBuilder.p2tr_script_path:type_name -> TW.BitcoinV2.Proto.Output.OutputTaprootScriptPath
	21, // 37: TW.BitcoinV2.Proto.Output.OutputBuilder.brc20_inscribe:type_name -> TW.BitcoinV2.Proto.Output.OutputBrc20Inscription
	35, // 38: TW.BitcoinV2.Proto.Output.OutputBuilder.babylon_staking:type_name -> TW.BabylonStaking.Proto.OutputBuilder.StakingOutput
	36, // 39: TW.BitcoinV2.Proto.Output.OutputBuilder.babylon_unbonding:type_name -> TW.BabylonStaking.Proto.OutputBuilder.UnbondingOutput
	37, // 40: TW.BitcoinV2.Proto.Output.OutputBuilder.babylon_staking_op_return:type_name -> TW.BabylonStaking.Proto.OutputBuilder.OpReturn
	2,  // 41: TW.BitcoinV2.Proto.PreSigningOutput.Sighash.signing_method:type_name -> TW.BitcoinV2.Proto.PreSigningOutput.SigningMethod
	23, // 42: TW.BitcoinV2.Proto.PreSigningOutput.Sighash.tweak:type_name -> TW.BitcoinV2.Proto.PreSigningOutput.TaprootTweak
	43, // [43:43] is the sub-list for method output_type
	43, // [43:43] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_BitcoinV2_proto_init() }
func file_BitcoinV2_proto_init() {
	if File_BitcoinV2_proto != nil {
		return
	}
	file_BitcoinV2_proto_msgTypes[0].OneofWrappers = []any{
		(*PublicKeyOrHash_Pubkey)(nil),
		(*PublicKeyOrHash_Hash)(nil),
	}
	file_BitcoinV2_proto_msgTypes[2].OneofWrappers = []any{
		(*Input_ScriptBuilder)(nil),
		(*Input_ScriptData)(nil),
		(*Input_ReceiverAddress)(nil),
	}
	file_BitcoinV2_proto_msgTypes[3].OneofWrappers = []any{
		(*Output_Builder)(nil),
		(*Output_CustomScriptPubkey)(nil),
		(*Output_ToAddress)(nil),
	}
	file_BitcoinV2_proto_msgTypes[5].OneofWrappers = []any{
		(*TransactionBuilder_FixedDustThreshold)(nil),
		(*TransactionBuilder_ZcashExtraData)(nil),
	}
	file_BitcoinV2_proto_msgTypes[7].OneofWrappers = []any{
		(*SigningInput_Builder)(nil),
		(*SigningInput_Psbt)(nil),
	}
	file_BitcoinV2_proto_msgTypes[10].OneofWrappers = []any{
		(*SigningOutput_Bitcoin)(nil),
		(*SigningOutput_Zcash)(nil),
		(*SigningOutput_Decred)(nil),
	}
	file_BitcoinV2_proto_msgTypes[12].OneofWrappers = []any{
		(*Input_InputBuilder_P2Pk)(nil),
		(*Input_InputBuilder_P2Pkh)(nil),
		(*Input_InputBuilder_P2Wpkh)(nil),
		(*Input_InputBuilder_P2TrKeyPath)(nil),
		(*Input_InputBuilder_Brc20Inscribe)(nil),
		(*Input_InputBuilder_BabylonStakingTimelockPath)(nil),
		(*Input_InputBuilder_BabylonStakingUnbondingPath)(nil),
		(*Input_InputBuilder_BabylonStakingSlashingPath)(nil),
		(*Input_InputBuilder_BabylonUnbondingTimelockPath)(nil),
		(*Input_InputBuilder_BabylonUnbondingSlashingPath)(nil),
	}
	file_BitcoinV2_proto_msgTypes[15].OneofWrappers = []any{
		(*Output_OutputBuilder_P2Sh)(nil),
		(*Output_OutputBuilder_P2Pk)(nil),
		(*Output_OutputBuilder_P2Pkh)(nil),
		(*Output_OutputBuilder_P2Wsh)(nil),
		(*Output_OutputBuilder_P2Wpkh)(nil),
		(*Output_OutputBuilder_P2TrKeyPath)(nil),
		(*Output_OutputBuilder_P2TrScriptPath)(nil),
		(*Output_OutputBuilder_P2TrDangerousAssumeTweaked)(nil),
		(*Output_OutputBuilder_Brc20Inscribe)(nil),
		(*Output_OutputBuilder_OpReturn)(nil),
		(*Output_OutputBuilder_BabylonStaking)(nil),
		(*Output_OutputBuilder_BabylonUnbonding)(nil),
		(*Output_OutputBuilder_BabylonStakingOpReturn)(nil),
	}
	file_BitcoinV2_proto_msgTypes[16].OneofWrappers = []any{
		(*Output_RedeemScriptOrHash_RedeemScript)(nil),
		(*Output_RedeemScriptOrHash_Hash)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_BitcoinV2_proto_rawDesc), len(file_BitcoinV2_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_BitcoinV2_proto_goTypes,
		DependencyIndexes: file_BitcoinV2_proto_depIdxs,
		EnumInfos:         file_BitcoinV2_proto_enumTypes,
		MessageInfos:      file_BitcoinV2_proto_msgTypes,
	}.Build()
	File_BitcoinV2_proto = out.File
	file_BitcoinV2_proto_goTypes = nil
	file_BitcoinV2_proto_depIdxs = nil
}
