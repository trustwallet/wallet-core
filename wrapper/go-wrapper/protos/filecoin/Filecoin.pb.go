// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.20.3
// source: Filecoin.proto

package filecoin

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	common "tw/protos/common"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Defines the type of `from` address derivation.
type DerivationType int32

const (
	// Defines a Secp256k1 (`f1`) derivation for the sender address.
	// Default derivation type.
	DerivationType_SECP256K1 DerivationType = 0
	// Defines a Delegated (`f4`) derivation for the sender address.
	DerivationType_DELEGATED DerivationType = 1
)

// Enum value maps for DerivationType.
var (
	DerivationType_name = map[int32]string{
		0: "SECP256K1",
		1: "DELEGATED",
	}
	DerivationType_value = map[string]int32{
		"SECP256K1": 0,
		"DELEGATED": 1,
	}
)

func (x DerivationType) Enum() *DerivationType {
	p := new(DerivationType)
	*p = x
	return p
}

func (x DerivationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DerivationType) Descriptor() protoreflect.EnumDescriptor {
	return file_Filecoin_proto_enumTypes[0].Descriptor()
}

func (DerivationType) Type() protoreflect.EnumType {
	return &file_Filecoin_proto_enumTypes[0]
}

func (x DerivationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DerivationType.Descriptor instead.
func (DerivationType) EnumDescriptor() ([]byte, []int) {
	return file_Filecoin_proto_rawDescGZIP(), []int{0}
}

// Input data necessary to create a signed transaction.
type SigningInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The secret private key of the sender account, used for signing (32 bytes).
	PrivateKey []byte `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// Recipient's address.
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// Transaction nonce.
	Nonce uint64 `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Transfer value (uint256, serialized big endian)
	Value []byte `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// Gas limit.
	GasLimit int64 `protobuf:"varint,5,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	// Gas fee cap (uint256, serialized big endian)
	GasFeeCap []byte `protobuf:"bytes,6,opt,name=gas_fee_cap,json=gasFeeCap,proto3" json:"gas_fee_cap,omitempty"`
	// Gas premium (uint256, serialized big endian)
	GasPremium []byte `protobuf:"bytes,7,opt,name=gas_premium,json=gasPremium,proto3" json:"gas_premium,omitempty"`
	// Message params.
	Params []byte `protobuf:"bytes,8,opt,name=params,proto3" json:"params,omitempty"`
	// Sender address derivation type.
	Derivation DerivationType `protobuf:"varint,9,opt,name=derivation,proto3,enum=TW.Filecoin.Proto.DerivationType" json:"derivation,omitempty"`
	// Public key secp256k1 extended
	PublicKey     []byte `protobuf:"bytes,10,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningInput) Reset() {
	*x = SigningInput{}
	mi := &file_Filecoin_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningInput) ProtoMessage() {}

func (x *SigningInput) ProtoReflect() protoreflect.Message {
	mi := &file_Filecoin_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningInput.ProtoReflect.Descriptor instead.
func (*SigningInput) Descriptor() ([]byte, []int) {
	return file_Filecoin_proto_rawDescGZIP(), []int{0}
}

func (x *SigningInput) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *SigningInput) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *SigningInput) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *SigningInput) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *SigningInput) GetGasLimit() int64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *SigningInput) GetGasFeeCap() []byte {
	if x != nil {
		return x.GasFeeCap
	}
	return nil
}

func (x *SigningInput) GetGasPremium() []byte {
	if x != nil {
		return x.GasPremium
	}
	return nil
}

func (x *SigningInput) GetParams() []byte {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SigningInput) GetDerivation() DerivationType {
	if x != nil {
		return x.Derivation
	}
	return DerivationType_SECP256K1
}

func (x *SigningInput) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

// Result containing the signed and encoded transaction.
type SigningOutput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Resulting transaction, in JSON.
	Json string `protobuf:"bytes,1,opt,name=json,proto3" json:"json,omitempty"`
	// Error code, 0 is ok, other codes will be treated as errors
	Error common.SigningError `protobuf:"varint,2,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// Error description
	ErrorMessage  string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningOutput) Reset() {
	*x = SigningOutput{}
	mi := &file_Filecoin_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningOutput) ProtoMessage() {}

func (x *SigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_Filecoin_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningOutput.ProtoReflect.Descriptor instead.
func (*SigningOutput) Descriptor() ([]byte, []int) {
	return file_Filecoin_proto_rawDescGZIP(), []int{1}
}

func (x *SigningOutput) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

func (x *SigningOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *SigningOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_Filecoin_proto protoreflect.FileDescriptor

const file_Filecoin_proto_rawDesc = "" +
	"\n" +
	"\x0eFilecoin.proto\x12\x11TW.Filecoin.Proto\x1a\fCommon.proto\"\xc3\x02\n" +
	"\fSigningInput\x12\x1f\n" +
	"\vprivate_key\x18\x01 \x01(\fR\n" +
	"privateKey\x12\x0e\n" +
	"\x02to\x18\x02 \x01(\tR\x02to\x12\x14\n" +
	"\x05nonce\x18\x03 \x01(\x04R\x05nonce\x12\x14\n" +
	"\x05value\x18\x04 \x01(\fR\x05value\x12\x1b\n" +
	"\tgas_limit\x18\x05 \x01(\x03R\bgasLimit\x12\x1e\n" +
	"\vgas_fee_cap\x18\x06 \x01(\fR\tgasFeeCap\x12\x1f\n" +
	"\vgas_premium\x18\a \x01(\fR\n" +
	"gasPremium\x12\x16\n" +
	"\x06params\x18\b \x01(\fR\x06params\x12A\n" +
	"\n" +
	"derivation\x18\t \x01(\x0e2!.TW.Filecoin.Proto.DerivationTypeR\n" +
	"derivation\x12\x1d\n" +
	"\n" +
	"public_key\x18\n" +
	" \x01(\fR\tpublicKey\"}\n" +
	"\rSigningOutput\x12\x12\n" +
	"\x04json\x18\x01 \x01(\tR\x04json\x123\n" +
	"\x05error\x18\x02 \x01(\x0e2\x1d.TW.Common.Proto.SigningErrorR\x05error\x12#\n" +
	"\rerror_message\x18\x03 \x01(\tR\ferrorMessage*.\n" +
	"\x0eDerivationType\x12\r\n" +
	"\tSECP256K1\x10\x00\x12\r\n" +
	"\tDELEGATED\x10\x01B\x17\n" +
	"\x15wallet.core.jni.protob\x06proto3"

var (
	file_Filecoin_proto_rawDescOnce sync.Once
	file_Filecoin_proto_rawDescData []byte
)

func file_Filecoin_proto_rawDescGZIP() []byte {
	file_Filecoin_proto_rawDescOnce.Do(func() {
		file_Filecoin_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_Filecoin_proto_rawDesc), len(file_Filecoin_proto_rawDesc)))
	})
	return file_Filecoin_proto_rawDescData
}

var file_Filecoin_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_Filecoin_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_Filecoin_proto_goTypes = []any{
	(DerivationType)(0),      // 0: TW.Filecoin.Proto.DerivationType
	(*SigningInput)(nil),     // 1: TW.Filecoin.Proto.SigningInput
	(*SigningOutput)(nil),    // 2: TW.Filecoin.Proto.SigningOutput
	(common.SigningError)(0), // 3: TW.Common.Proto.SigningError
}
var file_Filecoin_proto_depIdxs = []int32{
	0, // 0: TW.Filecoin.Proto.SigningInput.derivation:type_name -> TW.Filecoin.Proto.DerivationType
	3, // 1: TW.Filecoin.Proto.SigningOutput.error:type_name -> TW.Common.Proto.SigningError
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_Filecoin_proto_init() }
func file_Filecoin_proto_init() {
	if File_Filecoin_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_Filecoin_proto_rawDesc), len(file_Filecoin_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Filecoin_proto_goTypes,
		DependencyIndexes: file_Filecoin_proto_depIdxs,
		EnumInfos:         file_Filecoin_proto_enumTypes,
		MessageInfos:      file_Filecoin_proto_msgTypes,
	}.Build()
	File_Filecoin_proto = out.File
	file_Filecoin_proto_goTypes = nil
	file_Filecoin_proto_depIdxs = nil
}
