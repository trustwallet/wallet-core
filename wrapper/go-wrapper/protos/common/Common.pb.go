// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.20.3
// source: Common.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Error codes, used in multiple blockchains.
type SigningError int32

const (
	// This is the OK case, with value=0
	SigningError_OK SigningError = 0
	// Chain-generic codes:
	// Generic error (used if there is no suitable specific error is adequate)
	SigningError_Error_general SigningError = 1
	// Internal error, indicates some very unusual, unexpected case
	SigningError_Error_internal SigningError = 2
	// Chain-generic codes, input related:
	// Low balance: the sender balance is not enough to cover the send and other auxiliary amount such as fee, deposit, or minimal balance.
	SigningError_Error_low_balance SigningError = 3
	// Requested amount is zero, send of 0 makes no sense
	SigningError_Error_zero_amount_requested SigningError = 4
	// One required key is missing (too few or wrong keys are provided)
	SigningError_Error_missing_private_key SigningError = 5
	// A private key provided is invalid (e.g. wrong size, usually should be 32 bytes)
	SigningError_Error_invalid_private_key SigningError = 15
	// A provided address (e.g. destination address) is invalid
	SigningError_Error_invalid_address SigningError = 16
	// A provided input UTXO is invalid
	SigningError_Error_invalid_utxo SigningError = 17
	// The amount of an input UTXO is invalid
	SigningError_Error_invalid_utxo_amount SigningError = 18
	// Chain-generic, fee related:
	// Wrong fee is given, probably it is too low to cover minimal fee for the transaction
	SigningError_Error_wrong_fee SigningError = 6
	// Chain-generic, signing related:
	// General signing error
	SigningError_Error_signing SigningError = 7
	// Resulting transaction is too large
	// [NEO] Transaction too big, fee in GAS needed or try send by parts
	SigningError_Error_tx_too_big SigningError = 8
	// UTXO-chain specific, input related:
	// No input UTXOs provided [BTC]
	SigningError_Error_missing_input_utxos SigningError = 9
	// Not enough non-dust input UTXOs to cover requested amount (dust UTXOs are filtered out) [BTC]
	SigningError_Error_not_enough_utxos SigningError = 10
	// UTXO-chain specific, script related:
	// [BTC] Missing required redeem script
	SigningError_Error_script_redeem SigningError = 11
	// [BTC] Invalid required output script
	SigningError_Error_script_output SigningError = 12
	// [BTC] Unrecognized witness program
	SigningError_Error_script_witness_program SigningError = 13
	// Invalid memo, e.g. [XRP] Invalid tag
	SigningError_Error_invalid_memo SigningError = 14
	// Some input field cannot be parsed
	SigningError_Error_input_parse SigningError = 19
	// Multi-input and multi-output transaction not supported
	SigningError_Error_no_support_n2n SigningError = 20
	// Incorrect count of signatures passed to compile
	SigningError_Error_signatures_count SigningError = 21
	// Incorrect input parameter
	SigningError_Error_invalid_params SigningError = 22
	// Invalid input token amount
	SigningError_Error_invalid_requested_token_amount SigningError = 23
	// Operation not supported for the chain.
	SigningError_Error_not_supported SigningError = 24
	// Requested amount is too low (less dust).
	SigningError_Error_dust_amount_requested SigningError = 25
)

// Enum value maps for SigningError.
var (
	SigningError_name = map[int32]string{
		0:  "OK",
		1:  "Error_general",
		2:  "Error_internal",
		3:  "Error_low_balance",
		4:  "Error_zero_amount_requested",
		5:  "Error_missing_private_key",
		15: "Error_invalid_private_key",
		16: "Error_invalid_address",
		17: "Error_invalid_utxo",
		18: "Error_invalid_utxo_amount",
		6:  "Error_wrong_fee",
		7:  "Error_signing",
		8:  "Error_tx_too_big",
		9:  "Error_missing_input_utxos",
		10: "Error_not_enough_utxos",
		11: "Error_script_redeem",
		12: "Error_script_output",
		13: "Error_script_witness_program",
		14: "Error_invalid_memo",
		19: "Error_input_parse",
		20: "Error_no_support_n2n",
		21: "Error_signatures_count",
		22: "Error_invalid_params",
		23: "Error_invalid_requested_token_amount",
		24: "Error_not_supported",
		25: "Error_dust_amount_requested",
	}
	SigningError_value = map[string]int32{
		"OK":                                   0,
		"Error_general":                        1,
		"Error_internal":                       2,
		"Error_low_balance":                    3,
		"Error_zero_amount_requested":          4,
		"Error_missing_private_key":            5,
		"Error_invalid_private_key":            15,
		"Error_invalid_address":                16,
		"Error_invalid_utxo":                   17,
		"Error_invalid_utxo_amount":            18,
		"Error_wrong_fee":                      6,
		"Error_signing":                        7,
		"Error_tx_too_big":                     8,
		"Error_missing_input_utxos":            9,
		"Error_not_enough_utxos":               10,
		"Error_script_redeem":                  11,
		"Error_script_output":                  12,
		"Error_script_witness_program":         13,
		"Error_invalid_memo":                   14,
		"Error_input_parse":                    19,
		"Error_no_support_n2n":                 20,
		"Error_signatures_count":               21,
		"Error_invalid_params":                 22,
		"Error_invalid_requested_token_amount": 23,
		"Error_not_supported":                  24,
		"Error_dust_amount_requested":          25,
	}
)

func (x SigningError) Enum() *SigningError {
	p := new(SigningError)
	*p = x
	return p
}

func (x SigningError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SigningError) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_proto_enumTypes[0].Descriptor()
}

func (SigningError) Type() protoreflect.EnumType {
	return &file_Common_proto_enumTypes[0]
}

func (x SigningError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SigningError.Descriptor instead.
func (SigningError) EnumDescriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{0}
}

var File_Common_proto protoreflect.FileDescriptor

const file_Common_proto_rawDesc = "" +
	"\n" +
	"\fCommon.proto\x12\x0fTW.Common.Proto*\xb5\x05\n" +
	"\fSigningError\x12\x06\n" +
	"\x02OK\x10\x00\x12\x11\n" +
	"\rError_general\x10\x01\x12\x12\n" +
	"\x0eError_internal\x10\x02\x12\x15\n" +
	"\x11Error_low_balance\x10\x03\x12\x1f\n" +
	"\x1bError_zero_amount_requested\x10\x04\x12\x1d\n" +
	"\x19Error_missing_private_key\x10\x05\x12\x1d\n" +
	"\x19Error_invalid_private_key\x10\x0f\x12\x19\n" +
	"\x15Error_invalid_address\x10\x10\x12\x16\n" +
	"\x12Error_invalid_utxo\x10\x11\x12\x1d\n" +
	"\x19Error_invalid_utxo_amount\x10\x12\x12\x13\n" +
	"\x0fError_wrong_fee\x10\x06\x12\x11\n" +
	"\rError_signing\x10\a\x12\x14\n" +
	"\x10Error_tx_too_big\x10\b\x12\x1d\n" +
	"\x19Error_missing_input_utxos\x10\t\x12\x1a\n" +
	"\x16Error_not_enough_utxos\x10\n" +
	"\x12\x17\n" +
	"\x13Error_script_redeem\x10\v\x12\x17\n" +
	"\x13Error_script_output\x10\f\x12 \n" +
	"\x1cError_script_witness_program\x10\r\x12\x16\n" +
	"\x12Error_invalid_memo\x10\x0e\x12\x15\n" +
	"\x11Error_input_parse\x10\x13\x12\x18\n" +
	"\x14Error_no_support_n2n\x10\x14\x12\x1a\n" +
	"\x16Error_signatures_count\x10\x15\x12\x18\n" +
	"\x14Error_invalid_params\x10\x16\x12(\n" +
	"$Error_invalid_requested_token_amount\x10\x17\x12\x17\n" +
	"\x13Error_not_supported\x10\x18\x12\x1f\n" +
	"\x1bError_dust_amount_requested\x10\x19B\x17\n" +
	"\x15wallet.core.jni.protob\x06proto3"

var (
	file_Common_proto_rawDescOnce sync.Once
	file_Common_proto_rawDescData []byte
)

func file_Common_proto_rawDescGZIP() []byte {
	file_Common_proto_rawDescOnce.Do(func() {
		file_Common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_Common_proto_rawDesc), len(file_Common_proto_rawDesc)))
	})
	return file_Common_proto_rawDescData
}

var file_Common_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_Common_proto_goTypes = []any{
	(SigningError)(0), // 0: TW.Common.Proto.SigningError
}
var file_Common_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_Common_proto_init() }
func file_Common_proto_init() {
	if File_Common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_Common_proto_rawDesc), len(file_Common_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Common_proto_goTypes,
		DependencyIndexes: file_Common_proto_depIdxs,
		EnumInfos:         file_Common_proto_enumTypes,
	}.Build()
	File_Common_proto = out.File
	file_Common_proto_goTypes = nil
	file_Common_proto_depIdxs = nil
}
