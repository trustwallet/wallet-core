// SPDX-License-Identifier: Apache-2.0
//
// Copyright Â© 2017 Trust Wallet.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.20.3
// source: TheOpenNetwork.proto

package theopennetwork

import (
	common "github.com/Cramiumlabs/wallet-core/wrapper/go-wrapper/protos/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WalletVersion int32

const (
	WalletVersion_WALLET_V3_R1 WalletVersion = 0
	WalletVersion_WALLET_V3_R2 WalletVersion = 1
	WalletVersion_WALLET_V4_R2 WalletVersion = 2
	WalletVersion_WALLET_V5_R1 WalletVersion = 3
)

// Enum value maps for WalletVersion.
var (
	WalletVersion_name = map[int32]string{
		0: "WALLET_V3_R1",
		1: "WALLET_V3_R2",
		2: "WALLET_V4_R2",
		3: "WALLET_V5_R1",
	}
	WalletVersion_value = map[string]int32{
		"WALLET_V3_R1": 0,
		"WALLET_V3_R2": 1,
		"WALLET_V4_R2": 2,
		"WALLET_V5_R1": 3,
	}
)

func (x WalletVersion) Enum() *WalletVersion {
	p := new(WalletVersion)
	*p = x
	return p
}

func (x WalletVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalletVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_TheOpenNetwork_proto_enumTypes[0].Descriptor()
}

func (WalletVersion) Type() protoreflect.EnumType {
	return &file_TheOpenNetwork_proto_enumTypes[0]
}

func (x WalletVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WalletVersion.Descriptor instead.
func (WalletVersion) EnumDescriptor() ([]byte, []int) {
	return file_TheOpenNetwork_proto_rawDescGZIP(), []int{0}
}

type SendMode int32

const (
	SendMode_DEFAULT                          SendMode = 0
	SendMode_PAY_FEES_SEPARATELY              SendMode = 1
	SendMode_IGNORE_ACTION_PHASE_ERRORS       SendMode = 2
	SendMode_DESTROY_ON_ZERO_BALANCE          SendMode = 32
	SendMode_ATTACH_ALL_INBOUND_MESSAGE_VALUE SendMode = 64
	SendMode_ATTACH_ALL_CONTRACT_BALANCE      SendMode = 128
)

// Enum value maps for SendMode.
var (
	SendMode_name = map[int32]string{
		0:   "DEFAULT",
		1:   "PAY_FEES_SEPARATELY",
		2:   "IGNORE_ACTION_PHASE_ERRORS",
		32:  "DESTROY_ON_ZERO_BALANCE",
		64:  "ATTACH_ALL_INBOUND_MESSAGE_VALUE",
		128: "ATTACH_ALL_CONTRACT_BALANCE",
	}
	SendMode_value = map[string]int32{
		"DEFAULT":                          0,
		"PAY_FEES_SEPARATELY":              1,
		"IGNORE_ACTION_PHASE_ERRORS":       2,
		"DESTROY_ON_ZERO_BALANCE":          32,
		"ATTACH_ALL_INBOUND_MESSAGE_VALUE": 64,
		"ATTACH_ALL_CONTRACT_BALANCE":      128,
	}
)

func (x SendMode) Enum() *SendMode {
	p := new(SendMode)
	*p = x
	return p
}

func (x SendMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendMode) Descriptor() protoreflect.EnumDescriptor {
	return file_TheOpenNetwork_proto_enumTypes[1].Descriptor()
}

func (SendMode) Type() protoreflect.EnumType {
	return &file_TheOpenNetwork_proto_enumTypes[1]
}

func (x SendMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendMode.Descriptor instead.
func (SendMode) EnumDescriptor() ([]byte, []int) {
	return file_TheOpenNetwork_proto_rawDescGZIP(), []int{1}
}

type Transfer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Recipient address
	Dest string `protobuf:"bytes,1,opt,name=dest,proto3" json:"dest,omitempty"`
	// Amount to send in nanotons
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// Send mode (optional, 0 by default)
	// Learn more: https://ton.org/docs/develop/func/stdlib#send_raw_message
	Mode uint32 `protobuf:"varint,3,opt,name=mode,proto3" json:"mode,omitempty"`
	// Transfer comment message (optional, empty by default)
	// Ignored if `custom_payload` is specified
	Comment string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	// If the address is bounceable
	Bounceable bool `protobuf:"varint,5,opt,name=bounceable,proto3" json:"bounceable,omitempty"`
	// Optional raw one-cell BoC encoded in Base64.
	// Can be used to deploy a smart contract.
	StateInit string `protobuf:"bytes,6,opt,name=state_init,json=stateInit,proto3" json:"state_init,omitempty"`
	// One of the Transfer message payloads (optional).
	//
	// Types that are valid to be assigned to Payload:
	//
	//	*Transfer_JettonTransfer
	//	*Transfer_CustomPayload
	Payload       isTransfer_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	mi := &file_TheOpenNetwork_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_TheOpenNetwork_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_TheOpenNetwork_proto_rawDescGZIP(), []int{0}
}

func (x *Transfer) GetDest() string {
	if x != nil {
		return x.Dest
	}
	return ""
}

func (x *Transfer) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Transfer) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *Transfer) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Transfer) GetBounceable() bool {
	if x != nil {
		return x.Bounceable
	}
	return false
}

func (x *Transfer) GetStateInit() string {
	if x != nil {
		return x.StateInit
	}
	return ""
}

func (x *Transfer) GetPayload() isTransfer_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Transfer) GetJettonTransfer() *JettonTransfer {
	if x != nil {
		if x, ok := x.Payload.(*Transfer_JettonTransfer); ok {
			return x.JettonTransfer
		}
	}
	return nil
}

func (x *Transfer) GetCustomPayload() string {
	if x != nil {
		if x, ok := x.Payload.(*Transfer_CustomPayload); ok {
			return x.CustomPayload
		}
	}
	return ""
}

type isTransfer_Payload interface {
	isTransfer_Payload()
}

type Transfer_JettonTransfer struct {
	// Jetton transfer payload.
	JettonTransfer *JettonTransfer `protobuf:"bytes,7,opt,name=jetton_transfer,json=jettonTransfer,proto3,oneof"`
}

type Transfer_CustomPayload struct {
	// TON transfer with custom payload (contract call). Raw one-cell BoC encoded in Base64.
	CustomPayload string `protobuf:"bytes,8,opt,name=custom_payload,json=customPayload,proto3,oneof"`
}

func (*Transfer_JettonTransfer) isTransfer_Payload() {}

func (*Transfer_CustomPayload) isTransfer_Payload() {}

type JettonTransfer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Arbitrary request number. Default is 0. Optional field.
	QueryId uint64 `protobuf:"varint,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	// Amount of transferred jettons in elementary integer units. The real value transferred is jetton_amount multiplied by ten to the power of token decimal precision
	JettonAmount uint64 `protobuf:"varint,2,opt,name=jetton_amount,json=jettonAmount,proto3" json:"jetton_amount,omitempty"`
	// Address of the new owner of the jettons.
	ToOwner string `protobuf:"bytes,3,opt,name=to_owner,json=toOwner,proto3" json:"to_owner,omitempty"`
	// Address where to send a response with confirmation of a successful transfer and the rest of the incoming message Toncoins. Usually the sender should get back their toncoins.
	ResponseAddress string `protobuf:"bytes,4,opt,name=response_address,json=responseAddress,proto3" json:"response_address,omitempty"`
	// Amount in nanotons to forward to recipient. Basically minimum amount - 1 nanoton should be used
	ForwardAmount uint64 `protobuf:"varint,5,opt,name=forward_amount,json=forwardAmount,proto3" json:"forward_amount,omitempty"`
	// Optional raw one-cell BoC encoded in Base64.
	// Can be used in the case of mintless jetton transfers.
	CustomPayload string `protobuf:"bytes,6,opt,name=custom_payload,json=customPayload,proto3" json:"custom_payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JettonTransfer) Reset() {
	*x = JettonTransfer{}
	mi := &file_TheOpenNetwork_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JettonTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JettonTransfer) ProtoMessage() {}

func (x *JettonTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_TheOpenNetwork_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JettonTransfer.ProtoReflect.Descriptor instead.
func (*JettonTransfer) Descriptor() ([]byte, []int) {
	return file_TheOpenNetwork_proto_rawDescGZIP(), []int{1}
}

func (x *JettonTransfer) GetQueryId() uint64 {
	if x != nil {
		return x.QueryId
	}
	return 0
}

func (x *JettonTransfer) GetJettonAmount() uint64 {
	if x != nil {
		return x.JettonAmount
	}
	return 0
}

func (x *JettonTransfer) GetToOwner() string {
	if x != nil {
		return x.ToOwner
	}
	return ""
}

func (x *JettonTransfer) GetResponseAddress() string {
	if x != nil {
		return x.ResponseAddress
	}
	return ""
}

func (x *JettonTransfer) GetForwardAmount() uint64 {
	if x != nil {
		return x.ForwardAmount
	}
	return 0
}

func (x *JettonTransfer) GetCustomPayload() string {
	if x != nil {
		return x.CustomPayload
	}
	return ""
}

type SigningInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The secret private key used for signing (32 bytes).
	PrivateKey []byte `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// Public key of the signer (32 bytes). Used when transaction is going to be signed externally.
	PublicKey []byte `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// Up to 4 internal messages.
	Messages []*Transfer `protobuf:"bytes,3,rep,name=messages,proto3" json:"messages,omitempty"`
	// Message counter (optional, 0 by default used for the first deploy)
	// This field is required, because we need to protect the smart contract against "replay attacks"
	// Learn more: https://ton.org/docs/develop/smart-contracts/guidelines/external-messages
	SequenceNumber uint32 `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// Expiration UNIX timestamp (optional, now() + 60 by default)
	ExpireAt uint32 `protobuf:"varint,5,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	// Wallet version
	WalletVersion WalletVersion `protobuf:"varint,6,opt,name=wallet_version,json=walletVersion,proto3,enum=TW.TheOpenNetwork.Proto.WalletVersion" json:"wallet_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningInput) Reset() {
	*x = SigningInput{}
	mi := &file_TheOpenNetwork_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningInput) ProtoMessage() {}

func (x *SigningInput) ProtoReflect() protoreflect.Message {
	mi := &file_TheOpenNetwork_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningInput.ProtoReflect.Descriptor instead.
func (*SigningInput) Descriptor() ([]byte, []int) {
	return file_TheOpenNetwork_proto_rawDescGZIP(), []int{2}
}

func (x *SigningInput) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *SigningInput) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *SigningInput) GetMessages() []*Transfer {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *SigningInput) GetSequenceNumber() uint32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *SigningInput) GetExpireAt() uint32 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

func (x *SigningInput) GetWalletVersion() WalletVersion {
	if x != nil {
		return x.WalletVersion
	}
	return WalletVersion_WALLET_V3_R1
}

// Transaction signing output.
type SigningOutput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Signed and base64 encoded BOC message
	Encoded string `protobuf:"bytes,1,opt,name=encoded,proto3" json:"encoded,omitempty"`
	// Transaction Cell hash
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// error code, 0 is ok, other codes will be treated as errors
	Error common.SigningError `protobuf:"varint,3,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// error code description
	ErrorMessage  string `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningOutput) Reset() {
	*x = SigningOutput{}
	mi := &file_TheOpenNetwork_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningOutput) ProtoMessage() {}

func (x *SigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_TheOpenNetwork_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningOutput.ProtoReflect.Descriptor instead.
func (*SigningOutput) Descriptor() ([]byte, []int) {
	return file_TheOpenNetwork_proto_rawDescGZIP(), []int{3}
}

func (x *SigningOutput) GetEncoded() string {
	if x != nil {
		return x.Encoded
	}
	return ""
}

func (x *SigningOutput) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *SigningOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *SigningOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_TheOpenNetwork_proto protoreflect.FileDescriptor

const file_TheOpenNetwork_proto_rawDesc = "" +
	"\n" +
	"\x14TheOpenNetwork.proto\x12\x17TW.TheOpenNetwork.Proto\x1a\fCommon.proto\"\xab\x02\n" +
	"\bTransfer\x12\x12\n" +
	"\x04dest\x18\x01 \x01(\tR\x04dest\x12\x16\n" +
	"\x06amount\x18\x02 \x01(\x04R\x06amount\x12\x12\n" +
	"\x04mode\x18\x03 \x01(\rR\x04mode\x12\x18\n" +
	"\acomment\x18\x04 \x01(\tR\acomment\x12\x1e\n" +
	"\n" +
	"bounceable\x18\x05 \x01(\bR\n" +
	"bounceable\x12\x1d\n" +
	"\n" +
	"state_init\x18\x06 \x01(\tR\tstateInit\x12R\n" +
	"\x0fjetton_transfer\x18\a \x01(\v2'.TW.TheOpenNetwork.Proto.JettonTransferH\x00R\x0ejettonTransfer\x12'\n" +
	"\x0ecustom_payload\x18\b \x01(\tH\x00R\rcustomPayloadB\t\n" +
	"\apayload\"\xe4\x01\n" +
	"\x0eJettonTransfer\x12\x19\n" +
	"\bquery_id\x18\x01 \x01(\x04R\aqueryId\x12#\n" +
	"\rjetton_amount\x18\x02 \x01(\x04R\fjettonAmount\x12\x19\n" +
	"\bto_owner\x18\x03 \x01(\tR\atoOwner\x12)\n" +
	"\x10response_address\x18\x04 \x01(\tR\x0fresponseAddress\x12%\n" +
	"\x0eforward_amount\x18\x05 \x01(\x04R\rforwardAmount\x12%\n" +
	"\x0ecustom_payload\x18\x06 \x01(\tR\rcustomPayload\"\xa2\x02\n" +
	"\fSigningInput\x12\x1f\n" +
	"\vprivate_key\x18\x01 \x01(\fR\n" +
	"privateKey\x12\x1d\n" +
	"\n" +
	"public_key\x18\x02 \x01(\fR\tpublicKey\x12=\n" +
	"\bmessages\x18\x03 \x03(\v2!.TW.TheOpenNetwork.Proto.TransferR\bmessages\x12'\n" +
	"\x0fsequence_number\x18\x04 \x01(\rR\x0esequenceNumber\x12\x1b\n" +
	"\texpire_at\x18\x05 \x01(\rR\bexpireAt\x12M\n" +
	"\x0ewallet_version\x18\x06 \x01(\x0e2&.TW.TheOpenNetwork.Proto.WalletVersionR\rwalletVersion\"\x97\x01\n" +
	"\rSigningOutput\x12\x18\n" +
	"\aencoded\x18\x01 \x01(\tR\aencoded\x12\x12\n" +
	"\x04hash\x18\x02 \x01(\fR\x04hash\x123\n" +
	"\x05error\x18\x03 \x01(\x0e2\x1d.TW.Common.Proto.SigningErrorR\x05error\x12#\n" +
	"\rerror_message\x18\x04 \x01(\tR\ferrorMessage*W\n" +
	"\rWalletVersion\x12\x10\n" +
	"\fWALLET_V3_R1\x10\x00\x12\x10\n" +
	"\fWALLET_V3_R2\x10\x01\x12\x10\n" +
	"\fWALLET_V4_R2\x10\x02\x12\x10\n" +
	"\fWALLET_V5_R1\x10\x03*\xb5\x01\n" +
	"\bSendMode\x12\v\n" +
	"\aDEFAULT\x10\x00\x12\x17\n" +
	"\x13PAY_FEES_SEPARATELY\x10\x01\x12\x1e\n" +
	"\x1aIGNORE_ACTION_PHASE_ERRORS\x10\x02\x12\x1b\n" +
	"\x17DESTROY_ON_ZERO_BALANCE\x10 \x12$\n" +
	" ATTACH_ALL_INBOUND_MESSAGE_VALUE\x10@\x12 \n" +
	"\x1bATTACH_ALL_CONTRACT_BALANCE\x10\x80\x01B\x17\n" +
	"\x15wallet.core.jni.protob\x06proto3"

var (
	file_TheOpenNetwork_proto_rawDescOnce sync.Once
	file_TheOpenNetwork_proto_rawDescData []byte
)

func file_TheOpenNetwork_proto_rawDescGZIP() []byte {
	file_TheOpenNetwork_proto_rawDescOnce.Do(func() {
		file_TheOpenNetwork_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_TheOpenNetwork_proto_rawDesc), len(file_TheOpenNetwork_proto_rawDesc)))
	})
	return file_TheOpenNetwork_proto_rawDescData
}

var file_TheOpenNetwork_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_TheOpenNetwork_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_TheOpenNetwork_proto_goTypes = []any{
	(WalletVersion)(0),       // 0: TW.TheOpenNetwork.Proto.WalletVersion
	(SendMode)(0),            // 1: TW.TheOpenNetwork.Proto.SendMode
	(*Transfer)(nil),         // 2: TW.TheOpenNetwork.Proto.Transfer
	(*JettonTransfer)(nil),   // 3: TW.TheOpenNetwork.Proto.JettonTransfer
	(*SigningInput)(nil),     // 4: TW.TheOpenNetwork.Proto.SigningInput
	(*SigningOutput)(nil),    // 5: TW.TheOpenNetwork.Proto.SigningOutput
	(common.SigningError)(0), // 6: TW.Common.Proto.SigningError
}
var file_TheOpenNetwork_proto_depIdxs = []int32{
	3, // 0: TW.TheOpenNetwork.Proto.Transfer.jetton_transfer:type_name -> TW.TheOpenNetwork.Proto.JettonTransfer
	2, // 1: TW.TheOpenNetwork.Proto.SigningInput.messages:type_name -> TW.TheOpenNetwork.Proto.Transfer
	0, // 2: TW.TheOpenNetwork.Proto.SigningInput.wallet_version:type_name -> TW.TheOpenNetwork.Proto.WalletVersion
	6, // 3: TW.TheOpenNetwork.Proto.SigningOutput.error:type_name -> TW.Common.Proto.SigningError
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_TheOpenNetwork_proto_init() }
func file_TheOpenNetwork_proto_init() {
	if File_TheOpenNetwork_proto != nil {
		return
	}
	file_TheOpenNetwork_proto_msgTypes[0].OneofWrappers = []any{
		(*Transfer_JettonTransfer)(nil),
		(*Transfer_CustomPayload)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_TheOpenNetwork_proto_rawDesc), len(file_TheOpenNetwork_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_TheOpenNetwork_proto_goTypes,
		DependencyIndexes: file_TheOpenNetwork_proto_depIdxs,
		EnumInfos:         file_TheOpenNetwork_proto_enumTypes,
		MessageInfos:      file_TheOpenNetwork_proto_msgTypes,
	}.Build()
	File_TheOpenNetwork_proto = out.File
	file_TheOpenNetwork_proto_goTypes = nil
	file_TheOpenNetwork_proto_depIdxs = nil
}
