// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.20.3
// source: Ontology.proto

package ontology

import (
	common "github.com/Cramiumlabs/wallet-core/wrapper/go-wrapper/protos/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Input data necessary to create a signed transaction.
type SigningInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Contract ID, e.g. "ONT"
	Contract string `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	// Method, e.g. "transfer"
	Method string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	// The secret private key used for signing (32 bytes).
	OwnerPrivateKey []byte `protobuf:"bytes,3,opt,name=owner_private_key,json=ownerPrivateKey,proto3" json:"owner_private_key,omitempty"`
	// base58 encode address string (160-bit number)
	ToAddress string `protobuf:"bytes,4,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// Transfer amount
	Amount uint64 `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// Private key of the payer
	PayerPrivateKey []byte `protobuf:"bytes,6,opt,name=payer_private_key,json=payerPrivateKey,proto3" json:"payer_private_key,omitempty"`
	// Gas price
	GasPrice uint64 `protobuf:"varint,7,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	// Limit for gas used
	GasLimit uint64 `protobuf:"varint,8,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	// base58 encode address string (160-bit number)
	QueryAddress string `protobuf:"bytes,9,opt,name=query_address,json=queryAddress,proto3" json:"query_address,omitempty"`
	// Nonce (should be larger than in the last transaction of the account)
	Nonce uint32 `protobuf:"varint,10,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// base58 encode address string (160-bit number)
	OwnerAddress string `protobuf:"bytes,11,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	// base58 encode address string (160-bit number)
	PayerAddress  string `protobuf:"bytes,12,opt,name=payer_address,json=payerAddress,proto3" json:"payer_address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningInput) Reset() {
	*x = SigningInput{}
	mi := &file_Ontology_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningInput) ProtoMessage() {}

func (x *SigningInput) ProtoReflect() protoreflect.Message {
	mi := &file_Ontology_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningInput.ProtoReflect.Descriptor instead.
func (*SigningInput) Descriptor() ([]byte, []int) {
	return file_Ontology_proto_rawDescGZIP(), []int{0}
}

func (x *SigningInput) GetContract() string {
	if x != nil {
		return x.Contract
	}
	return ""
}

func (x *SigningInput) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *SigningInput) GetOwnerPrivateKey() []byte {
	if x != nil {
		return x.OwnerPrivateKey
	}
	return nil
}

func (x *SigningInput) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *SigningInput) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SigningInput) GetPayerPrivateKey() []byte {
	if x != nil {
		return x.PayerPrivateKey
	}
	return nil
}

func (x *SigningInput) GetGasPrice() uint64 {
	if x != nil {
		return x.GasPrice
	}
	return 0
}

func (x *SigningInput) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *SigningInput) GetQueryAddress() string {
	if x != nil {
		return x.QueryAddress
	}
	return ""
}

func (x *SigningInput) GetNonce() uint32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *SigningInput) GetOwnerAddress() string {
	if x != nil {
		return x.OwnerAddress
	}
	return ""
}

func (x *SigningInput) GetPayerAddress() string {
	if x != nil {
		return x.PayerAddress
	}
	return ""
}

// Result containing the signed and encoded transaction.
type SigningOutput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Signed and encoded transaction bytes.
	Encoded []byte `protobuf:"bytes,1,opt,name=encoded,proto3" json:"encoded,omitempty"`
	// error code, 0 is ok, other codes will be treated as errors
	Error common.SigningError `protobuf:"varint,2,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// error code description
	ErrorMessage  string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningOutput) Reset() {
	*x = SigningOutput{}
	mi := &file_Ontology_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningOutput) ProtoMessage() {}

func (x *SigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_Ontology_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningOutput.ProtoReflect.Descriptor instead.
func (*SigningOutput) Descriptor() ([]byte, []int) {
	return file_Ontology_proto_rawDescGZIP(), []int{1}
}

func (x *SigningOutput) GetEncoded() []byte {
	if x != nil {
		return x.Encoded
	}
	return nil
}

func (x *SigningOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *SigningOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_Ontology_proto protoreflect.FileDescriptor

const file_Ontology_proto_rawDesc = "" +
	"\n" +
	"\x0eOntology.proto\x12\x11TW.Ontology.Proto\x1a\fCommon.proto\"\x90\x03\n" +
	"\fSigningInput\x12\x1a\n" +
	"\bcontract\x18\x01 \x01(\tR\bcontract\x12\x16\n" +
	"\x06method\x18\x02 \x01(\tR\x06method\x12*\n" +
	"\x11owner_private_key\x18\x03 \x01(\fR\x0fownerPrivateKey\x12\x1d\n" +
	"\n" +
	"to_address\x18\x04 \x01(\tR\ttoAddress\x12\x16\n" +
	"\x06amount\x18\x05 \x01(\x04R\x06amount\x12*\n" +
	"\x11payer_private_key\x18\x06 \x01(\fR\x0fpayerPrivateKey\x12\x1b\n" +
	"\tgas_price\x18\a \x01(\x04R\bgasPrice\x12\x1b\n" +
	"\tgas_limit\x18\b \x01(\x04R\bgasLimit\x12#\n" +
	"\rquery_address\x18\t \x01(\tR\fqueryAddress\x12\x14\n" +
	"\x05nonce\x18\n" +
	" \x01(\rR\x05nonce\x12#\n" +
	"\rowner_address\x18\v \x01(\tR\fownerAddress\x12#\n" +
	"\rpayer_address\x18\f \x01(\tR\fpayerAddress\"\x83\x01\n" +
	"\rSigningOutput\x12\x18\n" +
	"\aencoded\x18\x01 \x01(\fR\aencoded\x123\n" +
	"\x05error\x18\x02 \x01(\x0e2\x1d.TW.Common.Proto.SigningErrorR\x05error\x12#\n" +
	"\rerror_message\x18\x03 \x01(\tR\ferrorMessageB\x17\n" +
	"\x15wallet.core.jni.protob\x06proto3"

var (
	file_Ontology_proto_rawDescOnce sync.Once
	file_Ontology_proto_rawDescData []byte
)

func file_Ontology_proto_rawDescGZIP() []byte {
	file_Ontology_proto_rawDescOnce.Do(func() {
		file_Ontology_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_Ontology_proto_rawDesc), len(file_Ontology_proto_rawDesc)))
	})
	return file_Ontology_proto_rawDescData
}

var file_Ontology_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_Ontology_proto_goTypes = []any{
	(*SigningInput)(nil),     // 0: TW.Ontology.Proto.SigningInput
	(*SigningOutput)(nil),    // 1: TW.Ontology.Proto.SigningOutput
	(common.SigningError)(0), // 2: TW.Common.Proto.SigningError
}
var file_Ontology_proto_depIdxs = []int32{
	2, // 0: TW.Ontology.Proto.SigningOutput.error:type_name -> TW.Common.Proto.SigningError
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_Ontology_proto_init() }
func file_Ontology_proto_init() {
	if File_Ontology_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_Ontology_proto_rawDesc), len(file_Ontology_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Ontology_proto_goTypes,
		DependencyIndexes: file_Ontology_proto_depIdxs,
		MessageInfos:      file_Ontology_proto_msgTypes,
	}.Build()
	File_Ontology_proto = out.File
	file_Ontology_proto_goTypes = nil
	file_Ontology_proto_depIdxs = nil
}
