// SPDX-License-Identifier: Apache-2.0
//
// Copyright Â© 2017 Trust Wallet.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.20.3
// source: Nervos.proto

package nervos

import (
	common "github.com/Cramiumlabs/wallet-core/wrapper/go-wrapper/protos/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Nervos transaction plan
type TransactionPlan struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of cell deps.
	CellDeps []*CellDep `protobuf:"bytes,1,rep,name=cell_deps,json=cellDeps,proto3" json:"cell_deps,omitempty"`
	// A list of header deps.
	HeaderDeps [][]byte `protobuf:"bytes,2,rep,name=header_deps,json=headerDeps,proto3" json:"header_deps,omitempty"`
	// A list of 1 or more selected cells for this transaction
	SelectedCells []*Cell `protobuf:"bytes,3,rep,name=selected_cells,json=selectedCells,proto3" json:"selected_cells,omitempty"`
	// A list of 1 or more outputs by this transaction
	Outputs []*CellOutput `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// A list of outputs data.
	OutputsData [][]byte `protobuf:"bytes,5,rep,name=outputs_data,json=outputsData,proto3" json:"outputs_data,omitempty"`
	// Optional error
	Error         common.SigningError `protobuf:"varint,6,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionPlan) Reset() {
	*x = TransactionPlan{}
	mi := &file_Nervos_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionPlan) ProtoMessage() {}

func (x *TransactionPlan) ProtoReflect() protoreflect.Message {
	mi := &file_Nervos_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionPlan.ProtoReflect.Descriptor instead.
func (*TransactionPlan) Descriptor() ([]byte, []int) {
	return file_Nervos_proto_rawDescGZIP(), []int{0}
}

func (x *TransactionPlan) GetCellDeps() []*CellDep {
	if x != nil {
		return x.CellDeps
	}
	return nil
}

func (x *TransactionPlan) GetHeaderDeps() [][]byte {
	if x != nil {
		return x.HeaderDeps
	}
	return nil
}

func (x *TransactionPlan) GetSelectedCells() []*Cell {
	if x != nil {
		return x.SelectedCells
	}
	return nil
}

func (x *TransactionPlan) GetOutputs() []*CellOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *TransactionPlan) GetOutputsData() [][]byte {
	if x != nil {
		return x.OutputsData
	}
	return nil
}

func (x *TransactionPlan) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

// Nervos cell dep.
type CellDep struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Prevents the transaction to be mined before an absolute or relative time
	DepType string `protobuf:"bytes,1,opt,name=dep_type,json=depType,proto3" json:"dep_type,omitempty"`
	// Reference to the previous transaction's output.
	OutPoint      *OutPoint `protobuf:"bytes,2,opt,name=out_point,json=outPoint,proto3" json:"out_point,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CellDep) Reset() {
	*x = CellDep{}
	mi := &file_Nervos_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CellDep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellDep) ProtoMessage() {}

func (x *CellDep) ProtoReflect() protoreflect.Message {
	mi := &file_Nervos_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellDep.ProtoReflect.Descriptor instead.
func (*CellDep) Descriptor() ([]byte, []int) {
	return file_Nervos_proto_rawDescGZIP(), []int{1}
}

func (x *CellDep) GetDepType() string {
	if x != nil {
		return x.DepType
	}
	return ""
}

func (x *CellDep) GetOutPoint() *OutPoint {
	if x != nil {
		return x.OutPoint
	}
	return nil
}

// Nervos transaction out-point reference.
type OutPoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The hash of the referenced transaction.
	TxHash []byte `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// The index of the specific output in the transaction.
	Index         uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OutPoint) Reset() {
	*x = OutPoint{}
	mi := &file_Nervos_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutPoint) ProtoMessage() {}

func (x *OutPoint) ProtoReflect() protoreflect.Message {
	mi := &file_Nervos_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutPoint.ProtoReflect.Descriptor instead.
func (*OutPoint) Descriptor() ([]byte, []int) {
	return file_Nervos_proto_rawDescGZIP(), []int{2}
}

func (x *OutPoint) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *OutPoint) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// Nervos cell output.
type CellOutput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Transaction amount.
	Capacity uint64 `protobuf:"varint,1,opt,name=capacity,proto3" json:"capacity,omitempty"`
	// Lock script
	Lock *Script `protobuf:"bytes,2,opt,name=lock,proto3" json:"lock,omitempty"`
	// Type script
	Type          *Script `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CellOutput) Reset() {
	*x = CellOutput{}
	mi := &file_Nervos_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CellOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellOutput) ProtoMessage() {}

func (x *CellOutput) ProtoReflect() protoreflect.Message {
	mi := &file_Nervos_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellOutput.ProtoReflect.Descriptor instead.
func (*CellOutput) Descriptor() ([]byte, []int) {
	return file_Nervos_proto_rawDescGZIP(), []int{3}
}

func (x *CellOutput) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *CellOutput) GetLock() *Script {
	if x != nil {
		return x.Lock
	}
	return nil
}

func (x *CellOutput) GetType() *Script {
	if x != nil {
		return x.Type
	}
	return nil
}

// Nervos script
type Script struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Code hash
	CodeHash []byte `protobuf:"bytes,1,opt,name=code_hash,json=codeHash,proto3" json:"code_hash,omitempty"`
	// Hash type
	HashType string `protobuf:"bytes,2,opt,name=hash_type,json=hashType,proto3" json:"hash_type,omitempty"`
	// args
	Args          []byte `protobuf:"bytes,3,opt,name=args,proto3" json:"args,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Script) Reset() {
	*x = Script{}
	mi := &file_Nervos_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Script) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Script) ProtoMessage() {}

func (x *Script) ProtoReflect() protoreflect.Message {
	mi := &file_Nervos_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Script.ProtoReflect.Descriptor instead.
func (*Script) Descriptor() ([]byte, []int) {
	return file_Nervos_proto_rawDescGZIP(), []int{4}
}

func (x *Script) GetCodeHash() []byte {
	if x != nil {
		return x.CodeHash
	}
	return nil
}

func (x *Script) GetHashType() string {
	if x != nil {
		return x.HashType
	}
	return ""
}

func (x *Script) GetArgs() []byte {
	if x != nil {
		return x.Args
	}
	return nil
}

// Transfer of native asset
type NativeTransfer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Recipient's address.
	ToAddress string `protobuf:"bytes,1,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// Change address.
	ChangeAddress string `protobuf:"bytes,2,opt,name=change_address,json=changeAddress,proto3" json:"change_address,omitempty"`
	// Amount to send.
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// If sending max amount.
	UseMaxAmount  bool `protobuf:"varint,4,opt,name=use_max_amount,json=useMaxAmount,proto3" json:"use_max_amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NativeTransfer) Reset() {
	*x = NativeTransfer{}
	mi := &file_Nervos_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NativeTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeTransfer) ProtoMessage() {}

func (x *NativeTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_Nervos_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeTransfer.ProtoReflect.Descriptor instead.
func (*NativeTransfer) Descriptor() ([]byte, []int) {
	return file_Nervos_proto_rawDescGZIP(), []int{5}
}

func (x *NativeTransfer) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *NativeTransfer) GetChangeAddress() string {
	if x != nil {
		return x.ChangeAddress
	}
	return ""
}

func (x *NativeTransfer) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *NativeTransfer) GetUseMaxAmount() bool {
	if x != nil {
		return x.UseMaxAmount
	}
	return false
}

// Token transfer (SUDT)
type SudtTransfer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Recipient's address.
	ToAddress string `protobuf:"bytes,1,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// Change address.
	ChangeAddress string `protobuf:"bytes,2,opt,name=change_address,json=changeAddress,proto3" json:"change_address,omitempty"`
	// SUDT (Simple User Defined Token) address
	SudtAddress []byte `protobuf:"bytes,3,opt,name=sudt_address,json=sudtAddress,proto3" json:"sudt_address,omitempty"`
	// Amount to send.
	Amount string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// If sending max amount.
	UseMaxAmount  bool `protobuf:"varint,5,opt,name=use_max_amount,json=useMaxAmount,proto3" json:"use_max_amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SudtTransfer) Reset() {
	*x = SudtTransfer{}
	mi := &file_Nervos_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SudtTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SudtTransfer) ProtoMessage() {}

func (x *SudtTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_Nervos_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SudtTransfer.ProtoReflect.Descriptor instead.
func (*SudtTransfer) Descriptor() ([]byte, []int) {
	return file_Nervos_proto_rawDescGZIP(), []int{6}
}

func (x *SudtTransfer) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *SudtTransfer) GetChangeAddress() string {
	if x != nil {
		return x.ChangeAddress
	}
	return ""
}

func (x *SudtTransfer) GetSudtAddress() []byte {
	if x != nil {
		return x.SudtAddress
	}
	return nil
}

func (x *SudtTransfer) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *SudtTransfer) GetUseMaxAmount() bool {
	if x != nil {
		return x.UseMaxAmount
	}
	return false
}

// Deposit
type DaoDeposit struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Recipient's address.
	ToAddress string `protobuf:"bytes,1,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// Change address.
	ChangeAddress string `protobuf:"bytes,2,opt,name=change_address,json=changeAddress,proto3" json:"change_address,omitempty"`
	// Amount to deposit.
	Amount        uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DaoDeposit) Reset() {
	*x = DaoDeposit{}
	mi := &file_Nervos_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DaoDeposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaoDeposit) ProtoMessage() {}

func (x *DaoDeposit) ProtoReflect() protoreflect.Message {
	mi := &file_Nervos_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaoDeposit.ProtoReflect.Descriptor instead.
func (*DaoDeposit) Descriptor() ([]byte, []int) {
	return file_Nervos_proto_rawDescGZIP(), []int{7}
}

func (x *DaoDeposit) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *DaoDeposit) GetChangeAddress() string {
	if x != nil {
		return x.ChangeAddress
	}
	return ""
}

func (x *DaoDeposit) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type DaoWithdrawPhase1 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deposit cell
	DepositCell *Cell `protobuf:"bytes,1,opt,name=deposit_cell,json=depositCell,proto3" json:"deposit_cell,omitempty"`
	// Change address.
	ChangeAddress string `protobuf:"bytes,2,opt,name=change_address,json=changeAddress,proto3" json:"change_address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DaoWithdrawPhase1) Reset() {
	*x = DaoWithdrawPhase1{}
	mi := &file_Nervos_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DaoWithdrawPhase1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaoWithdrawPhase1) ProtoMessage() {}

func (x *DaoWithdrawPhase1) ProtoReflect() protoreflect.Message {
	mi := &file_Nervos_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaoWithdrawPhase1.ProtoReflect.Descriptor instead.
func (*DaoWithdrawPhase1) Descriptor() ([]byte, []int) {
	return file_Nervos_proto_rawDescGZIP(), []int{8}
}

func (x *DaoWithdrawPhase1) GetDepositCell() *Cell {
	if x != nil {
		return x.DepositCell
	}
	return nil
}

func (x *DaoWithdrawPhase1) GetChangeAddress() string {
	if x != nil {
		return x.ChangeAddress
	}
	return ""
}

type DaoWithdrawPhase2 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deposit cell
	DepositCell *Cell `protobuf:"bytes,1,opt,name=deposit_cell,json=depositCell,proto3" json:"deposit_cell,omitempty"`
	// Withdrawing cell
	WithdrawingCell *Cell `protobuf:"bytes,2,opt,name=withdrawing_cell,json=withdrawingCell,proto3" json:"withdrawing_cell,omitempty"`
	// Amount
	Amount        uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DaoWithdrawPhase2) Reset() {
	*x = DaoWithdrawPhase2{}
	mi := &file_Nervos_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DaoWithdrawPhase2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaoWithdrawPhase2) ProtoMessage() {}

func (x *DaoWithdrawPhase2) ProtoReflect() protoreflect.Message {
	mi := &file_Nervos_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaoWithdrawPhase2.ProtoReflect.Descriptor instead.
func (*DaoWithdrawPhase2) Descriptor() ([]byte, []int) {
	return file_Nervos_proto_rawDescGZIP(), []int{9}
}

func (x *DaoWithdrawPhase2) GetDepositCell() *Cell {
	if x != nil {
		return x.DepositCell
	}
	return nil
}

func (x *DaoWithdrawPhase2) GetWithdrawingCell() *Cell {
	if x != nil {
		return x.WithdrawingCell
	}
	return nil
}

func (x *DaoWithdrawPhase2) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// Input data necessary to create a signed transaction.
type SigningInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Transaction fee per byte.
	ByteFee uint64 `protobuf:"varint,1,opt,name=byte_fee,json=byteFee,proto3" json:"byte_fee,omitempty"`
	// The available secret private keys used for signing (32 bytes each).
	PrivateKey [][]byte `protobuf:"bytes,2,rep,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// Available unspent cell outputs.
	Cell []*Cell `protobuf:"bytes,3,rep,name=cell,proto3" json:"cell,omitempty"`
	// Optional transaction plan
	Plan *TransactionPlan `protobuf:"bytes,4,opt,name=plan,proto3" json:"plan,omitempty"`
	// The payload transfer
	//
	// Types that are valid to be assigned to OperationOneof:
	//
	//	*SigningInput_NativeTransfer
	//	*SigningInput_SudtTransfer
	//	*SigningInput_DaoDeposit
	//	*SigningInput_DaoWithdrawPhase1
	//	*SigningInput_DaoWithdrawPhase2
	OperationOneof isSigningInput_OperationOneof `protobuf_oneof:"operation_oneof"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SigningInput) Reset() {
	*x = SigningInput{}
	mi := &file_Nervos_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningInput) ProtoMessage() {}

func (x *SigningInput) ProtoReflect() protoreflect.Message {
	mi := &file_Nervos_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningInput.ProtoReflect.Descriptor instead.
func (*SigningInput) Descriptor() ([]byte, []int) {
	return file_Nervos_proto_rawDescGZIP(), []int{10}
}

func (x *SigningInput) GetByteFee() uint64 {
	if x != nil {
		return x.ByteFee
	}
	return 0
}

func (x *SigningInput) GetPrivateKey() [][]byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *SigningInput) GetCell() []*Cell {
	if x != nil {
		return x.Cell
	}
	return nil
}

func (x *SigningInput) GetPlan() *TransactionPlan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *SigningInput) GetOperationOneof() isSigningInput_OperationOneof {
	if x != nil {
		return x.OperationOneof
	}
	return nil
}

func (x *SigningInput) GetNativeTransfer() *NativeTransfer {
	if x != nil {
		if x, ok := x.OperationOneof.(*SigningInput_NativeTransfer); ok {
			return x.NativeTransfer
		}
	}
	return nil
}

func (x *SigningInput) GetSudtTransfer() *SudtTransfer {
	if x != nil {
		if x, ok := x.OperationOneof.(*SigningInput_SudtTransfer); ok {
			return x.SudtTransfer
		}
	}
	return nil
}

func (x *SigningInput) GetDaoDeposit() *DaoDeposit {
	if x != nil {
		if x, ok := x.OperationOneof.(*SigningInput_DaoDeposit); ok {
			return x.DaoDeposit
		}
	}
	return nil
}

func (x *SigningInput) GetDaoWithdrawPhase1() *DaoWithdrawPhase1 {
	if x != nil {
		if x, ok := x.OperationOneof.(*SigningInput_DaoWithdrawPhase1); ok {
			return x.DaoWithdrawPhase1
		}
	}
	return nil
}

func (x *SigningInput) GetDaoWithdrawPhase2() *DaoWithdrawPhase2 {
	if x != nil {
		if x, ok := x.OperationOneof.(*SigningInput_DaoWithdrawPhase2); ok {
			return x.DaoWithdrawPhase2
		}
	}
	return nil
}

type isSigningInput_OperationOneof interface {
	isSigningInput_OperationOneof()
}

type SigningInput_NativeTransfer struct {
	NativeTransfer *NativeTransfer `protobuf:"bytes,5,opt,name=native_transfer,json=nativeTransfer,proto3,oneof"`
}

type SigningInput_SudtTransfer struct {
	SudtTransfer *SudtTransfer `protobuf:"bytes,6,opt,name=sudt_transfer,json=sudtTransfer,proto3,oneof"`
}

type SigningInput_DaoDeposit struct {
	DaoDeposit *DaoDeposit `protobuf:"bytes,7,opt,name=dao_deposit,json=daoDeposit,proto3,oneof"`
}

type SigningInput_DaoWithdrawPhase1 struct {
	DaoWithdrawPhase1 *DaoWithdrawPhase1 `protobuf:"bytes,8,opt,name=dao_withdraw_phase1,json=daoWithdrawPhase1,proto3,oneof"`
}

type SigningInput_DaoWithdrawPhase2 struct {
	DaoWithdrawPhase2 *DaoWithdrawPhase2 `protobuf:"bytes,9,opt,name=dao_withdraw_phase2,json=daoWithdrawPhase2,proto3,oneof"`
}

func (*SigningInput_NativeTransfer) isSigningInput_OperationOneof() {}

func (*SigningInput_SudtTransfer) isSigningInput_OperationOneof() {}

func (*SigningInput_DaoDeposit) isSigningInput_OperationOneof() {}

func (*SigningInput_DaoWithdrawPhase1) isSigningInput_OperationOneof() {}

func (*SigningInput_DaoWithdrawPhase2) isSigningInput_OperationOneof() {}

// An unspent cell output, that can serve as input to a transaction
type Cell struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unspent output
	OutPoint *OutPoint `protobuf:"bytes,1,opt,name=out_point,json=outPoint,proto3" json:"out_point,omitempty"`
	// Amount of the cell
	Capacity uint64 `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	// Lock script
	Lock *Script `protobuf:"bytes,3,opt,name=lock,proto3" json:"lock,omitempty"`
	// Type script
	Type *Script `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Data
	Data []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	// Optional block number
	BlockNumber uint64 `protobuf:"varint,6,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	// Optional block hash
	BlockHash []byte `protobuf:"bytes,7,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// Optional since the cell is available to spend
	Since uint64 `protobuf:"varint,8,opt,name=since,proto3" json:"since,omitempty"`
	// Optional input type data to be included in witness
	InputType []byte `protobuf:"bytes,9,opt,name=input_type,json=inputType,proto3" json:"input_type,omitempty"`
	// Optional output type data to be included in witness
	OutputType    []byte `protobuf:"bytes,10,opt,name=output_type,json=outputType,proto3" json:"output_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Cell) Reset() {
	*x = Cell{}
	mi := &file_Nervos_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cell) ProtoMessage() {}

func (x *Cell) ProtoReflect() protoreflect.Message {
	mi := &file_Nervos_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cell.ProtoReflect.Descriptor instead.
func (*Cell) Descriptor() ([]byte, []int) {
	return file_Nervos_proto_rawDescGZIP(), []int{11}
}

func (x *Cell) GetOutPoint() *OutPoint {
	if x != nil {
		return x.OutPoint
	}
	return nil
}

func (x *Cell) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *Cell) GetLock() *Script {
	if x != nil {
		return x.Lock
	}
	return nil
}

func (x *Cell) GetType() *Script {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Cell) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Cell) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Cell) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *Cell) GetSince() uint64 {
	if x != nil {
		return x.Since
	}
	return 0
}

func (x *Cell) GetInputType() []byte {
	if x != nil {
		return x.InputType
	}
	return nil
}

func (x *Cell) GetOutputType() []byte {
	if x != nil {
		return x.OutputType
	}
	return nil
}

// Result containing the signed and encoded transaction.
type SigningOutput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Resulting transaction. Note that the amount may be different than the requested amount to account for fees and available funds.
	TransactionJson string `protobuf:"bytes,1,opt,name=transaction_json,json=transactionJson,proto3" json:"transaction_json,omitempty"`
	// Transaction id
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// Optional error
	Error         common.SigningError `protobuf:"varint,3,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningOutput) Reset() {
	*x = SigningOutput{}
	mi := &file_Nervos_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningOutput) ProtoMessage() {}

func (x *SigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_Nervos_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningOutput.ProtoReflect.Descriptor instead.
func (*SigningOutput) Descriptor() ([]byte, []int) {
	return file_Nervos_proto_rawDescGZIP(), []int{12}
}

func (x *SigningOutput) GetTransactionJson() string {
	if x != nil {
		return x.TransactionJson
	}
	return ""
}

func (x *SigningOutput) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *SigningOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

var File_Nervos_proto protoreflect.FileDescriptor

const file_Nervos_proto_rawDesc = "" +
	"\n" +
	"\fNervos.proto\x12\x0fTW.Nervos.Proto\x1a\fCommon.proto\"\xb6\x02\n" +
	"\x0fTransactionPlan\x125\n" +
	"\tcell_deps\x18\x01 \x03(\v2\x18.TW.Nervos.Proto.CellDepR\bcellDeps\x12\x1f\n" +
	"\vheader_deps\x18\x02 \x03(\fR\n" +
	"headerDeps\x12<\n" +
	"\x0eselected_cells\x18\x03 \x03(\v2\x15.TW.Nervos.Proto.CellR\rselectedCells\x125\n" +
	"\aoutputs\x18\x04 \x03(\v2\x1b.TW.Nervos.Proto.CellOutputR\aoutputs\x12!\n" +
	"\foutputs_data\x18\x05 \x03(\fR\voutputsData\x123\n" +
	"\x05error\x18\x06 \x01(\x0e2\x1d.TW.Common.Proto.SigningErrorR\x05error\"\\\n" +
	"\aCellDep\x12\x19\n" +
	"\bdep_type\x18\x01 \x01(\tR\adepType\x126\n" +
	"\tout_point\x18\x02 \x01(\v2\x19.TW.Nervos.Proto.OutPointR\boutPoint\"9\n" +
	"\bOutPoint\x12\x17\n" +
	"\atx_hash\x18\x01 \x01(\fR\x06txHash\x12\x14\n" +
	"\x05index\x18\x02 \x01(\rR\x05index\"\x82\x01\n" +
	"\n" +
	"CellOutput\x12\x1a\n" +
	"\bcapacity\x18\x01 \x01(\x04R\bcapacity\x12+\n" +
	"\x04lock\x18\x02 \x01(\v2\x17.TW.Nervos.Proto.ScriptR\x04lock\x12+\n" +
	"\x04type\x18\x03 \x01(\v2\x17.TW.Nervos.Proto.ScriptR\x04type\"V\n" +
	"\x06Script\x12\x1b\n" +
	"\tcode_hash\x18\x01 \x01(\fR\bcodeHash\x12\x1b\n" +
	"\thash_type\x18\x02 \x01(\tR\bhashType\x12\x12\n" +
	"\x04args\x18\x03 \x01(\fR\x04args\"\x94\x01\n" +
	"\x0eNativeTransfer\x12\x1d\n" +
	"\n" +
	"to_address\x18\x01 \x01(\tR\ttoAddress\x12%\n" +
	"\x0echange_address\x18\x02 \x01(\tR\rchangeAddress\x12\x16\n" +
	"\x06amount\x18\x03 \x01(\x04R\x06amount\x12$\n" +
	"\x0euse_max_amount\x18\x04 \x01(\bR\fuseMaxAmount\"\xb5\x01\n" +
	"\fSudtTransfer\x12\x1d\n" +
	"\n" +
	"to_address\x18\x01 \x01(\tR\ttoAddress\x12%\n" +
	"\x0echange_address\x18\x02 \x01(\tR\rchangeAddress\x12!\n" +
	"\fsudt_address\x18\x03 \x01(\fR\vsudtAddress\x12\x16\n" +
	"\x06amount\x18\x04 \x01(\tR\x06amount\x12$\n" +
	"\x0euse_max_amount\x18\x05 \x01(\bR\fuseMaxAmount\"j\n" +
	"\n" +
	"DaoDeposit\x12\x1d\n" +
	"\n" +
	"to_address\x18\x01 \x01(\tR\ttoAddress\x12%\n" +
	"\x0echange_address\x18\x02 \x01(\tR\rchangeAddress\x12\x16\n" +
	"\x06amount\x18\x03 \x01(\x04R\x06amount\"t\n" +
	"\x11DaoWithdrawPhase1\x128\n" +
	"\fdeposit_cell\x18\x01 \x01(\v2\x15.TW.Nervos.Proto.CellR\vdepositCell\x12%\n" +
	"\x0echange_address\x18\x02 \x01(\tR\rchangeAddress\"\xa7\x01\n" +
	"\x11DaoWithdrawPhase2\x128\n" +
	"\fdeposit_cell\x18\x01 \x01(\v2\x15.TW.Nervos.Proto.CellR\vdepositCell\x12@\n" +
	"\x10withdrawing_cell\x18\x02 \x01(\v2\x15.TW.Nervos.Proto.CellR\x0fwithdrawingCell\x12\x16\n" +
	"\x06amount\x18\x03 \x01(\x04R\x06amount\"\xbc\x04\n" +
	"\fSigningInput\x12\x19\n" +
	"\bbyte_fee\x18\x01 \x01(\x04R\abyteFee\x12\x1f\n" +
	"\vprivate_key\x18\x02 \x03(\fR\n" +
	"privateKey\x12)\n" +
	"\x04cell\x18\x03 \x03(\v2\x15.TW.Nervos.Proto.CellR\x04cell\x124\n" +
	"\x04plan\x18\x04 \x01(\v2 .TW.Nervos.Proto.TransactionPlanR\x04plan\x12J\n" +
	"\x0fnative_transfer\x18\x05 \x01(\v2\x1f.TW.Nervos.Proto.NativeTransferH\x00R\x0enativeTransfer\x12D\n" +
	"\rsudt_transfer\x18\x06 \x01(\v2\x1d.TW.Nervos.Proto.SudtTransferH\x00R\fsudtTransfer\x12>\n" +
	"\vdao_deposit\x18\a \x01(\v2\x1b.TW.Nervos.Proto.DaoDepositH\x00R\n" +
	"daoDeposit\x12T\n" +
	"\x13dao_withdraw_phase1\x18\b \x01(\v2\".TW.Nervos.Proto.DaoWithdrawPhase1H\x00R\x11daoWithdrawPhase1\x12T\n" +
	"\x13dao_withdraw_phase2\x18\t \x01(\v2\".TW.Nervos.Proto.DaoWithdrawPhase2H\x00R\x11daoWithdrawPhase2B\x11\n" +
	"\x0foperation_oneof\"\xe0\x02\n" +
	"\x04Cell\x126\n" +
	"\tout_point\x18\x01 \x01(\v2\x19.TW.Nervos.Proto.OutPointR\boutPoint\x12\x1a\n" +
	"\bcapacity\x18\x02 \x01(\x04R\bcapacity\x12+\n" +
	"\x04lock\x18\x03 \x01(\v2\x17.TW.Nervos.Proto.ScriptR\x04lock\x12+\n" +
	"\x04type\x18\x04 \x01(\v2\x17.TW.Nervos.Proto.ScriptR\x04type\x12\x12\n" +
	"\x04data\x18\x05 \x01(\fR\x04data\x12!\n" +
	"\fblock_number\x18\x06 \x01(\x04R\vblockNumber\x12\x1d\n" +
	"\n" +
	"block_hash\x18\a \x01(\fR\tblockHash\x12\x14\n" +
	"\x05since\x18\b \x01(\x04R\x05since\x12\x1d\n" +
	"\n" +
	"input_type\x18\t \x01(\fR\tinputType\x12\x1f\n" +
	"\voutput_type\x18\n" +
	" \x01(\fR\n" +
	"outputType\"\x96\x01\n" +
	"\rSigningOutput\x12)\n" +
	"\x10transaction_json\x18\x01 \x01(\tR\x0ftransactionJson\x12%\n" +
	"\x0etransaction_id\x18\x02 \x01(\tR\rtransactionId\x123\n" +
	"\x05error\x18\x03 \x01(\x0e2\x1d.TW.Common.Proto.SigningErrorR\x05errorB\x17\n" +
	"\x15wallet.core.jni.protob\x06proto3"

var (
	file_Nervos_proto_rawDescOnce sync.Once
	file_Nervos_proto_rawDescData []byte
)

func file_Nervos_proto_rawDescGZIP() []byte {
	file_Nervos_proto_rawDescOnce.Do(func() {
		file_Nervos_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_Nervos_proto_rawDesc), len(file_Nervos_proto_rawDesc)))
	})
	return file_Nervos_proto_rawDescData
}

var file_Nervos_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_Nervos_proto_goTypes = []any{
	(*TransactionPlan)(nil),   // 0: TW.Nervos.Proto.TransactionPlan
	(*CellDep)(nil),           // 1: TW.Nervos.Proto.CellDep
	(*OutPoint)(nil),          // 2: TW.Nervos.Proto.OutPoint
	(*CellOutput)(nil),        // 3: TW.Nervos.Proto.CellOutput
	(*Script)(nil),            // 4: TW.Nervos.Proto.Script
	(*NativeTransfer)(nil),    // 5: TW.Nervos.Proto.NativeTransfer
	(*SudtTransfer)(nil),      // 6: TW.Nervos.Proto.SudtTransfer
	(*DaoDeposit)(nil),        // 7: TW.Nervos.Proto.DaoDeposit
	(*DaoWithdrawPhase1)(nil), // 8: TW.Nervos.Proto.DaoWithdrawPhase1
	(*DaoWithdrawPhase2)(nil), // 9: TW.Nervos.Proto.DaoWithdrawPhase2
	(*SigningInput)(nil),      // 10: TW.Nervos.Proto.SigningInput
	(*Cell)(nil),              // 11: TW.Nervos.Proto.Cell
	(*SigningOutput)(nil),     // 12: TW.Nervos.Proto.SigningOutput
	(common.SigningError)(0),  // 13: TW.Common.Proto.SigningError
}
var file_Nervos_proto_depIdxs = []int32{
	1,  // 0: TW.Nervos.Proto.TransactionPlan.cell_deps:type_name -> TW.Nervos.Proto.CellDep
	11, // 1: TW.Nervos.Proto.TransactionPlan.selected_cells:type_name -> TW.Nervos.Proto.Cell
	3,  // 2: TW.Nervos.Proto.TransactionPlan.outputs:type_name -> TW.Nervos.Proto.CellOutput
	13, // 3: TW.Nervos.Proto.TransactionPlan.error:type_name -> TW.Common.Proto.SigningError
	2,  // 4: TW.Nervos.Proto.CellDep.out_point:type_name -> TW.Nervos.Proto.OutPoint
	4,  // 5: TW.Nervos.Proto.CellOutput.lock:type_name -> TW.Nervos.Proto.Script
	4,  // 6: TW.Nervos.Proto.CellOutput.type:type_name -> TW.Nervos.Proto.Script
	11, // 7: TW.Nervos.Proto.DaoWithdrawPhase1.deposit_cell:type_name -> TW.Nervos.Proto.Cell
	11, // 8: TW.Nervos.Proto.DaoWithdrawPhase2.deposit_cell:type_name -> TW.Nervos.Proto.Cell
	11, // 9: TW.Nervos.Proto.DaoWithdrawPhase2.withdrawing_cell:type_name -> TW.Nervos.Proto.Cell
	11, // 10: TW.Nervos.Proto.SigningInput.cell:type_name -> TW.Nervos.Proto.Cell
	0,  // 11: TW.Nervos.Proto.SigningInput.plan:type_name -> TW.Nervos.Proto.TransactionPlan
	5,  // 12: TW.Nervos.Proto.SigningInput.native_transfer:type_name -> TW.Nervos.Proto.NativeTransfer
	6,  // 13: TW.Nervos.Proto.SigningInput.sudt_transfer:type_name -> TW.Nervos.Proto.SudtTransfer
	7,  // 14: TW.Nervos.Proto.SigningInput.dao_deposit:type_name -> TW.Nervos.Proto.DaoDeposit
	8,  // 15: TW.Nervos.Proto.SigningInput.dao_withdraw_phase1:type_name -> TW.Nervos.Proto.DaoWithdrawPhase1
	9,  // 16: TW.Nervos.Proto.SigningInput.dao_withdraw_phase2:type_name -> TW.Nervos.Proto.DaoWithdrawPhase2
	2,  // 17: TW.Nervos.Proto.Cell.out_point:type_name -> TW.Nervos.Proto.OutPoint
	4,  // 18: TW.Nervos.Proto.Cell.lock:type_name -> TW.Nervos.Proto.Script
	4,  // 19: TW.Nervos.Proto.Cell.type:type_name -> TW.Nervos.Proto.Script
	13, // 20: TW.Nervos.Proto.SigningOutput.error:type_name -> TW.Common.Proto.SigningError
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_Nervos_proto_init() }
func file_Nervos_proto_init() {
	if File_Nervos_proto != nil {
		return
	}
	file_Nervos_proto_msgTypes[10].OneofWrappers = []any{
		(*SigningInput_NativeTransfer)(nil),
		(*SigningInput_SudtTransfer)(nil),
		(*SigningInput_DaoDeposit)(nil),
		(*SigningInput_DaoWithdrawPhase1)(nil),
		(*SigningInput_DaoWithdrawPhase2)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_Nervos_proto_rawDesc), len(file_Nervos_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Nervos_proto_goTypes,
		DependencyIndexes: file_Nervos_proto_depIdxs,
		MessageInfos:      file_Nervos_proto_msgTypes,
	}.Build()
	File_Nervos_proto = out.File
	file_Nervos_proto_goTypes = nil
	file_Nervos_proto_depIdxs = nil
}
