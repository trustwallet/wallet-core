// SPDX-License-Identifier: Apache-2.0
//
// Copyright Â© 2017 Trust Wallet.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.20.3
// source: Pactus.proto

package pactus

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	common "tw/protos/common"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransactionMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The lock time for the transaction.
	LockTime uint32 `protobuf:"varint,1,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
	// The transaction fee in NanoPAC.
	Fee int64 `protobuf:"varint,2,opt,name=fee,proto3" json:"fee,omitempty"`
	// A memo string for the transaction (optional).
	Memo string `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty"`
	// Types that are valid to be assigned to Payload:
	//
	//	*TransactionMessage_Transfer
	//	*TransactionMessage_Bond
	Payload       isTransactionMessage_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionMessage) Reset() {
	*x = TransactionMessage{}
	mi := &file_Pactus_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionMessage) ProtoMessage() {}

func (x *TransactionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_Pactus_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionMessage.ProtoReflect.Descriptor instead.
func (*TransactionMessage) Descriptor() ([]byte, []int) {
	return file_Pactus_proto_rawDescGZIP(), []int{0}
}

func (x *TransactionMessage) GetLockTime() uint32 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

func (x *TransactionMessage) GetFee() int64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *TransactionMessage) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *TransactionMessage) GetPayload() isTransactionMessage_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *TransactionMessage) GetTransfer() *TransferPayload {
	if x != nil {
		if x, ok := x.Payload.(*TransactionMessage_Transfer); ok {
			return x.Transfer
		}
	}
	return nil
}

func (x *TransactionMessage) GetBond() *BondPayload {
	if x != nil {
		if x, ok := x.Payload.(*TransactionMessage_Bond); ok {
			return x.Bond
		}
	}
	return nil
}

type isTransactionMessage_Payload interface {
	isTransactionMessage_Payload()
}

type TransactionMessage_Transfer struct {
	Transfer *TransferPayload `protobuf:"bytes,10,opt,name=transfer,proto3,oneof"`
}

type TransactionMessage_Bond struct {
	Bond *BondPayload `protobuf:"bytes,11,opt,name=bond,proto3,oneof"`
}

func (*TransactionMessage_Transfer) isTransactionMessage_Payload() {}

func (*TransactionMessage_Bond) isTransactionMessage_Payload() {}

// Transfer payload for creating a Transfer transaction between two accounts.
type TransferPayload struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The sender's account address.
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// The receiver's account address.
	Receiver string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// The amount to be transferred, specified in NanoPAC.
	Amount        int64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransferPayload) Reset() {
	*x = TransferPayload{}
	mi := &file_Pactus_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferPayload) ProtoMessage() {}

func (x *TransferPayload) ProtoReflect() protoreflect.Message {
	mi := &file_Pactus_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferPayload.ProtoReflect.Descriptor instead.
func (*TransferPayload) Descriptor() ([]byte, []int) {
	return file_Pactus_proto_rawDescGZIP(), []int{1}
}

func (x *TransferPayload) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *TransferPayload) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

func (x *TransferPayload) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// Bond payload for creating a Bond transaction from an account to a validator.
type BondPayload struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The sender's account address.
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// The receiver's validator address.
	Receiver string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// The stake amount in NanoPAC.
	Stake int64 `protobuf:"varint,3,opt,name=stake,proto3" json:"stake,omitempty"`
	// The public key of the validator (only set when creating a new validator).
	PublicKey     string `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BondPayload) Reset() {
	*x = BondPayload{}
	mi := &file_Pactus_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BondPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BondPayload) ProtoMessage() {}

func (x *BondPayload) ProtoReflect() protoreflect.Message {
	mi := &file_Pactus_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BondPayload.ProtoReflect.Descriptor instead.
func (*BondPayload) Descriptor() ([]byte, []int) {
	return file_Pactus_proto_rawDescGZIP(), []int{2}
}

func (x *BondPayload) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *BondPayload) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

func (x *BondPayload) GetStake() int64 {
	if x != nil {
		return x.Stake
	}
	return 0
}

func (x *BondPayload) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

// Input data necessary to create a signed transaction.
type SigningInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PrivateKey    []byte                 `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	Transaction   *TransactionMessage    `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningInput) Reset() {
	*x = SigningInput{}
	mi := &file_Pactus_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningInput) ProtoMessage() {}

func (x *SigningInput) ProtoReflect() protoreflect.Message {
	mi := &file_Pactus_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningInput.ProtoReflect.Descriptor instead.
func (*SigningInput) Descriptor() ([]byte, []int) {
	return file_Pactus_proto_rawDescGZIP(), []int{3}
}

func (x *SigningInput) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *SigningInput) GetTransaction() *TransactionMessage {
	if x != nil {
		return x.Transaction
	}
	return nil
}

// Transaction signing output.
type SigningOutput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Transaction ID (Hash).
	TransactionId []byte `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// Signed and encoded transaction bytes.
	SignedTransactionData []byte `protobuf:"bytes,2,opt,name=signed_transaction_data,json=signedTransactionData,proto3" json:"signed_transaction_data,omitempty"`
	// Signature the signed transaction.
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	// A possible error, `OK` if none.
	Error common.SigningError `protobuf:"varint,4,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// Detailed error message, if any.
	ErrorMessage  string `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningOutput) Reset() {
	*x = SigningOutput{}
	mi := &file_Pactus_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningOutput) ProtoMessage() {}

func (x *SigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_Pactus_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningOutput.ProtoReflect.Descriptor instead.
func (*SigningOutput) Descriptor() ([]byte, []int) {
	return file_Pactus_proto_rawDescGZIP(), []int{4}
}

func (x *SigningOutput) GetTransactionId() []byte {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *SigningOutput) GetSignedTransactionData() []byte {
	if x != nil {
		return x.SignedTransactionData
	}
	return nil
}

func (x *SigningOutput) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SigningOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *SigningOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_Pactus_proto protoreflect.FileDescriptor

const file_Pactus_proto_rawDesc = "" +
	"\n" +
	"\fPactus.proto\x12\x0fTW.Pactus.Proto\x1a\fCommon.proto\"\xd6\x01\n" +
	"\x12TransactionMessage\x12\x1b\n" +
	"\tlock_time\x18\x01 \x01(\rR\blockTime\x12\x10\n" +
	"\x03fee\x18\x02 \x01(\x03R\x03fee\x12\x12\n" +
	"\x04memo\x18\x03 \x01(\tR\x04memo\x12>\n" +
	"\btransfer\x18\n" +
	" \x01(\v2 .TW.Pactus.Proto.TransferPayloadH\x00R\btransfer\x122\n" +
	"\x04bond\x18\v \x01(\v2\x1c.TW.Pactus.Proto.BondPayloadH\x00R\x04bondB\t\n" +
	"\apayload\"]\n" +
	"\x0fTransferPayload\x12\x16\n" +
	"\x06sender\x18\x01 \x01(\tR\x06sender\x12\x1a\n" +
	"\breceiver\x18\x02 \x01(\tR\breceiver\x12\x16\n" +
	"\x06amount\x18\x03 \x01(\x03R\x06amount\"v\n" +
	"\vBondPayload\x12\x16\n" +
	"\x06sender\x18\x01 \x01(\tR\x06sender\x12\x1a\n" +
	"\breceiver\x18\x02 \x01(\tR\breceiver\x12\x14\n" +
	"\x05stake\x18\x03 \x01(\x03R\x05stake\x12\x1d\n" +
	"\n" +
	"public_key\x18\x04 \x01(\tR\tpublicKey\"v\n" +
	"\fSigningInput\x12\x1f\n" +
	"\vprivate_key\x18\x01 \x01(\fR\n" +
	"privateKey\x12E\n" +
	"\vtransaction\x18\x02 \x01(\v2#.TW.Pactus.Proto.TransactionMessageR\vtransaction\"\xe6\x01\n" +
	"\rSigningOutput\x12%\n" +
	"\x0etransaction_id\x18\x01 \x01(\fR\rtransactionId\x126\n" +
	"\x17signed_transaction_data\x18\x02 \x01(\fR\x15signedTransactionData\x12\x1c\n" +
	"\tsignature\x18\x03 \x01(\fR\tsignature\x123\n" +
	"\x05error\x18\x04 \x01(\x0e2\x1d.TW.Common.Proto.SigningErrorR\x05error\x12#\n" +
	"\rerror_message\x18\x05 \x01(\tR\ferrorMessageB\x17\n" +
	"\x15wallet.core.jni.protob\x06proto3"

var (
	file_Pactus_proto_rawDescOnce sync.Once
	file_Pactus_proto_rawDescData []byte
)

func file_Pactus_proto_rawDescGZIP() []byte {
	file_Pactus_proto_rawDescOnce.Do(func() {
		file_Pactus_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_Pactus_proto_rawDesc), len(file_Pactus_proto_rawDesc)))
	})
	return file_Pactus_proto_rawDescData
}

var file_Pactus_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_Pactus_proto_goTypes = []any{
	(*TransactionMessage)(nil), // 0: TW.Pactus.Proto.TransactionMessage
	(*TransferPayload)(nil),    // 1: TW.Pactus.Proto.TransferPayload
	(*BondPayload)(nil),        // 2: TW.Pactus.Proto.BondPayload
	(*SigningInput)(nil),       // 3: TW.Pactus.Proto.SigningInput
	(*SigningOutput)(nil),      // 4: TW.Pactus.Proto.SigningOutput
	(common.SigningError)(0),   // 5: TW.Common.Proto.SigningError
}
var file_Pactus_proto_depIdxs = []int32{
	1, // 0: TW.Pactus.Proto.TransactionMessage.transfer:type_name -> TW.Pactus.Proto.TransferPayload
	2, // 1: TW.Pactus.Proto.TransactionMessage.bond:type_name -> TW.Pactus.Proto.BondPayload
	0, // 2: TW.Pactus.Proto.SigningInput.transaction:type_name -> TW.Pactus.Proto.TransactionMessage
	5, // 3: TW.Pactus.Proto.SigningOutput.error:type_name -> TW.Common.Proto.SigningError
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_Pactus_proto_init() }
func file_Pactus_proto_init() {
	if File_Pactus_proto != nil {
		return
	}
	file_Pactus_proto_msgTypes[0].OneofWrappers = []any{
		(*TransactionMessage_Transfer)(nil),
		(*TransactionMessage_Bond)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_Pactus_proto_rawDesc), len(file_Pactus_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Pactus_proto_goTypes,
		DependencyIndexes: file_Pactus_proto_depIdxs,
		MessageInfos:      file_Pactus_proto_msgTypes,
	}.Build()
	File_Pactus_proto = out.File
	file_Pactus_proto_goTypes = nil
	file_Pactus_proto_depIdxs = nil
}
