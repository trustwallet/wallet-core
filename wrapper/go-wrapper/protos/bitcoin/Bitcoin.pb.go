// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.20.3
// source: Bitcoin.proto

package bitcoin

import (
	bitcoinv2 "github.com/Cramiumlabs/wallet-core/wrapper/go-wrapper/protos/bitcoinv2"
	common "github.com/Cramiumlabs/wallet-core/wrapper/go-wrapper/protos/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransactionVariant int32

const (
	TransactionVariant_P2PKH          TransactionVariant = 0
	TransactionVariant_P2WPKH         TransactionVariant = 1
	TransactionVariant_P2TRKEYPATH    TransactionVariant = 2
	TransactionVariant_BRC20TRANSFER  TransactionVariant = 3
	TransactionVariant_NFTINSCRIPTION TransactionVariant = 4
)

// Enum value maps for TransactionVariant.
var (
	TransactionVariant_name = map[int32]string{
		0: "P2PKH",
		1: "P2WPKH",
		2: "P2TRKEYPATH",
		3: "BRC20TRANSFER",
		4: "NFTINSCRIPTION",
	}
	TransactionVariant_value = map[string]int32{
		"P2PKH":          0,
		"P2WPKH":         1,
		"P2TRKEYPATH":    2,
		"BRC20TRANSFER":  3,
		"NFTINSCRIPTION": 4,
	}
)

func (x TransactionVariant) Enum() *TransactionVariant {
	p := new(TransactionVariant)
	*p = x
	return p
}

func (x TransactionVariant) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionVariant) Descriptor() protoreflect.EnumDescriptor {
	return file_Bitcoin_proto_enumTypes[0].Descriptor()
}

func (TransactionVariant) Type() protoreflect.EnumType {
	return &file_Bitcoin_proto_enumTypes[0]
}

func (x TransactionVariant) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionVariant.Descriptor instead.
func (TransactionVariant) EnumDescriptor() ([]byte, []int) {
	return file_Bitcoin_proto_rawDescGZIP(), []int{0}
}

// A transaction, with its inputs and outputs
type Transaction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Transaction data format version.
	Version int32 `protobuf:"zigzag32,1,opt,name=version,proto3" json:"version,omitempty"`
	// The block number or timestamp at which this transaction is unlocked.
	LockTime uint32 `protobuf:"varint,2,opt,name=lockTime,proto3" json:"lockTime,omitempty"`
	// A list of 1 or more transaction inputs or sources for coins.
	Inputs []*TransactionInput `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// A list of 1 or more transaction outputs or destinations for coins.
	Outputs       []*TransactionOutput `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	mi := &file_Bitcoin_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_Bitcoin_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_Bitcoin_proto_rawDescGZIP(), []int{0}
}

func (x *Transaction) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Transaction) GetLockTime() uint32 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

func (x *Transaction) GetInputs() []*TransactionInput {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *Transaction) GetOutputs() []*TransactionOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

// Bitcoin transaction input.
type TransactionInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Reference to the previous transaction's output.
	PreviousOutput *OutPoint `protobuf:"bytes,1,opt,name=previousOutput,proto3" json:"previousOutput,omitempty"`
	// Transaction version as defined by the sender.
	Sequence uint32 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Computational script for confirming transaction authorization.
	Script        []byte `protobuf:"bytes,3,opt,name=script,proto3" json:"script,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionInput) Reset() {
	*x = TransactionInput{}
	mi := &file_Bitcoin_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionInput) ProtoMessage() {}

func (x *TransactionInput) ProtoReflect() protoreflect.Message {
	mi := &file_Bitcoin_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionInput.ProtoReflect.Descriptor instead.
func (*TransactionInput) Descriptor() ([]byte, []int) {
	return file_Bitcoin_proto_rawDescGZIP(), []int{1}
}

func (x *TransactionInput) GetPreviousOutput() *OutPoint {
	if x != nil {
		return x.PreviousOutput
	}
	return nil
}

func (x *TransactionInput) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *TransactionInput) GetScript() []byte {
	if x != nil {
		return x.Script
	}
	return nil
}

// Bitcoin transaction out-point reference.
type OutPoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The hash of the referenced transaction (network byte order, usually needs to be reversed).
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// The index of the specific output in the transaction.
	Index uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	// Transaction version as defined by the sender.
	Sequence uint32 `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// The tree in utxo, only works for DCR
	Tree          int32 `protobuf:"varint,4,opt,name=tree,proto3" json:"tree,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OutPoint) Reset() {
	*x = OutPoint{}
	mi := &file_Bitcoin_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutPoint) ProtoMessage() {}

func (x *OutPoint) ProtoReflect() protoreflect.Message {
	mi := &file_Bitcoin_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutPoint.ProtoReflect.Descriptor instead.
func (*OutPoint) Descriptor() ([]byte, []int) {
	return file_Bitcoin_proto_rawDescGZIP(), []int{2}
}

func (x *OutPoint) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *OutPoint) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *OutPoint) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *OutPoint) GetTree() int32 {
	if x != nil {
		return x.Tree
	}
	return 0
}

// Bitcoin transaction output.
type TransactionOutput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Transaction amount.
	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// Usually contains the public key as a Bitcoin script setting up conditions to claim this output.
	Script []byte `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"`
	// Optional spending script for P2TR script-path transactions.
	SpendingScript []byte `protobuf:"bytes,5,opt,name=spendingScript,proto3" json:"spendingScript,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TransactionOutput) Reset() {
	*x = TransactionOutput{}
	mi := &file_Bitcoin_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionOutput) ProtoMessage() {}

func (x *TransactionOutput) ProtoReflect() protoreflect.Message {
	mi := &file_Bitcoin_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionOutput.ProtoReflect.Descriptor instead.
func (*TransactionOutput) Descriptor() ([]byte, []int) {
	return file_Bitcoin_proto_rawDescGZIP(), []int{3}
}

func (x *TransactionOutput) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TransactionOutput) GetScript() []byte {
	if x != nil {
		return x.Script
	}
	return nil
}

func (x *TransactionOutput) GetSpendingScript() []byte {
	if x != nil {
		return x.SpendingScript
	}
	return nil
}

// An unspent transaction output, that can serve as input to a transaction
type UnspentTransaction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unspent output
	OutPoint *OutPoint `protobuf:"bytes,1,opt,name=out_point,json=outPoint,proto3" json:"out_point,omitempty"`
	// Script for claiming this UTXO
	Script []byte `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"`
	// Amount of the UTXO
	Amount int64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// The transaction variant
	Variant TransactionVariant `protobuf:"varint,4,opt,name=variant,proto3,enum=TW.Bitcoin.Proto.TransactionVariant" json:"variant,omitempty"`
	// Optional spending script for P2TR script-path transactions.
	SpendingScript []byte `protobuf:"bytes,5,opt,name=spendingScript,proto3" json:"spendingScript,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UnspentTransaction) Reset() {
	*x = UnspentTransaction{}
	mi := &file_Bitcoin_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnspentTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnspentTransaction) ProtoMessage() {}

func (x *UnspentTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_Bitcoin_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnspentTransaction.ProtoReflect.Descriptor instead.
func (*UnspentTransaction) Descriptor() ([]byte, []int) {
	return file_Bitcoin_proto_rawDescGZIP(), []int{4}
}

func (x *UnspentTransaction) GetOutPoint() *OutPoint {
	if x != nil {
		return x.OutPoint
	}
	return nil
}

func (x *UnspentTransaction) GetScript() []byte {
	if x != nil {
		return x.Script
	}
	return nil
}

func (x *UnspentTransaction) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *UnspentTransaction) GetVariant() TransactionVariant {
	if x != nil {
		return x.Variant
	}
	return TransactionVariant_P2PKH
}

func (x *UnspentTransaction) GetSpendingScript() []byte {
	if x != nil {
		return x.SpendingScript
	}
	return nil
}

// Pair of destination address and amount, used for extra outputs
type OutputAddress struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Destination address
	ToAddress string `protobuf:"bytes,1,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// Amount to be paid to this output
	Amount        int64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OutputAddress) Reset() {
	*x = OutputAddress{}
	mi := &file_Bitcoin_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutputAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputAddress) ProtoMessage() {}

func (x *OutputAddress) ProtoReflect() protoreflect.Message {
	mi := &file_Bitcoin_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputAddress.ProtoReflect.Descriptor instead.
func (*OutputAddress) Descriptor() ([]byte, []int) {
	return file_Bitcoin_proto_rawDescGZIP(), []int{5}
}

func (x *OutputAddress) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *OutputAddress) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// Optional index of a corresponding output in the transaction.
type OutputIndex struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         uint32                 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OutputIndex) Reset() {
	*x = OutputIndex{}
	mi := &file_Bitcoin_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutputIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputIndex) ProtoMessage() {}

func (x *OutputIndex) ProtoReflect() protoreflect.Message {
	mi := &file_Bitcoin_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputIndex.ProtoReflect.Descriptor instead.
func (*OutputIndex) Descriptor() ([]byte, []int) {
	return file_Bitcoin_proto_rawDescGZIP(), []int{6}
}

func (x *OutputIndex) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// Input data necessary to create a signed transaction.
type SigningInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Hash type to use when signing.
	HashType uint32 `protobuf:"varint,1,opt,name=hash_type,json=hashType,proto3" json:"hash_type,omitempty"`
	// Amount to send.  Transaction created will have this amount in its output,
	// except when use_max_amount is set, in that case this amount is not relevant, maximum possible amount will be used (max avail less fee).
	// If amount is equal or more than the available amount, also max amount will be used.
	Amount int64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// Transaction fee rate, satoshis per byte, used to compute required fee (when planning)
	ByteFee int64 `protobuf:"varint,3,opt,name=byte_fee,json=byteFee,proto3" json:"byte_fee,omitempty"`
	// Recipient's address, as string.
	ToAddress string `protobuf:"bytes,4,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// Change address, as string.
	ChangeAddress string `protobuf:"bytes,5,opt,name=change_address,json=changeAddress,proto3" json:"change_address,omitempty"`
	// The available secret private key or keys required for signing (32 bytes each).
	PrivateKey [][]byte `protobuf:"bytes,6,rep,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// Available redeem scripts indexed by script hash.
	Scripts map[string][]byte `protobuf:"bytes,7,rep,name=scripts,proto3" json:"scripts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Available input unspent transaction outputs.
	Utxo []*UnspentTransaction `protobuf:"bytes,8,rep,name=utxo,proto3" json:"utxo,omitempty"`
	// Set if sending max amount is requested.
	UseMaxAmount bool `protobuf:"varint,9,opt,name=use_max_amount,json=useMaxAmount,proto3" json:"use_max_amount,omitempty"`
	// Coin type (used by forks).
	CoinType uint32 `protobuf:"varint,10,opt,name=coin_type,json=coinType,proto3" json:"coin_type,omitempty"`
	// Optional transaction plan. If missing, plan will be computed.
	Plan *TransactionPlan `protobuf:"bytes,11,opt,name=plan,proto3" json:"plan,omitempty"`
	// Optional lockTime, default value 0 means no time locking.
	// If all inputs have final (`0xffffffff`) sequence numbers then `lockTime` is irrelevant.
	// Otherwise, the transaction may not be added to a block until after `lockTime`.
	//
	//	value  < 500000000 : Block number at which this transaction is unlocked
	//	value >= 500000000 : UNIX timestamp at which this transaction is unlocked
	LockTime uint32 `protobuf:"varint,12,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
	// Optional zero-amount, OP_RETURN output
	OutputOpReturn []byte `protobuf:"bytes,13,opt,name=output_op_return,json=outputOpReturn,proto3" json:"output_op_return,omitempty"`
	// Optional index of the OP_RETURN output in the transaction.
	// If not set, OP_RETURN output will be pushed as the latest output.
	OutputOpReturnIndex *OutputIndex `protobuf:"bytes,26,opt,name=output_op_return_index,json=outputOpReturnIndex,proto3" json:"output_op_return_index,omitempty"`
	// Optional additional destination addresses, additional to first to_address output
	ExtraOutputs []*OutputAddress `protobuf:"bytes,14,rep,name=extra_outputs,json=extraOutputs,proto3" json:"extra_outputs,omitempty"`
	// If use max utxo.
	UseMaxUtxo bool `protobuf:"varint,15,opt,name=use_max_utxo,json=useMaxUtxo,proto3" json:"use_max_utxo,omitempty"`
	// If disable dust filter.
	DisableDustFilter bool `protobuf:"varint,16,opt,name=disable_dust_filter,json=disableDustFilter,proto3" json:"disable_dust_filter,omitempty"`
	// transaction creation time that will be used for verge(xvg)
	Time uint32 `protobuf:"varint,17,opt,name=time,proto3" json:"time,omitempty"`
	// Whether to calculate the fee according to ZIP-0317 for the given transaction
	// https://zips.z.cash/zip-0317#fee-calculation
	Zip_0317 bool `protobuf:"varint,18,opt,name=zip_0317,json=zip0317,proto3" json:"zip_0317,omitempty"`
	// If set, uses Bitcoin 2.0 Signing protocol.
	// As a result, `Bitcoin.Proto.SigningOutput.signing_result_v2` is set.
	SigningV2 *bitcoinv2.SigningInput `protobuf:"bytes,21,opt,name=signing_v2,json=signingV2,proto3" json:"signing_v2,omitempty"`
	// One of the "Dust" amount policies.
	// Later, we plan to add support for `DynamicDust` policy with a `min_relay_fee` amount.
	//
	// Types that are valid to be assigned to DustPolicy:
	//
	//	*SigningInput_FixedDustThreshold
	DustPolicy    isSigningInput_DustPolicy `protobuf_oneof:"dust_policy"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningInput) Reset() {
	*x = SigningInput{}
	mi := &file_Bitcoin_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningInput) ProtoMessage() {}

func (x *SigningInput) ProtoReflect() protoreflect.Message {
	mi := &file_Bitcoin_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningInput.ProtoReflect.Descriptor instead.
func (*SigningInput) Descriptor() ([]byte, []int) {
	return file_Bitcoin_proto_rawDescGZIP(), []int{7}
}

func (x *SigningInput) GetHashType() uint32 {
	if x != nil {
		return x.HashType
	}
	return 0
}

func (x *SigningInput) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SigningInput) GetByteFee() int64 {
	if x != nil {
		return x.ByteFee
	}
	return 0
}

func (x *SigningInput) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *SigningInput) GetChangeAddress() string {
	if x != nil {
		return x.ChangeAddress
	}
	return ""
}

func (x *SigningInput) GetPrivateKey() [][]byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *SigningInput) GetScripts() map[string][]byte {
	if x != nil {
		return x.Scripts
	}
	return nil
}

func (x *SigningInput) GetUtxo() []*UnspentTransaction {
	if x != nil {
		return x.Utxo
	}
	return nil
}

func (x *SigningInput) GetUseMaxAmount() bool {
	if x != nil {
		return x.UseMaxAmount
	}
	return false
}

func (x *SigningInput) GetCoinType() uint32 {
	if x != nil {
		return x.CoinType
	}
	return 0
}

func (x *SigningInput) GetPlan() *TransactionPlan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *SigningInput) GetLockTime() uint32 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

func (x *SigningInput) GetOutputOpReturn() []byte {
	if x != nil {
		return x.OutputOpReturn
	}
	return nil
}

func (x *SigningInput) GetOutputOpReturnIndex() *OutputIndex {
	if x != nil {
		return x.OutputOpReturnIndex
	}
	return nil
}

func (x *SigningInput) GetExtraOutputs() []*OutputAddress {
	if x != nil {
		return x.ExtraOutputs
	}
	return nil
}

func (x *SigningInput) GetUseMaxUtxo() bool {
	if x != nil {
		return x.UseMaxUtxo
	}
	return false
}

func (x *SigningInput) GetDisableDustFilter() bool {
	if x != nil {
		return x.DisableDustFilter
	}
	return false
}

func (x *SigningInput) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SigningInput) GetZip_0317() bool {
	if x != nil {
		return x.Zip_0317
	}
	return false
}

func (x *SigningInput) GetSigningV2() *bitcoinv2.SigningInput {
	if x != nil {
		return x.SigningV2
	}
	return nil
}

func (x *SigningInput) GetDustPolicy() isSigningInput_DustPolicy {
	if x != nil {
		return x.DustPolicy
	}
	return nil
}

func (x *SigningInput) GetFixedDustThreshold() int64 {
	if x != nil {
		if x, ok := x.DustPolicy.(*SigningInput_FixedDustThreshold); ok {
			return x.FixedDustThreshold
		}
	}
	return 0
}

type isSigningInput_DustPolicy interface {
	isSigningInput_DustPolicy()
}

type SigningInput_FixedDustThreshold struct {
	// Use a constant "Dust" threshold.
	FixedDustThreshold int64 `protobuf:"varint,24,opt,name=fixed_dust_threshold,json=fixedDustThreshold,proto3,oneof"`
}

func (*SigningInput_FixedDustThreshold) isSigningInput_DustPolicy() {}

// Describes a preliminary transaction plan.
type TransactionPlan struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Amount to be received at the other end.
	Amount int64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// Maximum available amount in all the input UTXOs.
	AvailableAmount int64 `protobuf:"varint,2,opt,name=available_amount,json=availableAmount,proto3" json:"available_amount,omitempty"`
	// Estimated transaction fee.
	Fee int64 `protobuf:"varint,3,opt,name=fee,proto3" json:"fee,omitempty"`
	// Remaining change
	Change int64 `protobuf:"varint,4,opt,name=change,proto3" json:"change,omitempty"`
	// Selected unspent transaction outputs (subset of all input UTXOs)
	Utxos []*UnspentTransaction `protobuf:"bytes,5,rep,name=utxos,proto3" json:"utxos,omitempty"`
	// Zcash branch id
	BranchId []byte `protobuf:"bytes,6,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	// Optional error
	Error common.SigningError `protobuf:"varint,7,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// Optional zero-amount, OP_RETURN output
	OutputOpReturn []byte `protobuf:"bytes,8,opt,name=output_op_return,json=outputOpReturn,proto3" json:"output_op_return,omitempty"`
	// Optional index of the OP_RETURN output in the transaction.
	// If not set, OP_RETURN output will be pushed as the latest output.
	OutputOpReturnIndex *OutputIndex `protobuf:"bytes,14,opt,name=output_op_return_index,json=outputOpReturnIndex,proto3" json:"output_op_return_index,omitempty"`
	// zen & bitcoin diamond preblockhash
	Preblockhash []byte `protobuf:"bytes,9,opt,name=preblockhash,proto3" json:"preblockhash,omitempty"`
	// zen preblockheight
	Preblockheight int64 `protobuf:"varint,10,opt,name=preblockheight,proto3" json:"preblockheight,omitempty"`
	// Result of a transaction planning using the Bitcoin 2.0 protocol.
	// Set if `Bitcoin.Proto.SigningInput.planning_v2` used.
	PlanningResultV2 *bitcoinv2.TransactionPlan `protobuf:"bytes,12,opt,name=planning_result_v2,json=planningResultV2,proto3" json:"planning_result_v2,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TransactionPlan) Reset() {
	*x = TransactionPlan{}
	mi := &file_Bitcoin_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionPlan) ProtoMessage() {}

func (x *TransactionPlan) ProtoReflect() protoreflect.Message {
	mi := &file_Bitcoin_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionPlan.ProtoReflect.Descriptor instead.
func (*TransactionPlan) Descriptor() ([]byte, []int) {
	return file_Bitcoin_proto_rawDescGZIP(), []int{8}
}

func (x *TransactionPlan) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TransactionPlan) GetAvailableAmount() int64 {
	if x != nil {
		return x.AvailableAmount
	}
	return 0
}

func (x *TransactionPlan) GetFee() int64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *TransactionPlan) GetChange() int64 {
	if x != nil {
		return x.Change
	}
	return 0
}

func (x *TransactionPlan) GetUtxos() []*UnspentTransaction {
	if x != nil {
		return x.Utxos
	}
	return nil
}

func (x *TransactionPlan) GetBranchId() []byte {
	if x != nil {
		return x.BranchId
	}
	return nil
}

func (x *TransactionPlan) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *TransactionPlan) GetOutputOpReturn() []byte {
	if x != nil {
		return x.OutputOpReturn
	}
	return nil
}

func (x *TransactionPlan) GetOutputOpReturnIndex() *OutputIndex {
	if x != nil {
		return x.OutputOpReturnIndex
	}
	return nil
}

func (x *TransactionPlan) GetPreblockhash() []byte {
	if x != nil {
		return x.Preblockhash
	}
	return nil
}

func (x *TransactionPlan) GetPreblockheight() int64 {
	if x != nil {
		return x.Preblockheight
	}
	return 0
}

func (x *TransactionPlan) GetPlanningResultV2() *bitcoinv2.TransactionPlan {
	if x != nil {
		return x.PlanningResultV2
	}
	return nil
}

// Result containing the signed and encoded transaction.
// Note that the amount may be different than the requested amount to account for fees and available funds.
type SigningOutput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Resulting transaction.
	Transaction *Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	// Signed and encoded transaction bytes.
	Encoded []byte `protobuf:"bytes,2,opt,name=encoded,proto3" json:"encoded,omitempty"`
	// Transaction ID (hash)
	TransactionId string `protobuf:"bytes,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// Optional error
	Error common.SigningError `protobuf:"varint,4,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// error description
	ErrorMessage string `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// Result of a transaction signing using the Bitcoin 2.0 protocol.
	// Set if `Bitcoin.Proto.SigningInput.signing_v2` used.
	SigningResultV2 *bitcoinv2.SigningOutput `protobuf:"bytes,7,opt,name=signing_result_v2,json=signingResultV2,proto3" json:"signing_result_v2,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SigningOutput) Reset() {
	*x = SigningOutput{}
	mi := &file_Bitcoin_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningOutput) ProtoMessage() {}

func (x *SigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_Bitcoin_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningOutput.ProtoReflect.Descriptor instead.
func (*SigningOutput) Descriptor() ([]byte, []int) {
	return file_Bitcoin_proto_rawDescGZIP(), []int{9}
}

func (x *SigningOutput) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *SigningOutput) GetEncoded() []byte {
	if x != nil {
		return x.Encoded
	}
	return nil
}

func (x *SigningOutput) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *SigningOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *SigningOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *SigningOutput) GetSigningResultV2() *bitcoinv2.SigningOutput {
	if x != nil {
		return x.SigningResultV2
	}
	return nil
}

// / Pre-image hash to be used for signing
type HashPublicKey struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Pre-image data hash that will be used for signing
	DataHash []byte `protobuf:"bytes,1,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`
	// / public key hash used for signing
	PublicKeyHash []byte `protobuf:"bytes,2,opt,name=public_key_hash,json=publicKeyHash,proto3" json:"public_key_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HashPublicKey) Reset() {
	*x = HashPublicKey{}
	mi := &file_Bitcoin_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HashPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashPublicKey) ProtoMessage() {}

func (x *HashPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_Bitcoin_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashPublicKey.ProtoReflect.Descriptor instead.
func (*HashPublicKey) Descriptor() ([]byte, []int) {
	return file_Bitcoin_proto_rawDescGZIP(), []int{10}
}

func (x *HashPublicKey) GetDataHash() []byte {
	if x != nil {
		return x.DataHash
	}
	return nil
}

func (x *HashPublicKey) GetPublicKeyHash() []byte {
	if x != nil {
		return x.PublicKeyHash
	}
	return nil
}

// / Transaction pre-signing output
type PreSigningOutput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / hash, public key list
	HashPublicKeys []*HashPublicKey `protobuf:"bytes,1,rep,name=hash_public_keys,json=hashPublicKeys,proto3" json:"hash_public_keys,omitempty"`
	// / error code, 0 is ok, other codes will be treated as errors
	Error common.SigningError `protobuf:"varint,2,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// / error description
	ErrorMessage string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// Result of a transaction pre-signing using the Bitcoin 2.0 protocol.
	// Set if `Bitcoin.Proto.SigningInput.signing_v2` used.
	PreSigningResultV2 *bitcoinv2.PreSigningOutput `protobuf:"bytes,7,opt,name=pre_signing_result_v2,json=preSigningResultV2,proto3" json:"pre_signing_result_v2,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PreSigningOutput) Reset() {
	*x = PreSigningOutput{}
	mi := &file_Bitcoin_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreSigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreSigningOutput) ProtoMessage() {}

func (x *PreSigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_Bitcoin_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreSigningOutput.ProtoReflect.Descriptor instead.
func (*PreSigningOutput) Descriptor() ([]byte, []int) {
	return file_Bitcoin_proto_rawDescGZIP(), []int{11}
}

func (x *PreSigningOutput) GetHashPublicKeys() []*HashPublicKey {
	if x != nil {
		return x.HashPublicKeys
	}
	return nil
}

func (x *PreSigningOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *PreSigningOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *PreSigningOutput) GetPreSigningResultV2() *bitcoinv2.PreSigningOutput {
	if x != nil {
		return x.PreSigningResultV2
	}
	return nil
}

var File_Bitcoin_proto protoreflect.FileDescriptor

const file_Bitcoin_proto_rawDesc = "" +
	"\n" +
	"\rBitcoin.proto\x12\x10TW.Bitcoin.Proto\x1a\x0fBitcoinV2.proto\x1a\fCommon.proto\"\xbe\x01\n" +
	"\vTransaction\x12\x18\n" +
	"\aversion\x18\x01 \x01(\x11R\aversion\x12\x1a\n" +
	"\blockTime\x18\x02 \x01(\rR\blockTime\x12:\n" +
	"\x06inputs\x18\x03 \x03(\v2\".TW.Bitcoin.Proto.TransactionInputR\x06inputs\x12=\n" +
	"\aoutputs\x18\x04 \x03(\v2#.TW.Bitcoin.Proto.TransactionOutputR\aoutputs\"\x8a\x01\n" +
	"\x10TransactionInput\x12B\n" +
	"\x0epreviousOutput\x18\x01 \x01(\v2\x1a.TW.Bitcoin.Proto.OutPointR\x0epreviousOutput\x12\x1a\n" +
	"\bsequence\x18\x02 \x01(\rR\bsequence\x12\x16\n" +
	"\x06script\x18\x03 \x01(\fR\x06script\"d\n" +
	"\bOutPoint\x12\x12\n" +
	"\x04hash\x18\x01 \x01(\fR\x04hash\x12\x14\n" +
	"\x05index\x18\x02 \x01(\rR\x05index\x12\x1a\n" +
	"\bsequence\x18\x03 \x01(\rR\bsequence\x12\x12\n" +
	"\x04tree\x18\x04 \x01(\x05R\x04tree\"i\n" +
	"\x11TransactionOutput\x12\x14\n" +
	"\x05value\x18\x01 \x01(\x03R\x05value\x12\x16\n" +
	"\x06script\x18\x02 \x01(\fR\x06script\x12&\n" +
	"\x0espendingScript\x18\x05 \x01(\fR\x0espendingScript\"\xe5\x01\n" +
	"\x12UnspentTransaction\x127\n" +
	"\tout_point\x18\x01 \x01(\v2\x1a.TW.Bitcoin.Proto.OutPointR\boutPoint\x12\x16\n" +
	"\x06script\x18\x02 \x01(\fR\x06script\x12\x16\n" +
	"\x06amount\x18\x03 \x01(\x03R\x06amount\x12>\n" +
	"\avariant\x18\x04 \x01(\x0e2$.TW.Bitcoin.Proto.TransactionVariantR\avariant\x12&\n" +
	"\x0espendingScript\x18\x05 \x01(\fR\x0espendingScript\"F\n" +
	"\rOutputAddress\x12\x1d\n" +
	"\n" +
	"to_address\x18\x01 \x01(\tR\ttoAddress\x12\x16\n" +
	"\x06amount\x18\x02 \x01(\x03R\x06amount\"#\n" +
	"\vOutputIndex\x12\x14\n" +
	"\x05index\x18\x01 \x01(\rR\x05index\"\xe2\a\n" +
	"\fSigningInput\x12\x1b\n" +
	"\thash_type\x18\x01 \x01(\rR\bhashType\x12\x16\n" +
	"\x06amount\x18\x02 \x01(\x03R\x06amount\x12\x19\n" +
	"\bbyte_fee\x18\x03 \x01(\x03R\abyteFee\x12\x1d\n" +
	"\n" +
	"to_address\x18\x04 \x01(\tR\ttoAddress\x12%\n" +
	"\x0echange_address\x18\x05 \x01(\tR\rchangeAddress\x12\x1f\n" +
	"\vprivate_key\x18\x06 \x03(\fR\n" +
	"privateKey\x12E\n" +
	"\ascripts\x18\a \x03(\v2+.TW.Bitcoin.Proto.SigningInput.ScriptsEntryR\ascripts\x128\n" +
	"\x04utxo\x18\b \x03(\v2$.TW.Bitcoin.Proto.UnspentTransactionR\x04utxo\x12$\n" +
	"\x0euse_max_amount\x18\t \x01(\bR\fuseMaxAmount\x12\x1b\n" +
	"\tcoin_type\x18\n" +
	" \x01(\rR\bcoinType\x125\n" +
	"\x04plan\x18\v \x01(\v2!.TW.Bitcoin.Proto.TransactionPlanR\x04plan\x12\x1b\n" +
	"\tlock_time\x18\f \x01(\rR\blockTime\x12(\n" +
	"\x10output_op_return\x18\r \x01(\fR\x0eoutputOpReturn\x12R\n" +
	"\x16output_op_return_index\x18\x1a \x01(\v2\x1d.TW.Bitcoin.Proto.OutputIndexR\x13outputOpReturnIndex\x12D\n" +
	"\rextra_outputs\x18\x0e \x03(\v2\x1f.TW.Bitcoin.Proto.OutputAddressR\fextraOutputs\x12 \n" +
	"\fuse_max_utxo\x18\x0f \x01(\bR\n" +
	"useMaxUtxo\x12.\n" +
	"\x13disable_dust_filter\x18\x10 \x01(\bR\x11disableDustFilter\x12\x12\n" +
	"\x04time\x18\x11 \x01(\rR\x04time\x12\x19\n" +
	"\bzip_0317\x18\x12 \x01(\bR\azip0317\x12?\n" +
	"\n" +
	"signing_v2\x18\x15 \x01(\v2 .TW.BitcoinV2.Proto.SigningInputR\tsigningV2\x122\n" +
	"\x14fixed_dust_threshold\x18\x18 \x01(\x03H\x00R\x12fixedDustThreshold\x1a:\n" +
	"\fScriptsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01B\r\n" +
	"\vdust_policy\"\xa9\x04\n" +
	"\x0fTransactionPlan\x12\x16\n" +
	"\x06amount\x18\x01 \x01(\x03R\x06amount\x12)\n" +
	"\x10available_amount\x18\x02 \x01(\x03R\x0favailableAmount\x12\x10\n" +
	"\x03fee\x18\x03 \x01(\x03R\x03fee\x12\x16\n" +
	"\x06change\x18\x04 \x01(\x03R\x06change\x12:\n" +
	"\x05utxos\x18\x05 \x03(\v2$.TW.Bitcoin.Proto.UnspentTransactionR\x05utxos\x12\x1b\n" +
	"\tbranch_id\x18\x06 \x01(\fR\bbranchId\x123\n" +
	"\x05error\x18\a \x01(\x0e2\x1d.TW.Common.Proto.SigningErrorR\x05error\x12(\n" +
	"\x10output_op_return\x18\b \x01(\fR\x0eoutputOpReturn\x12R\n" +
	"\x16output_op_return_index\x18\x0e \x01(\v2\x1d.TW.Bitcoin.Proto.OutputIndexR\x13outputOpReturnIndex\x12\"\n" +
	"\fpreblockhash\x18\t \x01(\fR\fpreblockhash\x12&\n" +
	"\x0epreblockheight\x18\n" +
	" \x01(\x03R\x0epreblockheight\x12Q\n" +
	"\x12planning_result_v2\x18\f \x01(\v2#.TW.BitcoinV2.Proto.TransactionPlanR\x10planningResultV2\"\xba\x02\n" +
	"\rSigningOutput\x12?\n" +
	"\vtransaction\x18\x01 \x01(\v2\x1d.TW.Bitcoin.Proto.TransactionR\vtransaction\x12\x18\n" +
	"\aencoded\x18\x02 \x01(\fR\aencoded\x12%\n" +
	"\x0etransaction_id\x18\x03 \x01(\tR\rtransactionId\x123\n" +
	"\x05error\x18\x04 \x01(\x0e2\x1d.TW.Common.Proto.SigningErrorR\x05error\x12#\n" +
	"\rerror_message\x18\x05 \x01(\tR\ferrorMessage\x12M\n" +
	"\x11signing_result_v2\x18\a \x01(\v2!.TW.BitcoinV2.Proto.SigningOutputR\x0fsigningResultV2\"T\n" +
	"\rHashPublicKey\x12\x1b\n" +
	"\tdata_hash\x18\x01 \x01(\fR\bdataHash\x12&\n" +
	"\x0fpublic_key_hash\x18\x02 \x01(\fR\rpublicKeyHash\"\x90\x02\n" +
	"\x10PreSigningOutput\x12I\n" +
	"\x10hash_public_keys\x18\x01 \x03(\v2\x1f.TW.Bitcoin.Proto.HashPublicKeyR\x0ehashPublicKeys\x123\n" +
	"\x05error\x18\x02 \x01(\x0e2\x1d.TW.Common.Proto.SigningErrorR\x05error\x12#\n" +
	"\rerror_message\x18\x03 \x01(\tR\ferrorMessage\x12W\n" +
	"\x15pre_signing_result_v2\x18\a \x01(\v2$.TW.BitcoinV2.Proto.PreSigningOutputR\x12preSigningResultV2*c\n" +
	"\x12TransactionVariant\x12\t\n" +
	"\x05P2PKH\x10\x00\x12\n" +
	"\n" +
	"\x06P2WPKH\x10\x01\x12\x0f\n" +
	"\vP2TRKEYPATH\x10\x02\x12\x11\n" +
	"\rBRC20TRANSFER\x10\x03\x12\x12\n" +
	"\x0eNFTINSCRIPTION\x10\x04B\x17\n" +
	"\x15wallet.core.jni.protob\x06proto3"

var (
	file_Bitcoin_proto_rawDescOnce sync.Once
	file_Bitcoin_proto_rawDescData []byte
)

func file_Bitcoin_proto_rawDescGZIP() []byte {
	file_Bitcoin_proto_rawDescOnce.Do(func() {
		file_Bitcoin_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_Bitcoin_proto_rawDesc), len(file_Bitcoin_proto_rawDesc)))
	})
	return file_Bitcoin_proto_rawDescData
}

var file_Bitcoin_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_Bitcoin_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_Bitcoin_proto_goTypes = []any{
	(TransactionVariant)(0),            // 0: TW.Bitcoin.Proto.TransactionVariant
	(*Transaction)(nil),                // 1: TW.Bitcoin.Proto.Transaction
	(*TransactionInput)(nil),           // 2: TW.Bitcoin.Proto.TransactionInput
	(*OutPoint)(nil),                   // 3: TW.Bitcoin.Proto.OutPoint
	(*TransactionOutput)(nil),          // 4: TW.Bitcoin.Proto.TransactionOutput
	(*UnspentTransaction)(nil),         // 5: TW.Bitcoin.Proto.UnspentTransaction
	(*OutputAddress)(nil),              // 6: TW.Bitcoin.Proto.OutputAddress
	(*OutputIndex)(nil),                // 7: TW.Bitcoin.Proto.OutputIndex
	(*SigningInput)(nil),               // 8: TW.Bitcoin.Proto.SigningInput
	(*TransactionPlan)(nil),            // 9: TW.Bitcoin.Proto.TransactionPlan
	(*SigningOutput)(nil),              // 10: TW.Bitcoin.Proto.SigningOutput
	(*HashPublicKey)(nil),              // 11: TW.Bitcoin.Proto.HashPublicKey
	(*PreSigningOutput)(nil),           // 12: TW.Bitcoin.Proto.PreSigningOutput
	nil,                                // 13: TW.Bitcoin.Proto.SigningInput.ScriptsEntry
	(*bitcoinv2.SigningInput)(nil),     // 14: TW.BitcoinV2.Proto.SigningInput
	(common.SigningError)(0),           // 15: TW.Common.Proto.SigningError
	(*bitcoinv2.TransactionPlan)(nil),  // 16: TW.BitcoinV2.Proto.TransactionPlan
	(*bitcoinv2.SigningOutput)(nil),    // 17: TW.BitcoinV2.Proto.SigningOutput
	(*bitcoinv2.PreSigningOutput)(nil), // 18: TW.BitcoinV2.Proto.PreSigningOutput
}
var file_Bitcoin_proto_depIdxs = []int32{
	2,  // 0: TW.Bitcoin.Proto.Transaction.inputs:type_name -> TW.Bitcoin.Proto.TransactionInput
	4,  // 1: TW.Bitcoin.Proto.Transaction.outputs:type_name -> TW.Bitcoin.Proto.TransactionOutput
	3,  // 2: TW.Bitcoin.Proto.TransactionInput.previousOutput:type_name -> TW.Bitcoin.Proto.OutPoint
	3,  // 3: TW.Bitcoin.Proto.UnspentTransaction.out_point:type_name -> TW.Bitcoin.Proto.OutPoint
	0,  // 4: TW.Bitcoin.Proto.UnspentTransaction.variant:type_name -> TW.Bitcoin.Proto.TransactionVariant
	13, // 5: TW.Bitcoin.Proto.SigningInput.scripts:type_name -> TW.Bitcoin.Proto.SigningInput.ScriptsEntry
	5,  // 6: TW.Bitcoin.Proto.SigningInput.utxo:type_name -> TW.Bitcoin.Proto.UnspentTransaction
	9,  // 7: TW.Bitcoin.Proto.SigningInput.plan:type_name -> TW.Bitcoin.Proto.TransactionPlan
	7,  // 8: TW.Bitcoin.Proto.SigningInput.output_op_return_index:type_name -> TW.Bitcoin.Proto.OutputIndex
	6,  // 9: TW.Bitcoin.Proto.SigningInput.extra_outputs:type_name -> TW.Bitcoin.Proto.OutputAddress
	14, // 10: TW.Bitcoin.Proto.SigningInput.signing_v2:type_name -> TW.BitcoinV2.Proto.SigningInput
	5,  // 11: TW.Bitcoin.Proto.TransactionPlan.utxos:type_name -> TW.Bitcoin.Proto.UnspentTransaction
	15, // 12: TW.Bitcoin.Proto.TransactionPlan.error:type_name -> TW.Common.Proto.SigningError
	7,  // 13: TW.Bitcoin.Proto.TransactionPlan.output_op_return_index:type_name -> TW.Bitcoin.Proto.OutputIndex
	16, // 14: TW.Bitcoin.Proto.TransactionPlan.planning_result_v2:type_name -> TW.BitcoinV2.Proto.TransactionPlan
	1,  // 15: TW.Bitcoin.Proto.SigningOutput.transaction:type_name -> TW.Bitcoin.Proto.Transaction
	15, // 16: TW.Bitcoin.Proto.SigningOutput.error:type_name -> TW.Common.Proto.SigningError
	17, // 17: TW.Bitcoin.Proto.SigningOutput.signing_result_v2:type_name -> TW.BitcoinV2.Proto.SigningOutput
	11, // 18: TW.Bitcoin.Proto.PreSigningOutput.hash_public_keys:type_name -> TW.Bitcoin.Proto.HashPublicKey
	15, // 19: TW.Bitcoin.Proto.PreSigningOutput.error:type_name -> TW.Common.Proto.SigningError
	18, // 20: TW.Bitcoin.Proto.PreSigningOutput.pre_signing_result_v2:type_name -> TW.BitcoinV2.Proto.PreSigningOutput
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_Bitcoin_proto_init() }
func file_Bitcoin_proto_init() {
	if File_Bitcoin_proto != nil {
		return
	}
	file_Bitcoin_proto_msgTypes[7].OneofWrappers = []any{
		(*SigningInput_FixedDustThreshold)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_Bitcoin_proto_rawDesc), len(file_Bitcoin_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Bitcoin_proto_goTypes,
		DependencyIndexes: file_Bitcoin_proto_depIdxs,
		EnumInfos:         file_Bitcoin_proto_enumTypes,
		MessageInfos:      file_Bitcoin_proto_msgTypes,
	}.Build()
	File_Bitcoin_proto = out.File
	file_Bitcoin_proto_goTypes = nil
	file_Bitcoin_proto_depIdxs = nil
}
