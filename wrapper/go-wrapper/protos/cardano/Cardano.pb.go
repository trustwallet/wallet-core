// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.20.3
// source: Cardano.proto

package cardano

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	common "tw/protos/common"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VoteDelegation_DRepType int32

const (
	VoteDelegation_DREP_ID             VoteDelegation_DRepType = 0
	VoteDelegation_DREP_ALWAYS_ABSTAIN VoteDelegation_DRepType = 2
	VoteDelegation_DREP_NO_CONFIDENCE  VoteDelegation_DRepType = 3
)

// Enum value maps for VoteDelegation_DRepType.
var (
	VoteDelegation_DRepType_name = map[int32]string{
		0: "DREP_ID",
		2: "DREP_ALWAYS_ABSTAIN",
		3: "DREP_NO_CONFIDENCE",
	}
	VoteDelegation_DRepType_value = map[string]int32{
		"DREP_ID":             0,
		"DREP_ALWAYS_ABSTAIN": 2,
		"DREP_NO_CONFIDENCE":  3,
	}
)

func (x VoteDelegation_DRepType) Enum() *VoteDelegation_DRepType {
	p := new(VoteDelegation_DRepType)
	*p = x
	return p
}

func (x VoteDelegation_DRepType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VoteDelegation_DRepType) Descriptor() protoreflect.EnumDescriptor {
	return file_Cardano_proto_enumTypes[0].Descriptor()
}

func (VoteDelegation_DRepType) Type() protoreflect.EnumType {
	return &file_Cardano_proto_enumTypes[0]
}

func (x VoteDelegation_DRepType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VoteDelegation_DRepType.Descriptor instead.
func (VoteDelegation_DRepType) EnumDescriptor() ([]byte, []int) {
	return file_Cardano_proto_rawDescGZIP(), []int{8, 0}
}

// A transaction output that can be used as input
type OutPoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The transaction ID
	TxHash []byte `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// The index of this output within the transaction
	OutputIndex   uint64 `protobuf:"varint,2,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OutPoint) Reset() {
	*x = OutPoint{}
	mi := &file_Cardano_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutPoint) ProtoMessage() {}

func (x *OutPoint) ProtoReflect() protoreflect.Message {
	mi := &file_Cardano_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutPoint.ProtoReflect.Descriptor instead.
func (*OutPoint) Descriptor() ([]byte, []int) {
	return file_Cardano_proto_rawDescGZIP(), []int{0}
}

func (x *OutPoint) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *OutPoint) GetOutputIndex() uint64 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

// Represents a token and an amount. Token is identified by PolicyID and name.
type TokenAmount struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Policy ID of the token, as hex string (28x2 digits)
	PolicyId string `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	// The name of the asset (within the policy)
	AssetName string `protobuf:"bytes,2,opt,name=asset_name,json=assetName,proto3" json:"asset_name,omitempty"`
	// The amount (uint256, serialized big endian)
	Amount []byte `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// The name of the asset (hex encoded). Ignored if `asset_name` is set
	AssetNameHex  string `protobuf:"bytes,4,opt,name=asset_name_hex,json=assetNameHex,proto3" json:"asset_name_hex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenAmount) Reset() {
	*x = TokenAmount{}
	mi := &file_Cardano_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenAmount) ProtoMessage() {}

func (x *TokenAmount) ProtoReflect() protoreflect.Message {
	mi := &file_Cardano_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenAmount.ProtoReflect.Descriptor instead.
func (*TokenAmount) Descriptor() ([]byte, []int) {
	return file_Cardano_proto_rawDescGZIP(), []int{1}
}

func (x *TokenAmount) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *TokenAmount) GetAssetName() string {
	if x != nil {
		return x.AssetName
	}
	return ""
}

func (x *TokenAmount) GetAmount() []byte {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *TokenAmount) GetAssetNameHex() string {
	if x != nil {
		return x.AssetNameHex
	}
	return ""
}

// One input for a transaction
type TxInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The UTXO
	OutPoint *OutPoint `protobuf:"bytes,1,opt,name=out_point,json=outPoint,proto3" json:"out_point,omitempty"`
	// The owner address (string)
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// ADA amount in the UTXO
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// optional token amounts in the UTXO
	TokenAmount   []*TokenAmount `protobuf:"bytes,4,rep,name=token_amount,json=tokenAmount,proto3" json:"token_amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxInput) Reset() {
	*x = TxInput{}
	mi := &file_Cardano_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxInput) ProtoMessage() {}

func (x *TxInput) ProtoReflect() protoreflect.Message {
	mi := &file_Cardano_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxInput.ProtoReflect.Descriptor instead.
func (*TxInput) Descriptor() ([]byte, []int) {
	return file_Cardano_proto_rawDescGZIP(), []int{2}
}

func (x *TxInput) GetOutPoint() *OutPoint {
	if x != nil {
		return x.OutPoint
	}
	return nil
}

func (x *TxInput) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TxInput) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TxInput) GetTokenAmount() []*TokenAmount {
	if x != nil {
		return x.TokenAmount
	}
	return nil
}

// One output for a transaction
type TxOutput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Destination address (string)
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// ADA amount
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// optional token amounts
	TokenAmount   []*TokenAmount `protobuf:"bytes,3,rep,name=token_amount,json=tokenAmount,proto3" json:"token_amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxOutput) Reset() {
	*x = TxOutput{}
	mi := &file_Cardano_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxOutput) ProtoMessage() {}

func (x *TxOutput) ProtoReflect() protoreflect.Message {
	mi := &file_Cardano_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxOutput.ProtoReflect.Descriptor instead.
func (*TxOutput) Descriptor() ([]byte, []int) {
	return file_Cardano_proto_rawDescGZIP(), []int{3}
}

func (x *TxOutput) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TxOutput) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TxOutput) GetTokenAmount() []*TokenAmount {
	if x != nil {
		return x.TokenAmount
	}
	return nil
}

// Collection of tokens with amount
type TokenBundle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         []*TokenAmount         `protobuf:"bytes,1,rep,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenBundle) Reset() {
	*x = TokenBundle{}
	mi := &file_Cardano_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenBundle) ProtoMessage() {}

func (x *TokenBundle) ProtoReflect() protoreflect.Message {
	mi := &file_Cardano_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenBundle.ProtoReflect.Descriptor instead.
func (*TokenBundle) Descriptor() ([]byte, []int) {
	return file_Cardano_proto_rawDescGZIP(), []int{4}
}

func (x *TokenBundle) GetToken() []*TokenAmount {
	if x != nil {
		return x.Token
	}
	return nil
}

// Message for simple Transfer tx
type Transfer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Destination address as string
	ToAddress string `protobuf:"bytes,1,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// Change address
	ChangeAddress string `protobuf:"bytes,2,opt,name=change_address,json=changeAddress,proto3" json:"change_address,omitempty"`
	// Requested ADA amount to be transferred. Output can be different only in use_max_amount case.
	// Note that Cardano has a minimum amount per UTXO, see TWCardanoMinAdaAmount.
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// Optional token(s) to be transferred
	// Currently only one token type to be transferred per transaction is supported
	TokenAmount *TokenBundle `protobuf:"bytes,4,opt,name=token_amount,json=tokenAmount,proto3" json:"token_amount,omitempty"`
	// Request max amount option. If set, tx will send all possible amounts from all inputs, including all tokens; there will be no change; requested amount and token_amount is disregarded in this case.
	UseMaxAmount bool `protobuf:"varint,5,opt,name=use_max_amount,json=useMaxAmount,proto3" json:"use_max_amount,omitempty"`
	// Optional fee overriding. If left to 0, optimal fee will be calculated. If set, exactly this value will be used as fee.
	// Use it with care, it may result in underfunded or wasteful fee.
	ForceFee      uint64 `protobuf:"varint,6,opt,name=force_fee,json=forceFee,proto3" json:"force_fee,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	mi := &file_Cardano_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_Cardano_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_Cardano_proto_rawDescGZIP(), []int{5}
}

func (x *Transfer) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *Transfer) GetChangeAddress() string {
	if x != nil {
		return x.ChangeAddress
	}
	return ""
}

func (x *Transfer) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Transfer) GetTokenAmount() *TokenBundle {
	if x != nil {
		return x.TokenAmount
	}
	return nil
}

func (x *Transfer) GetUseMaxAmount() bool {
	if x != nil {
		return x.UseMaxAmount
	}
	return false
}

func (x *Transfer) GetForceFee() uint64 {
	if x != nil {
		return x.ForceFee
	}
	return 0
}

// Register a staking key for the account, prerequisite for Staking.
// Note: staking messages are typically used with a 1-output-to-self transaction.
type RegisterStakingKey struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Staking address (as string)
	StakingAddress string `protobuf:"bytes,1,opt,name=staking_address,json=stakingAddress,proto3" json:"staking_address,omitempty"`
	// Amount deposited in this TX. Should be 2 ADA (2000000). If not set correctly, TX will be rejected. See also Delegate.deposit_amount.
	DepositAmount uint64 `protobuf:"varint,2,opt,name=deposit_amount,json=depositAmount,proto3" json:"deposit_amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterStakingKey) Reset() {
	*x = RegisterStakingKey{}
	mi := &file_Cardano_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterStakingKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterStakingKey) ProtoMessage() {}

func (x *RegisterStakingKey) ProtoReflect() protoreflect.Message {
	mi := &file_Cardano_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterStakingKey.ProtoReflect.Descriptor instead.
func (*RegisterStakingKey) Descriptor() ([]byte, []int) {
	return file_Cardano_proto_rawDescGZIP(), []int{6}
}

func (x *RegisterStakingKey) GetStakingAddress() string {
	if x != nil {
		return x.StakingAddress
	}
	return ""
}

func (x *RegisterStakingKey) GetDepositAmount() uint64 {
	if x != nil {
		return x.DepositAmount
	}
	return 0
}

// Deregister staking key. can be done when staking is stopped completely. The Staking deposit is returned at this time.
type DeregisterStakingKey struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Staking address (as string)
	StakingAddress string `protobuf:"bytes,1,opt,name=staking_address,json=stakingAddress,proto3" json:"staking_address,omitempty"`
	// Amount undeposited in this TX. Should be 2 ADA (2000000). If not set correctly, TX will be rejected. See also RegisterStakingKey.deposit_amount.
	UndepositAmount uint64 `protobuf:"varint,2,opt,name=undeposit_amount,json=undepositAmount,proto3" json:"undeposit_amount,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DeregisterStakingKey) Reset() {
	*x = DeregisterStakingKey{}
	mi := &file_Cardano_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeregisterStakingKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeregisterStakingKey) ProtoMessage() {}

func (x *DeregisterStakingKey) ProtoReflect() protoreflect.Message {
	mi := &file_Cardano_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeregisterStakingKey.ProtoReflect.Descriptor instead.
func (*DeregisterStakingKey) Descriptor() ([]byte, []int) {
	return file_Cardano_proto_rawDescGZIP(), []int{7}
}

func (x *DeregisterStakingKey) GetStakingAddress() string {
	if x != nil {
		return x.StakingAddress
	}
	return ""
}

func (x *DeregisterStakingKey) GetUndepositAmount() uint64 {
	if x != nil {
		return x.UndepositAmount
	}
	return 0
}

// Vote delegation to a specific DRep or always abstain or no confidence
type VoteDelegation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Staking address (as string)
	StakingAddress string `protobuf:"bytes,1,opt,name=staking_address,json=stakingAddress,proto3" json:"staking_address,omitempty"`
	// DRep type
	DrepType VoteDelegation_DRepType `protobuf:"varint,2,opt,name=drep_type,json=drepType,proto3,enum=TW.Cardano.Proto.VoteDelegation_DRepType" json:"drep_type,omitempty"`
	// DRep ID (only used when drep_type is DREP_ID)
	DrepId        string `protobuf:"bytes,3,opt,name=drep_id,json=drepId,proto3" json:"drep_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VoteDelegation) Reset() {
	*x = VoteDelegation{}
	mi := &file_Cardano_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoteDelegation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteDelegation) ProtoMessage() {}

func (x *VoteDelegation) ProtoReflect() protoreflect.Message {
	mi := &file_Cardano_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteDelegation.ProtoReflect.Descriptor instead.
func (*VoteDelegation) Descriptor() ([]byte, []int) {
	return file_Cardano_proto_rawDescGZIP(), []int{8}
}

func (x *VoteDelegation) GetStakingAddress() string {
	if x != nil {
		return x.StakingAddress
	}
	return ""
}

func (x *VoteDelegation) GetDrepType() VoteDelegation_DRepType {
	if x != nil {
		return x.DrepType
	}
	return VoteDelegation_DREP_ID
}

func (x *VoteDelegation) GetDrepId() string {
	if x != nil {
		return x.DrepId
	}
	return ""
}

// Delegate funds in this account to a specified staking pool.
type Delegate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Staking address (as string)
	StakingAddress string `protobuf:"bytes,1,opt,name=staking_address,json=stakingAddress,proto3" json:"staking_address,omitempty"`
	// PoolID of staking pool
	PoolId []byte `protobuf:"bytes,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// Amount deposited in this TX. Should be 0. If not set correctly, TX will be rejected. See also RegisterStakingKey.deposit_amount.
	DepositAmount uint64 `protobuf:"varint,3,opt,name=deposit_amount,json=depositAmount,proto3" json:"deposit_amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Delegate) Reset() {
	*x = Delegate{}
	mi := &file_Cardano_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Delegate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Delegate) ProtoMessage() {}

func (x *Delegate) ProtoReflect() protoreflect.Message {
	mi := &file_Cardano_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Delegate.ProtoReflect.Descriptor instead.
func (*Delegate) Descriptor() ([]byte, []int) {
	return file_Cardano_proto_rawDescGZIP(), []int{9}
}

func (x *Delegate) GetStakingAddress() string {
	if x != nil {
		return x.StakingAddress
	}
	return ""
}

func (x *Delegate) GetPoolId() []byte {
	if x != nil {
		return x.PoolId
	}
	return nil
}

func (x *Delegate) GetDepositAmount() uint64 {
	if x != nil {
		return x.DepositAmount
	}
	return 0
}

// Withdraw earned staking reward.
type Withdraw struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Staking address (as string)
	StakingAddress string `protobuf:"bytes,1,opt,name=staking_address,json=stakingAddress,proto3" json:"staking_address,omitempty"`
	// Withdrawal amount. Should match the real value of the earned reward.
	WithdrawAmount uint64 `protobuf:"varint,2,opt,name=withdraw_amount,json=withdrawAmount,proto3" json:"withdraw_amount,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Withdraw) Reset() {
	*x = Withdraw{}
	mi := &file_Cardano_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Withdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Withdraw) ProtoMessage() {}

func (x *Withdraw) ProtoReflect() protoreflect.Message {
	mi := &file_Cardano_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Withdraw.ProtoReflect.Descriptor instead.
func (*Withdraw) Descriptor() ([]byte, []int) {
	return file_Cardano_proto_rawDescGZIP(), []int{10}
}

func (x *Withdraw) GetStakingAddress() string {
	if x != nil {
		return x.StakingAddress
	}
	return ""
}

func (x *Withdraw) GetWithdrawAmount() uint64 {
	if x != nil {
		return x.WithdrawAmount
	}
	return 0
}

// Describes a preliminary transaction plan.
type TransactionPlan struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// total coins in the utxos
	AvailableAmount uint64 `protobuf:"varint,1,opt,name=available_amount,json=availableAmount,proto3" json:"available_amount,omitempty"`
	// coins in the output UTXO
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// coin amount deducted as fee
	Fee uint64 `protobuf:"varint,3,opt,name=fee,proto3" json:"fee,omitempty"`
	// coins in the change UTXO
	Change uint64 `protobuf:"varint,4,opt,name=change,proto3" json:"change,omitempty"`
	// coins deposited (going to deposit) in this TX
	Deposit uint64 `protobuf:"varint,10,opt,name=deposit,proto3" json:"deposit,omitempty"`
	// coins undeposited (coming from deposit) in this TX
	Undeposit uint64 `protobuf:"varint,11,opt,name=undeposit,proto3" json:"undeposit,omitempty"`
	// total tokens in the utxos (optional)
	AvailableTokens []*TokenAmount `protobuf:"bytes,5,rep,name=available_tokens,json=availableTokens,proto3" json:"available_tokens,omitempty"`
	// tokens in the output (optional)
	OutputTokens []*TokenAmount `protobuf:"bytes,6,rep,name=output_tokens,json=outputTokens,proto3" json:"output_tokens,omitempty"`
	// tokens in the change (optional)
	ChangeTokens []*TokenAmount `protobuf:"bytes,7,rep,name=change_tokens,json=changeTokens,proto3" json:"change_tokens,omitempty"`
	// The selected UTXOs, subset ot the input UTXOs
	Utxos []*TxInput `protobuf:"bytes,8,rep,name=utxos,proto3" json:"utxos,omitempty"`
	// Optional error
	Error common.SigningError `protobuf:"varint,9,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// Optional additional destination addresses, additional to first to_address output
	ExtraOutputs  []*TxOutput `protobuf:"bytes,12,rep,name=extra_outputs,json=extraOutputs,proto3" json:"extra_outputs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionPlan) Reset() {
	*x = TransactionPlan{}
	mi := &file_Cardano_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionPlan) ProtoMessage() {}

func (x *TransactionPlan) ProtoReflect() protoreflect.Message {
	mi := &file_Cardano_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionPlan.ProtoReflect.Descriptor instead.
func (*TransactionPlan) Descriptor() ([]byte, []int) {
	return file_Cardano_proto_rawDescGZIP(), []int{11}
}

func (x *TransactionPlan) GetAvailableAmount() uint64 {
	if x != nil {
		return x.AvailableAmount
	}
	return 0
}

func (x *TransactionPlan) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TransactionPlan) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *TransactionPlan) GetChange() uint64 {
	if x != nil {
		return x.Change
	}
	return 0
}

func (x *TransactionPlan) GetDeposit() uint64 {
	if x != nil {
		return x.Deposit
	}
	return 0
}

func (x *TransactionPlan) GetUndeposit() uint64 {
	if x != nil {
		return x.Undeposit
	}
	return 0
}

func (x *TransactionPlan) GetAvailableTokens() []*TokenAmount {
	if x != nil {
		return x.AvailableTokens
	}
	return nil
}

func (x *TransactionPlan) GetOutputTokens() []*TokenAmount {
	if x != nil {
		return x.OutputTokens
	}
	return nil
}

func (x *TransactionPlan) GetChangeTokens() []*TokenAmount {
	if x != nil {
		return x.ChangeTokens
	}
	return nil
}

func (x *TransactionPlan) GetUtxos() []*TxInput {
	if x != nil {
		return x.Utxos
	}
	return nil
}

func (x *TransactionPlan) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *TransactionPlan) GetExtraOutputs() []*TxOutput {
	if x != nil {
		return x.ExtraOutputs
	}
	return nil
}

// Input data necessary to create a signed transaction.
type SigningInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Available input UTXOs
	Utxos []*TxInput `protobuf:"bytes,1,rep,name=utxos,proto3" json:"utxos,omitempty"`
	// Available private keys (double extended keys); every input UTXO address should be covered
	// In case of Plan only, keys should be present, in correct number
	PrivateKey [][]byte `protobuf:"bytes,2,rep,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// Later this can be made oneof if more message types are supported
	TransferMessage *Transfer `protobuf:"bytes,3,opt,name=transfer_message,json=transferMessage,proto3" json:"transfer_message,omitempty"`
	// Optional, used in case of Staking Key registration (prerequisite for Staking)
	RegisterStakingKey *RegisterStakingKey `protobuf:"bytes,6,opt,name=register_staking_key,json=registerStakingKey,proto3" json:"register_staking_key,omitempty"`
	// Optional, used in case of (re)delegation
	Delegate *Delegate `protobuf:"bytes,7,opt,name=delegate,proto3" json:"delegate,omitempty"`
	// Optional, used in case of withdraw
	Withdraw *Withdraw `protobuf:"bytes,8,opt,name=withdraw,proto3" json:"withdraw,omitempty"`
	// Optional
	DeregisterStakingKey *DeregisterStakingKey `protobuf:"bytes,9,opt,name=deregister_staking_key,json=deregisterStakingKey,proto3" json:"deregister_staking_key,omitempty"`
	// Optional, used for vote delegation
	VoteDelegation *VoteDelegation `protobuf:"bytes,11,opt,name=vote_delegation,json=voteDelegation,proto3" json:"vote_delegation,omitempty"`
	// Time-to-live time of the TX
	Ttl uint64 `protobuf:"varint,4,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// Optional plan, if missing it will be computed
	Plan *TransactionPlan `protobuf:"bytes,5,opt,name=plan,proto3" json:"plan,omitempty"`
	// extra output UTXOs
	ExtraOutputs  []*TxOutput `protobuf:"bytes,10,rep,name=extra_outputs,json=extraOutputs,proto3" json:"extra_outputs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningInput) Reset() {
	*x = SigningInput{}
	mi := &file_Cardano_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningInput) ProtoMessage() {}

func (x *SigningInput) ProtoReflect() protoreflect.Message {
	mi := &file_Cardano_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningInput.ProtoReflect.Descriptor instead.
func (*SigningInput) Descriptor() ([]byte, []int) {
	return file_Cardano_proto_rawDescGZIP(), []int{12}
}

func (x *SigningInput) GetUtxos() []*TxInput {
	if x != nil {
		return x.Utxos
	}
	return nil
}

func (x *SigningInput) GetPrivateKey() [][]byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *SigningInput) GetTransferMessage() *Transfer {
	if x != nil {
		return x.TransferMessage
	}
	return nil
}

func (x *SigningInput) GetRegisterStakingKey() *RegisterStakingKey {
	if x != nil {
		return x.RegisterStakingKey
	}
	return nil
}

func (x *SigningInput) GetDelegate() *Delegate {
	if x != nil {
		return x.Delegate
	}
	return nil
}

func (x *SigningInput) GetWithdraw() *Withdraw {
	if x != nil {
		return x.Withdraw
	}
	return nil
}

func (x *SigningInput) GetDeregisterStakingKey() *DeregisterStakingKey {
	if x != nil {
		return x.DeregisterStakingKey
	}
	return nil
}

func (x *SigningInput) GetVoteDelegation() *VoteDelegation {
	if x != nil {
		return x.VoteDelegation
	}
	return nil
}

func (x *SigningInput) GetTtl() uint64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *SigningInput) GetPlan() *TransactionPlan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *SigningInput) GetExtraOutputs() []*TxOutput {
	if x != nil {
		return x.ExtraOutputs
	}
	return nil
}

// Result containing the signed and encoded transaction.
type SigningOutput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Encoded transaction bytes
	Encoded []byte `protobuf:"bytes,1,opt,name=encoded,proto3" json:"encoded,omitempty"`
	// TxID, derived from transaction data, also needed for submission
	TxId []byte `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	// Optional error
	Error common.SigningError `protobuf:"varint,3,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// error code description
	ErrorMessage  string `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningOutput) Reset() {
	*x = SigningOutput{}
	mi := &file_Cardano_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningOutput) ProtoMessage() {}

func (x *SigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_Cardano_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningOutput.ProtoReflect.Descriptor instead.
func (*SigningOutput) Descriptor() ([]byte, []int) {
	return file_Cardano_proto_rawDescGZIP(), []int{13}
}

func (x *SigningOutput) GetEncoded() []byte {
	if x != nil {
		return x.Encoded
	}
	return nil
}

func (x *SigningOutput) GetTxId() []byte {
	if x != nil {
		return x.TxId
	}
	return nil
}

func (x *SigningOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *SigningOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_Cardano_proto protoreflect.FileDescriptor

const file_Cardano_proto_rawDesc = "" +
	"\n" +
	"\rCardano.proto\x12\x10TW.Cardano.Proto\x1a\fCommon.proto\"F\n" +
	"\bOutPoint\x12\x17\n" +
	"\atx_hash\x18\x01 \x01(\fR\x06txHash\x12!\n" +
	"\foutput_index\x18\x02 \x01(\x04R\voutputIndex\"\x87\x01\n" +
	"\vTokenAmount\x12\x1b\n" +
	"\tpolicy_id\x18\x01 \x01(\tR\bpolicyId\x12\x1d\n" +
	"\n" +
	"asset_name\x18\x02 \x01(\tR\tassetName\x12\x16\n" +
	"\x06amount\x18\x03 \x01(\fR\x06amount\x12$\n" +
	"\x0easset_name_hex\x18\x04 \x01(\tR\fassetNameHex\"\xb6\x01\n" +
	"\aTxInput\x127\n" +
	"\tout_point\x18\x01 \x01(\v2\x1a.TW.Cardano.Proto.OutPointR\boutPoint\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\x12\x16\n" +
	"\x06amount\x18\x03 \x01(\x04R\x06amount\x12@\n" +
	"\ftoken_amount\x18\x04 \x03(\v2\x1d.TW.Cardano.Proto.TokenAmountR\vtokenAmount\"~\n" +
	"\bTxOutput\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x16\n" +
	"\x06amount\x18\x02 \x01(\x04R\x06amount\x12@\n" +
	"\ftoken_amount\x18\x03 \x03(\v2\x1d.TW.Cardano.Proto.TokenAmountR\vtokenAmount\"B\n" +
	"\vTokenBundle\x123\n" +
	"\x05token\x18\x01 \x03(\v2\x1d.TW.Cardano.Proto.TokenAmountR\x05token\"\xed\x01\n" +
	"\bTransfer\x12\x1d\n" +
	"\n" +
	"to_address\x18\x01 \x01(\tR\ttoAddress\x12%\n" +
	"\x0echange_address\x18\x02 \x01(\tR\rchangeAddress\x12\x16\n" +
	"\x06amount\x18\x03 \x01(\x04R\x06amount\x12@\n" +
	"\ftoken_amount\x18\x04 \x01(\v2\x1d.TW.Cardano.Proto.TokenBundleR\vtokenAmount\x12$\n" +
	"\x0euse_max_amount\x18\x05 \x01(\bR\fuseMaxAmount\x12\x1b\n" +
	"\tforce_fee\x18\x06 \x01(\x04R\bforceFee\"d\n" +
	"\x12RegisterStakingKey\x12'\n" +
	"\x0fstaking_address\x18\x01 \x01(\tR\x0estakingAddress\x12%\n" +
	"\x0edeposit_amount\x18\x02 \x01(\x04R\rdepositAmount\"j\n" +
	"\x14DeregisterStakingKey\x12'\n" +
	"\x0fstaking_address\x18\x01 \x01(\tR\x0estakingAddress\x12)\n" +
	"\x10undeposit_amount\x18\x02 \x01(\x04R\x0fundepositAmount\"\xe4\x01\n" +
	"\x0eVoteDelegation\x12'\n" +
	"\x0fstaking_address\x18\x01 \x01(\tR\x0estakingAddress\x12F\n" +
	"\tdrep_type\x18\x02 \x01(\x0e2).TW.Cardano.Proto.VoteDelegation.DRepTypeR\bdrepType\x12\x17\n" +
	"\adrep_id\x18\x03 \x01(\tR\x06drepId\"H\n" +
	"\bDRepType\x12\v\n" +
	"\aDREP_ID\x10\x00\x12\x17\n" +
	"\x13DREP_ALWAYS_ABSTAIN\x10\x02\x12\x16\n" +
	"\x12DREP_NO_CONFIDENCE\x10\x03\"s\n" +
	"\bDelegate\x12'\n" +
	"\x0fstaking_address\x18\x01 \x01(\tR\x0estakingAddress\x12\x17\n" +
	"\apool_id\x18\x02 \x01(\fR\x06poolId\x12%\n" +
	"\x0edeposit_amount\x18\x03 \x01(\x04R\rdepositAmount\"\\\n" +
	"\bWithdraw\x12'\n" +
	"\x0fstaking_address\x18\x01 \x01(\tR\x0estakingAddress\x12'\n" +
	"\x0fwithdraw_amount\x18\x02 \x01(\x04R\x0ewithdrawAmount\"\xaf\x04\n" +
	"\x0fTransactionPlan\x12)\n" +
	"\x10available_amount\x18\x01 \x01(\x04R\x0favailableAmount\x12\x16\n" +
	"\x06amount\x18\x02 \x01(\x04R\x06amount\x12\x10\n" +
	"\x03fee\x18\x03 \x01(\x04R\x03fee\x12\x16\n" +
	"\x06change\x18\x04 \x01(\x04R\x06change\x12\x18\n" +
	"\adeposit\x18\n" +
	" \x01(\x04R\adeposit\x12\x1c\n" +
	"\tundeposit\x18\v \x01(\x04R\tundeposit\x12H\n" +
	"\x10available_tokens\x18\x05 \x03(\v2\x1d.TW.Cardano.Proto.TokenAmountR\x0favailableTokens\x12B\n" +
	"\routput_tokens\x18\x06 \x03(\v2\x1d.TW.Cardano.Proto.TokenAmountR\foutputTokens\x12B\n" +
	"\rchange_tokens\x18\a \x03(\v2\x1d.TW.Cardano.Proto.TokenAmountR\fchangeTokens\x12/\n" +
	"\x05utxos\x18\b \x03(\v2\x19.TW.Cardano.Proto.TxInputR\x05utxos\x123\n" +
	"\x05error\x18\t \x01(\x0e2\x1d.TW.Common.Proto.SigningErrorR\x05error\x12?\n" +
	"\rextra_outputs\x18\f \x03(\v2\x1a.TW.Cardano.Proto.TxOutputR\fextraOutputs\"\xa2\x05\n" +
	"\fSigningInput\x12/\n" +
	"\x05utxos\x18\x01 \x03(\v2\x19.TW.Cardano.Proto.TxInputR\x05utxos\x12\x1f\n" +
	"\vprivate_key\x18\x02 \x03(\fR\n" +
	"privateKey\x12E\n" +
	"\x10transfer_message\x18\x03 \x01(\v2\x1a.TW.Cardano.Proto.TransferR\x0ftransferMessage\x12V\n" +
	"\x14register_staking_key\x18\x06 \x01(\v2$.TW.Cardano.Proto.RegisterStakingKeyR\x12registerStakingKey\x126\n" +
	"\bdelegate\x18\a \x01(\v2\x1a.TW.Cardano.Proto.DelegateR\bdelegate\x126\n" +
	"\bwithdraw\x18\b \x01(\v2\x1a.TW.Cardano.Proto.WithdrawR\bwithdraw\x12\\\n" +
	"\x16deregister_staking_key\x18\t \x01(\v2&.TW.Cardano.Proto.DeregisterStakingKeyR\x14deregisterStakingKey\x12I\n" +
	"\x0fvote_delegation\x18\v \x01(\v2 .TW.Cardano.Proto.VoteDelegationR\x0evoteDelegation\x12\x10\n" +
	"\x03ttl\x18\x04 \x01(\x04R\x03ttl\x125\n" +
	"\x04plan\x18\x05 \x01(\v2!.TW.Cardano.Proto.TransactionPlanR\x04plan\x12?\n" +
	"\rextra_outputs\x18\n" +
	" \x03(\v2\x1a.TW.Cardano.Proto.TxOutputR\fextraOutputs\"\x98\x01\n" +
	"\rSigningOutput\x12\x18\n" +
	"\aencoded\x18\x01 \x01(\fR\aencoded\x12\x13\n" +
	"\x05tx_id\x18\x02 \x01(\fR\x04txId\x123\n" +
	"\x05error\x18\x03 \x01(\x0e2\x1d.TW.Common.Proto.SigningErrorR\x05error\x12#\n" +
	"\rerror_message\x18\x04 \x01(\tR\ferrorMessageB\x17\n" +
	"\x15wallet.core.jni.protob\x06proto3"

var (
	file_Cardano_proto_rawDescOnce sync.Once
	file_Cardano_proto_rawDescData []byte
)

func file_Cardano_proto_rawDescGZIP() []byte {
	file_Cardano_proto_rawDescOnce.Do(func() {
		file_Cardano_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_Cardano_proto_rawDesc), len(file_Cardano_proto_rawDesc)))
	})
	return file_Cardano_proto_rawDescData
}

var file_Cardano_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_Cardano_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_Cardano_proto_goTypes = []any{
	(VoteDelegation_DRepType)(0), // 0: TW.Cardano.Proto.VoteDelegation.DRepType
	(*OutPoint)(nil),             // 1: TW.Cardano.Proto.OutPoint
	(*TokenAmount)(nil),          // 2: TW.Cardano.Proto.TokenAmount
	(*TxInput)(nil),              // 3: TW.Cardano.Proto.TxInput
	(*TxOutput)(nil),             // 4: TW.Cardano.Proto.TxOutput
	(*TokenBundle)(nil),          // 5: TW.Cardano.Proto.TokenBundle
	(*Transfer)(nil),             // 6: TW.Cardano.Proto.Transfer
	(*RegisterStakingKey)(nil),   // 7: TW.Cardano.Proto.RegisterStakingKey
	(*DeregisterStakingKey)(nil), // 8: TW.Cardano.Proto.DeregisterStakingKey
	(*VoteDelegation)(nil),       // 9: TW.Cardano.Proto.VoteDelegation
	(*Delegate)(nil),             // 10: TW.Cardano.Proto.Delegate
	(*Withdraw)(nil),             // 11: TW.Cardano.Proto.Withdraw
	(*TransactionPlan)(nil),      // 12: TW.Cardano.Proto.TransactionPlan
	(*SigningInput)(nil),         // 13: TW.Cardano.Proto.SigningInput
	(*SigningOutput)(nil),        // 14: TW.Cardano.Proto.SigningOutput
	(common.SigningError)(0),     // 15: TW.Common.Proto.SigningError
}
var file_Cardano_proto_depIdxs = []int32{
	1,  // 0: TW.Cardano.Proto.TxInput.out_point:type_name -> TW.Cardano.Proto.OutPoint
	2,  // 1: TW.Cardano.Proto.TxInput.token_amount:type_name -> TW.Cardano.Proto.TokenAmount
	2,  // 2: TW.Cardano.Proto.TxOutput.token_amount:type_name -> TW.Cardano.Proto.TokenAmount
	2,  // 3: TW.Cardano.Proto.TokenBundle.token:type_name -> TW.Cardano.Proto.TokenAmount
	5,  // 4: TW.Cardano.Proto.Transfer.token_amount:type_name -> TW.Cardano.Proto.TokenBundle
	0,  // 5: TW.Cardano.Proto.VoteDelegation.drep_type:type_name -> TW.Cardano.Proto.VoteDelegation.DRepType
	2,  // 6: TW.Cardano.Proto.TransactionPlan.available_tokens:type_name -> TW.Cardano.Proto.TokenAmount
	2,  // 7: TW.Cardano.Proto.TransactionPlan.output_tokens:type_name -> TW.Cardano.Proto.TokenAmount
	2,  // 8: TW.Cardano.Proto.TransactionPlan.change_tokens:type_name -> TW.Cardano.Proto.TokenAmount
	3,  // 9: TW.Cardano.Proto.TransactionPlan.utxos:type_name -> TW.Cardano.Proto.TxInput
	15, // 10: TW.Cardano.Proto.TransactionPlan.error:type_name -> TW.Common.Proto.SigningError
	4,  // 11: TW.Cardano.Proto.TransactionPlan.extra_outputs:type_name -> TW.Cardano.Proto.TxOutput
	3,  // 12: TW.Cardano.Proto.SigningInput.utxos:type_name -> TW.Cardano.Proto.TxInput
	6,  // 13: TW.Cardano.Proto.SigningInput.transfer_message:type_name -> TW.Cardano.Proto.Transfer
	7,  // 14: TW.Cardano.Proto.SigningInput.register_staking_key:type_name -> TW.Cardano.Proto.RegisterStakingKey
	10, // 15: TW.Cardano.Proto.SigningInput.delegate:type_name -> TW.Cardano.Proto.Delegate
	11, // 16: TW.Cardano.Proto.SigningInput.withdraw:type_name -> TW.Cardano.Proto.Withdraw
	8,  // 17: TW.Cardano.Proto.SigningInput.deregister_staking_key:type_name -> TW.Cardano.Proto.DeregisterStakingKey
	9,  // 18: TW.Cardano.Proto.SigningInput.vote_delegation:type_name -> TW.Cardano.Proto.VoteDelegation
	12, // 19: TW.Cardano.Proto.SigningInput.plan:type_name -> TW.Cardano.Proto.TransactionPlan
	4,  // 20: TW.Cardano.Proto.SigningInput.extra_outputs:type_name -> TW.Cardano.Proto.TxOutput
	15, // 21: TW.Cardano.Proto.SigningOutput.error:type_name -> TW.Common.Proto.SigningError
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_Cardano_proto_init() }
func file_Cardano_proto_init() {
	if File_Cardano_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_Cardano_proto_rawDesc), len(file_Cardano_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Cardano_proto_goTypes,
		DependencyIndexes: file_Cardano_proto_depIdxs,
		EnumInfos:         file_Cardano_proto_enumTypes,
		MessageInfos:      file_Cardano_proto_msgTypes,
	}.Build()
	File_Cardano_proto = out.File
	file_Cardano_proto_goTypes = nil
	file_Cardano_proto_depIdxs = nil
}
