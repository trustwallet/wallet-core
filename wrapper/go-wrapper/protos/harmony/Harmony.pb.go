// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.20.3
// source: Harmony.proto

package harmony

import (
	common "github.com/Cramiumlabs/wallet-core/wrapper/go-wrapper/protos/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Input data necessary to create a signed transaction.
type SigningInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Chain identifier (uint256, serialized big endian)
	ChainId []byte `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// The secret private key used for signing (32 bytes).
	PrivateKey []byte `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// The payload message
	//
	// Types that are valid to be assigned to MessageOneof:
	//
	//	*SigningInput_TransactionMessage
	//	*SigningInput_StakingMessage
	MessageOneof  isSigningInput_MessageOneof `protobuf_oneof:"message_oneof"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningInput) Reset() {
	*x = SigningInput{}
	mi := &file_Harmony_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningInput) ProtoMessage() {}

func (x *SigningInput) ProtoReflect() protoreflect.Message {
	mi := &file_Harmony_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningInput.ProtoReflect.Descriptor instead.
func (*SigningInput) Descriptor() ([]byte, []int) {
	return file_Harmony_proto_rawDescGZIP(), []int{0}
}

func (x *SigningInput) GetChainId() []byte {
	if x != nil {
		return x.ChainId
	}
	return nil
}

func (x *SigningInput) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *SigningInput) GetMessageOneof() isSigningInput_MessageOneof {
	if x != nil {
		return x.MessageOneof
	}
	return nil
}

func (x *SigningInput) GetTransactionMessage() *TransactionMessage {
	if x != nil {
		if x, ok := x.MessageOneof.(*SigningInput_TransactionMessage); ok {
			return x.TransactionMessage
		}
	}
	return nil
}

func (x *SigningInput) GetStakingMessage() *StakingMessage {
	if x != nil {
		if x, ok := x.MessageOneof.(*SigningInput_StakingMessage); ok {
			return x.StakingMessage
		}
	}
	return nil
}

type isSigningInput_MessageOneof interface {
	isSigningInput_MessageOneof()
}

type SigningInput_TransactionMessage struct {
	TransactionMessage *TransactionMessage `protobuf:"bytes,3,opt,name=transaction_message,json=transactionMessage,proto3,oneof"`
}

type SigningInput_StakingMessage struct {
	StakingMessage *StakingMessage `protobuf:"bytes,4,opt,name=staking_message,json=stakingMessage,proto3,oneof"`
}

func (*SigningInput_TransactionMessage) isSigningInput_MessageOneof() {}

func (*SigningInput_StakingMessage) isSigningInput_MessageOneof() {}

// Result containing the signed and encoded transaction.
type SigningOutput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Signed and encoded transaction bytes.
	Encoded []byte `protobuf:"bytes,1,opt,name=encoded,proto3" json:"encoded,omitempty"`
	// THE V,R,S components of the signature
	V []byte `protobuf:"bytes,2,opt,name=v,proto3" json:"v,omitempty"`
	R []byte `protobuf:"bytes,3,opt,name=r,proto3" json:"r,omitempty"`
	S []byte `protobuf:"bytes,4,opt,name=s,proto3" json:"s,omitempty"`
	// error code, 0 is ok, other codes will be treated as errors
	Error common.SigningError `protobuf:"varint,5,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// error code description
	ErrorMessage  string `protobuf:"bytes,6,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningOutput) Reset() {
	*x = SigningOutput{}
	mi := &file_Harmony_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningOutput) ProtoMessage() {}

func (x *SigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_Harmony_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningOutput.ProtoReflect.Descriptor instead.
func (*SigningOutput) Descriptor() ([]byte, []int) {
	return file_Harmony_proto_rawDescGZIP(), []int{1}
}

func (x *SigningOutput) GetEncoded() []byte {
	if x != nil {
		return x.Encoded
	}
	return nil
}

func (x *SigningOutput) GetV() []byte {
	if x != nil {
		return x.V
	}
	return nil
}

func (x *SigningOutput) GetR() []byte {
	if x != nil {
		return x.R
	}
	return nil
}

func (x *SigningOutput) GetS() []byte {
	if x != nil {
		return x.S
	}
	return nil
}

func (x *SigningOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *SigningOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// A Transfer message
type TransactionMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Nonce (uint256, serialized big endian)
	Nonce []byte `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Gas price (uint256, serialized big endian)
	GasPrice []byte `protobuf:"bytes,2,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	// Gas limit (uint256, serialized big endian)
	GasLimit []byte `protobuf:"bytes,3,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	// Recipient's address.
	ToAddress string `protobuf:"bytes,4,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// Amount to send in wei (uint256, serialized big endian)
	Amount []byte `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// Optional payload
	Payload []byte `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
	// From shard ID (uint256, serialized big endian)
	FromShardId []byte `protobuf:"bytes,7,opt,name=from_shard_id,json=fromShardId,proto3" json:"from_shard_id,omitempty"`
	// To Shard ID (uint256, serialized big endian)
	ToShardId     []byte `protobuf:"bytes,8,opt,name=to_shard_id,json=toShardId,proto3" json:"to_shard_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionMessage) Reset() {
	*x = TransactionMessage{}
	mi := &file_Harmony_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionMessage) ProtoMessage() {}

func (x *TransactionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_Harmony_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionMessage.ProtoReflect.Descriptor instead.
func (*TransactionMessage) Descriptor() ([]byte, []int) {
	return file_Harmony_proto_rawDescGZIP(), []int{2}
}

func (x *TransactionMessage) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *TransactionMessage) GetGasPrice() []byte {
	if x != nil {
		return x.GasPrice
	}
	return nil
}

func (x *TransactionMessage) GetGasLimit() []byte {
	if x != nil {
		return x.GasLimit
	}
	return nil
}

func (x *TransactionMessage) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *TransactionMessage) GetAmount() []byte {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *TransactionMessage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *TransactionMessage) GetFromShardId() []byte {
	if x != nil {
		return x.FromShardId
	}
	return nil
}

func (x *TransactionMessage) GetToShardId() []byte {
	if x != nil {
		return x.ToShardId
	}
	return nil
}

// A Staking message.
type StakingMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// StakeMsg
	//
	// Types that are valid to be assigned to StakeMsg:
	//
	//	*StakingMessage_CreateValidatorMessage
	//	*StakingMessage_EditValidatorMessage
	//	*StakingMessage_DelegateMessage
	//	*StakingMessage_UndelegateMessage
	//	*StakingMessage_CollectRewards
	StakeMsg isStakingMessage_StakeMsg `protobuf_oneof:"stake_msg"`
	// Nonce (uint256, serialized big endian)
	Nonce []byte `protobuf:"bytes,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Gas price (uint256, serialized big endian)
	GasPrice []byte `protobuf:"bytes,7,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	// Gas limit (uint256, serialized big endian)
	GasLimit      []byte `protobuf:"bytes,8,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StakingMessage) Reset() {
	*x = StakingMessage{}
	mi := &file_Harmony_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StakingMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingMessage) ProtoMessage() {}

func (x *StakingMessage) ProtoReflect() protoreflect.Message {
	mi := &file_Harmony_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingMessage.ProtoReflect.Descriptor instead.
func (*StakingMessage) Descriptor() ([]byte, []int) {
	return file_Harmony_proto_rawDescGZIP(), []int{3}
}

func (x *StakingMessage) GetStakeMsg() isStakingMessage_StakeMsg {
	if x != nil {
		return x.StakeMsg
	}
	return nil
}

func (x *StakingMessage) GetCreateValidatorMessage() *DirectiveCreateValidator {
	if x != nil {
		if x, ok := x.StakeMsg.(*StakingMessage_CreateValidatorMessage); ok {
			return x.CreateValidatorMessage
		}
	}
	return nil
}

func (x *StakingMessage) GetEditValidatorMessage() *DirectiveEditValidator {
	if x != nil {
		if x, ok := x.StakeMsg.(*StakingMessage_EditValidatorMessage); ok {
			return x.EditValidatorMessage
		}
	}
	return nil
}

func (x *StakingMessage) GetDelegateMessage() *DirectiveDelegate {
	if x != nil {
		if x, ok := x.StakeMsg.(*StakingMessage_DelegateMessage); ok {
			return x.DelegateMessage
		}
	}
	return nil
}

func (x *StakingMessage) GetUndelegateMessage() *DirectiveUndelegate {
	if x != nil {
		if x, ok := x.StakeMsg.(*StakingMessage_UndelegateMessage); ok {
			return x.UndelegateMessage
		}
	}
	return nil
}

func (x *StakingMessage) GetCollectRewards() *DirectiveCollectRewards {
	if x != nil {
		if x, ok := x.StakeMsg.(*StakingMessage_CollectRewards); ok {
			return x.CollectRewards
		}
	}
	return nil
}

func (x *StakingMessage) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *StakingMessage) GetGasPrice() []byte {
	if x != nil {
		return x.GasPrice
	}
	return nil
}

func (x *StakingMessage) GetGasLimit() []byte {
	if x != nil {
		return x.GasLimit
	}
	return nil
}

type isStakingMessage_StakeMsg interface {
	isStakingMessage_StakeMsg()
}

type StakingMessage_CreateValidatorMessage struct {
	CreateValidatorMessage *DirectiveCreateValidator `protobuf:"bytes,1,opt,name=create_validator_message,json=createValidatorMessage,proto3,oneof"`
}

type StakingMessage_EditValidatorMessage struct {
	EditValidatorMessage *DirectiveEditValidator `protobuf:"bytes,2,opt,name=edit_validator_message,json=editValidatorMessage,proto3,oneof"`
}

type StakingMessage_DelegateMessage struct {
	DelegateMessage *DirectiveDelegate `protobuf:"bytes,3,opt,name=delegate_message,json=delegateMessage,proto3,oneof"`
}

type StakingMessage_UndelegateMessage struct {
	UndelegateMessage *DirectiveUndelegate `protobuf:"bytes,4,opt,name=undelegate_message,json=undelegateMessage,proto3,oneof"`
}

type StakingMessage_CollectRewards struct {
	CollectRewards *DirectiveCollectRewards `protobuf:"bytes,5,opt,name=collect_rewards,json=collectRewards,proto3,oneof"`
}

func (*StakingMessage_CreateValidatorMessage) isStakingMessage_StakeMsg() {}

func (*StakingMessage_EditValidatorMessage) isStakingMessage_StakeMsg() {}

func (*StakingMessage_DelegateMessage) isStakingMessage_StakeMsg() {}

func (*StakingMessage_UndelegateMessage) isStakingMessage_StakeMsg() {}

func (*StakingMessage_CollectRewards) isStakingMessage_StakeMsg() {}

// Description for a validator
type Description struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Name            string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Identity        string                 `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	Website         string                 `protobuf:"bytes,3,opt,name=website,proto3" json:"website,omitempty"`
	SecurityContact string                 `protobuf:"bytes,4,opt,name=security_contact,json=securityContact,proto3" json:"security_contact,omitempty"`
	Details         string                 `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Description) Reset() {
	*x = Description{}
	mi := &file_Harmony_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Description) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Description) ProtoMessage() {}

func (x *Description) ProtoReflect() protoreflect.Message {
	mi := &file_Harmony_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Description.ProtoReflect.Descriptor instead.
func (*Description) Descriptor() ([]byte, []int) {
	return file_Harmony_proto_rawDescGZIP(), []int{4}
}

func (x *Description) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Description) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *Description) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *Description) GetSecurityContact() string {
	if x != nil {
		return x.SecurityContact
	}
	return ""
}

func (x *Description) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

// A variable precision number
type Decimal struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The 'raw' value
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// The precision (number of decimals)
	Precision     []byte `protobuf:"bytes,2,opt,name=precision,proto3" json:"precision,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Decimal) Reset() {
	*x = Decimal{}
	mi := &file_Harmony_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Decimal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decimal) ProtoMessage() {}

func (x *Decimal) ProtoReflect() protoreflect.Message {
	mi := &file_Harmony_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decimal.ProtoReflect.Descriptor instead.
func (*Decimal) Descriptor() ([]byte, []int) {
	return file_Harmony_proto_rawDescGZIP(), []int{5}
}

func (x *Decimal) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Decimal) GetPrecision() []byte {
	if x != nil {
		return x.Precision
	}
	return nil
}

// Represents validator commission rule
type CommissionRate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The rate
	Rate *Decimal `protobuf:"bytes,1,opt,name=rate,proto3" json:"rate,omitempty"`
	// Maximum rate
	MaxRate *Decimal `protobuf:"bytes,2,opt,name=max_rate,json=maxRate,proto3" json:"max_rate,omitempty"`
	// Maximum of rate change
	MaxChangeRate *Decimal `protobuf:"bytes,3,opt,name=max_change_rate,json=maxChangeRate,proto3" json:"max_change_rate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommissionRate) Reset() {
	*x = CommissionRate{}
	mi := &file_Harmony_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommissionRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommissionRate) ProtoMessage() {}

func (x *CommissionRate) ProtoReflect() protoreflect.Message {
	mi := &file_Harmony_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommissionRate.ProtoReflect.Descriptor instead.
func (*CommissionRate) Descriptor() ([]byte, []int) {
	return file_Harmony_proto_rawDescGZIP(), []int{6}
}

func (x *CommissionRate) GetRate() *Decimal {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *CommissionRate) GetMaxRate() *Decimal {
	if x != nil {
		return x.MaxRate
	}
	return nil
}

func (x *CommissionRate) GetMaxChangeRate() *Decimal {
	if x != nil {
		return x.MaxChangeRate
	}
	return nil
}

// Create Validator directive
type DirectiveCreateValidator struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Address of validator
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// Description, name etc.
	Description *Description `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Rates
	CommissionRates    *CommissionRate `protobuf:"bytes,3,opt,name=commission_rates,json=commissionRates,proto3" json:"commission_rates,omitempty"`
	MinSelfDelegation  []byte          `protobuf:"bytes,4,opt,name=min_self_delegation,json=minSelfDelegation,proto3" json:"min_self_delegation,omitempty"`
	MaxTotalDelegation []byte          `protobuf:"bytes,5,opt,name=max_total_delegation,json=maxTotalDelegation,proto3" json:"max_total_delegation,omitempty"`
	SlotPubKeys        [][]byte        `protobuf:"bytes,6,rep,name=slot_pub_keys,json=slotPubKeys,proto3" json:"slot_pub_keys,omitempty"`
	SlotKeySigs        [][]byte        `protobuf:"bytes,7,rep,name=slot_key_sigs,json=slotKeySigs,proto3" json:"slot_key_sigs,omitempty"`
	Amount             []byte          `protobuf:"bytes,8,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *DirectiveCreateValidator) Reset() {
	*x = DirectiveCreateValidator{}
	mi := &file_Harmony_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DirectiveCreateValidator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectiveCreateValidator) ProtoMessage() {}

func (x *DirectiveCreateValidator) ProtoReflect() protoreflect.Message {
	mi := &file_Harmony_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectiveCreateValidator.ProtoReflect.Descriptor instead.
func (*DirectiveCreateValidator) Descriptor() ([]byte, []int) {
	return file_Harmony_proto_rawDescGZIP(), []int{7}
}

func (x *DirectiveCreateValidator) GetValidatorAddress() string {
	if x != nil {
		return x.ValidatorAddress
	}
	return ""
}

func (x *DirectiveCreateValidator) GetDescription() *Description {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *DirectiveCreateValidator) GetCommissionRates() *CommissionRate {
	if x != nil {
		return x.CommissionRates
	}
	return nil
}

func (x *DirectiveCreateValidator) GetMinSelfDelegation() []byte {
	if x != nil {
		return x.MinSelfDelegation
	}
	return nil
}

func (x *DirectiveCreateValidator) GetMaxTotalDelegation() []byte {
	if x != nil {
		return x.MaxTotalDelegation
	}
	return nil
}

func (x *DirectiveCreateValidator) GetSlotPubKeys() [][]byte {
	if x != nil {
		return x.SlotPubKeys
	}
	return nil
}

func (x *DirectiveCreateValidator) GetSlotKeySigs() [][]byte {
	if x != nil {
		return x.SlotKeySigs
	}
	return nil
}

func (x *DirectiveCreateValidator) GetAmount() []byte {
	if x != nil {
		return x.Amount
	}
	return nil
}

// Edit Validator directive
type DirectiveEditValidator struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Validator address
	ValidatorAddress   string       `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	Description        *Description `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CommissionRate     *Decimal     `protobuf:"bytes,3,opt,name=commission_rate,json=commissionRate,proto3" json:"commission_rate,omitempty"`
	MinSelfDelegation  []byte       `protobuf:"bytes,4,opt,name=min_self_delegation,json=minSelfDelegation,proto3" json:"min_self_delegation,omitempty"`
	MaxTotalDelegation []byte       `protobuf:"bytes,5,opt,name=max_total_delegation,json=maxTotalDelegation,proto3" json:"max_total_delegation,omitempty"`
	SlotKeyToRemove    []byte       `protobuf:"bytes,6,opt,name=slot_key_to_remove,json=slotKeyToRemove,proto3" json:"slot_key_to_remove,omitempty"`
	SlotKeyToAdd       []byte       `protobuf:"bytes,7,opt,name=slot_key_to_add,json=slotKeyToAdd,proto3" json:"slot_key_to_add,omitempty"`
	SlotKeyToAddSig    []byte       `protobuf:"bytes,8,opt,name=slot_key_to_add_sig,json=slotKeyToAddSig,proto3" json:"slot_key_to_add_sig,omitempty"`
	Active             []byte       `protobuf:"bytes,9,opt,name=active,proto3" json:"active,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *DirectiveEditValidator) Reset() {
	*x = DirectiveEditValidator{}
	mi := &file_Harmony_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DirectiveEditValidator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectiveEditValidator) ProtoMessage() {}

func (x *DirectiveEditValidator) ProtoReflect() protoreflect.Message {
	mi := &file_Harmony_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectiveEditValidator.ProtoReflect.Descriptor instead.
func (*DirectiveEditValidator) Descriptor() ([]byte, []int) {
	return file_Harmony_proto_rawDescGZIP(), []int{8}
}

func (x *DirectiveEditValidator) GetValidatorAddress() string {
	if x != nil {
		return x.ValidatorAddress
	}
	return ""
}

func (x *DirectiveEditValidator) GetDescription() *Description {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *DirectiveEditValidator) GetCommissionRate() *Decimal {
	if x != nil {
		return x.CommissionRate
	}
	return nil
}

func (x *DirectiveEditValidator) GetMinSelfDelegation() []byte {
	if x != nil {
		return x.MinSelfDelegation
	}
	return nil
}

func (x *DirectiveEditValidator) GetMaxTotalDelegation() []byte {
	if x != nil {
		return x.MaxTotalDelegation
	}
	return nil
}

func (x *DirectiveEditValidator) GetSlotKeyToRemove() []byte {
	if x != nil {
		return x.SlotKeyToRemove
	}
	return nil
}

func (x *DirectiveEditValidator) GetSlotKeyToAdd() []byte {
	if x != nil {
		return x.SlotKeyToAdd
	}
	return nil
}

func (x *DirectiveEditValidator) GetSlotKeyToAddSig() []byte {
	if x != nil {
		return x.SlotKeyToAddSig
	}
	return nil
}

func (x *DirectiveEditValidator) GetActive() []byte {
	if x != nil {
		return x.Active
	}
	return nil
}

// Delegate directive
type DirectiveDelegate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Delegator address
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// Validator address
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// Delegate amount (uint256, serialized big endian)
	Amount        []byte `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DirectiveDelegate) Reset() {
	*x = DirectiveDelegate{}
	mi := &file_Harmony_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DirectiveDelegate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectiveDelegate) ProtoMessage() {}

func (x *DirectiveDelegate) ProtoReflect() protoreflect.Message {
	mi := &file_Harmony_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectiveDelegate.ProtoReflect.Descriptor instead.
func (*DirectiveDelegate) Descriptor() ([]byte, []int) {
	return file_Harmony_proto_rawDescGZIP(), []int{9}
}

func (x *DirectiveDelegate) GetDelegatorAddress() string {
	if x != nil {
		return x.DelegatorAddress
	}
	return ""
}

func (x *DirectiveDelegate) GetValidatorAddress() string {
	if x != nil {
		return x.ValidatorAddress
	}
	return ""
}

func (x *DirectiveDelegate) GetAmount() []byte {
	if x != nil {
		return x.Amount
	}
	return nil
}

// Undelegate directive
type DirectiveUndelegate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Delegator address
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// Validator address
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// Undelegate amount (uint256, serialized big endian)
	Amount        []byte `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DirectiveUndelegate) Reset() {
	*x = DirectiveUndelegate{}
	mi := &file_Harmony_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DirectiveUndelegate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectiveUndelegate) ProtoMessage() {}

func (x *DirectiveUndelegate) ProtoReflect() protoreflect.Message {
	mi := &file_Harmony_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectiveUndelegate.ProtoReflect.Descriptor instead.
func (*DirectiveUndelegate) Descriptor() ([]byte, []int) {
	return file_Harmony_proto_rawDescGZIP(), []int{10}
}

func (x *DirectiveUndelegate) GetDelegatorAddress() string {
	if x != nil {
		return x.DelegatorAddress
	}
	return ""
}

func (x *DirectiveUndelegate) GetValidatorAddress() string {
	if x != nil {
		return x.ValidatorAddress
	}
	return ""
}

func (x *DirectiveUndelegate) GetAmount() []byte {
	if x != nil {
		return x.Amount
	}
	return nil
}

// Collect reward
type DirectiveCollectRewards struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Delegator address
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DirectiveCollectRewards) Reset() {
	*x = DirectiveCollectRewards{}
	mi := &file_Harmony_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DirectiveCollectRewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectiveCollectRewards) ProtoMessage() {}

func (x *DirectiveCollectRewards) ProtoReflect() protoreflect.Message {
	mi := &file_Harmony_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectiveCollectRewards.ProtoReflect.Descriptor instead.
func (*DirectiveCollectRewards) Descriptor() ([]byte, []int) {
	return file_Harmony_proto_rawDescGZIP(), []int{11}
}

func (x *DirectiveCollectRewards) GetDelegatorAddress() string {
	if x != nil {
		return x.DelegatorAddress
	}
	return ""
}

var File_Harmony_proto protoreflect.FileDescriptor

const file_Harmony_proto_rawDesc = "" +
	"\n" +
	"\rHarmony.proto\x12\x10TW.Harmony.Proto\x1a\fCommon.proto\"\x81\x02\n" +
	"\fSigningInput\x12\x19\n" +
	"\bchain_id\x18\x01 \x01(\fR\achainId\x12\x1f\n" +
	"\vprivate_key\x18\x02 \x01(\fR\n" +
	"privateKey\x12W\n" +
	"\x13transaction_message\x18\x03 \x01(\v2$.TW.Harmony.Proto.TransactionMessageH\x00R\x12transactionMessage\x12K\n" +
	"\x0fstaking_message\x18\x04 \x01(\v2 .TW.Harmony.Proto.StakingMessageH\x00R\x0estakingMessageB\x0f\n" +
	"\rmessage_oneof\"\xad\x01\n" +
	"\rSigningOutput\x12\x18\n" +
	"\aencoded\x18\x01 \x01(\fR\aencoded\x12\f\n" +
	"\x01v\x18\x02 \x01(\fR\x01v\x12\f\n" +
	"\x01r\x18\x03 \x01(\fR\x01r\x12\f\n" +
	"\x01s\x18\x04 \x01(\fR\x01s\x123\n" +
	"\x05error\x18\x05 \x01(\x0e2\x1d.TW.Common.Proto.SigningErrorR\x05error\x12#\n" +
	"\rerror_message\x18\x06 \x01(\tR\ferrorMessage\"\xf9\x01\n" +
	"\x12TransactionMessage\x12\x14\n" +
	"\x05nonce\x18\x01 \x01(\fR\x05nonce\x12\x1b\n" +
	"\tgas_price\x18\x02 \x01(\fR\bgasPrice\x12\x1b\n" +
	"\tgas_limit\x18\x03 \x01(\fR\bgasLimit\x12\x1d\n" +
	"\n" +
	"to_address\x18\x04 \x01(\tR\ttoAddress\x12\x16\n" +
	"\x06amount\x18\x05 \x01(\fR\x06amount\x12\x18\n" +
	"\apayload\x18\x06 \x01(\fR\apayload\x12\"\n" +
	"\rfrom_shard_id\x18\a \x01(\fR\vfromShardId\x12\x1e\n" +
	"\vto_shard_id\x18\b \x01(\fR\ttoShardId\"\xb7\x04\n" +
	"\x0eStakingMessage\x12f\n" +
	"\x18create_validator_message\x18\x01 \x01(\v2*.TW.Harmony.Proto.DirectiveCreateValidatorH\x00R\x16createValidatorMessage\x12`\n" +
	"\x16edit_validator_message\x18\x02 \x01(\v2(.TW.Harmony.Proto.DirectiveEditValidatorH\x00R\x14editValidatorMessage\x12P\n" +
	"\x10delegate_message\x18\x03 \x01(\v2#.TW.Harmony.Proto.DirectiveDelegateH\x00R\x0fdelegateMessage\x12V\n" +
	"\x12undelegate_message\x18\x04 \x01(\v2%.TW.Harmony.Proto.DirectiveUndelegateH\x00R\x11undelegateMessage\x12T\n" +
	"\x0fcollect_rewards\x18\x05 \x01(\v2).TW.Harmony.Proto.DirectiveCollectRewardsH\x00R\x0ecollectRewards\x12\x14\n" +
	"\x05nonce\x18\x06 \x01(\fR\x05nonce\x12\x1b\n" +
	"\tgas_price\x18\a \x01(\fR\bgasPrice\x12\x1b\n" +
	"\tgas_limit\x18\b \x01(\fR\bgasLimitB\v\n" +
	"\tstake_msg\"\x9c\x01\n" +
	"\vDescription\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1a\n" +
	"\bidentity\x18\x02 \x01(\tR\bidentity\x12\x18\n" +
	"\awebsite\x18\x03 \x01(\tR\awebsite\x12)\n" +
	"\x10security_contact\x18\x04 \x01(\tR\x0fsecurityContact\x12\x18\n" +
	"\adetails\x18\x05 \x01(\tR\adetails\"=\n" +
	"\aDecimal\x12\x14\n" +
	"\x05value\x18\x01 \x01(\fR\x05value\x12\x1c\n" +
	"\tprecision\x18\x02 \x01(\fR\tprecision\"\xb8\x01\n" +
	"\x0eCommissionRate\x12-\n" +
	"\x04rate\x18\x01 \x01(\v2\x19.TW.Harmony.Proto.DecimalR\x04rate\x124\n" +
	"\bmax_rate\x18\x02 \x01(\v2\x19.TW.Harmony.Proto.DecimalR\amaxRate\x12A\n" +
	"\x0fmax_change_rate\x18\x03 \x01(\v2\x19.TW.Harmony.Proto.DecimalR\rmaxChangeRate\"\x97\x03\n" +
	"\x18DirectiveCreateValidator\x12+\n" +
	"\x11validator_address\x18\x01 \x01(\tR\x10validatorAddress\x12?\n" +
	"\vdescription\x18\x02 \x01(\v2\x1d.TW.Harmony.Proto.DescriptionR\vdescription\x12K\n" +
	"\x10commission_rates\x18\x03 \x01(\v2 .TW.Harmony.Proto.CommissionRateR\x0fcommissionRates\x12.\n" +
	"\x13min_self_delegation\x18\x04 \x01(\fR\x11minSelfDelegation\x120\n" +
	"\x14max_total_delegation\x18\x05 \x01(\fR\x12maxTotalDelegation\x12\"\n" +
	"\rslot_pub_keys\x18\x06 \x03(\fR\vslotPubKeys\x12\"\n" +
	"\rslot_key_sigs\x18\a \x03(\fR\vslotKeySigs\x12\x16\n" +
	"\x06amount\x18\b \x01(\fR\x06amount\"\xc6\x03\n" +
	"\x16DirectiveEditValidator\x12+\n" +
	"\x11validator_address\x18\x01 \x01(\tR\x10validatorAddress\x12?\n" +
	"\vdescription\x18\x02 \x01(\v2\x1d.TW.Harmony.Proto.DescriptionR\vdescription\x12B\n" +
	"\x0fcommission_rate\x18\x03 \x01(\v2\x19.TW.Harmony.Proto.DecimalR\x0ecommissionRate\x12.\n" +
	"\x13min_self_delegation\x18\x04 \x01(\fR\x11minSelfDelegation\x120\n" +
	"\x14max_total_delegation\x18\x05 \x01(\fR\x12maxTotalDelegation\x12+\n" +
	"\x12slot_key_to_remove\x18\x06 \x01(\fR\x0fslotKeyToRemove\x12%\n" +
	"\x0fslot_key_to_add\x18\a \x01(\fR\fslotKeyToAdd\x12,\n" +
	"\x13slot_key_to_add_sig\x18\b \x01(\fR\x0fslotKeyToAddSig\x12\x16\n" +
	"\x06active\x18\t \x01(\fR\x06active\"\x85\x01\n" +
	"\x11DirectiveDelegate\x12+\n" +
	"\x11delegator_address\x18\x01 \x01(\tR\x10delegatorAddress\x12+\n" +
	"\x11validator_address\x18\x02 \x01(\tR\x10validatorAddress\x12\x16\n" +
	"\x06amount\x18\x03 \x01(\fR\x06amount\"\x87\x01\n" +
	"\x13DirectiveUndelegate\x12+\n" +
	"\x11delegator_address\x18\x01 \x01(\tR\x10delegatorAddress\x12+\n" +
	"\x11validator_address\x18\x02 \x01(\tR\x10validatorAddress\x12\x16\n" +
	"\x06amount\x18\x03 \x01(\fR\x06amount\"F\n" +
	"\x17DirectiveCollectRewards\x12+\n" +
	"\x11delegator_address\x18\x01 \x01(\tR\x10delegatorAddressB\x17\n" +
	"\x15wallet.core.jni.protob\x06proto3"

var (
	file_Harmony_proto_rawDescOnce sync.Once
	file_Harmony_proto_rawDescData []byte
)

func file_Harmony_proto_rawDescGZIP() []byte {
	file_Harmony_proto_rawDescOnce.Do(func() {
		file_Harmony_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_Harmony_proto_rawDesc), len(file_Harmony_proto_rawDesc)))
	})
	return file_Harmony_proto_rawDescData
}

var file_Harmony_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_Harmony_proto_goTypes = []any{
	(*SigningInput)(nil),             // 0: TW.Harmony.Proto.SigningInput
	(*SigningOutput)(nil),            // 1: TW.Harmony.Proto.SigningOutput
	(*TransactionMessage)(nil),       // 2: TW.Harmony.Proto.TransactionMessage
	(*StakingMessage)(nil),           // 3: TW.Harmony.Proto.StakingMessage
	(*Description)(nil),              // 4: TW.Harmony.Proto.Description
	(*Decimal)(nil),                  // 5: TW.Harmony.Proto.Decimal
	(*CommissionRate)(nil),           // 6: TW.Harmony.Proto.CommissionRate
	(*DirectiveCreateValidator)(nil), // 7: TW.Harmony.Proto.DirectiveCreateValidator
	(*DirectiveEditValidator)(nil),   // 8: TW.Harmony.Proto.DirectiveEditValidator
	(*DirectiveDelegate)(nil),        // 9: TW.Harmony.Proto.DirectiveDelegate
	(*DirectiveUndelegate)(nil),      // 10: TW.Harmony.Proto.DirectiveUndelegate
	(*DirectiveCollectRewards)(nil),  // 11: TW.Harmony.Proto.DirectiveCollectRewards
	(common.SigningError)(0),         // 12: TW.Common.Proto.SigningError
}
var file_Harmony_proto_depIdxs = []int32{
	2,  // 0: TW.Harmony.Proto.SigningInput.transaction_message:type_name -> TW.Harmony.Proto.TransactionMessage
	3,  // 1: TW.Harmony.Proto.SigningInput.staking_message:type_name -> TW.Harmony.Proto.StakingMessage
	12, // 2: TW.Harmony.Proto.SigningOutput.error:type_name -> TW.Common.Proto.SigningError
	7,  // 3: TW.Harmony.Proto.StakingMessage.create_validator_message:type_name -> TW.Harmony.Proto.DirectiveCreateValidator
	8,  // 4: TW.Harmony.Proto.StakingMessage.edit_validator_message:type_name -> TW.Harmony.Proto.DirectiveEditValidator
	9,  // 5: TW.Harmony.Proto.StakingMessage.delegate_message:type_name -> TW.Harmony.Proto.DirectiveDelegate
	10, // 6: TW.Harmony.Proto.StakingMessage.undelegate_message:type_name -> TW.Harmony.Proto.DirectiveUndelegate
	11, // 7: TW.Harmony.Proto.StakingMessage.collect_rewards:type_name -> TW.Harmony.Proto.DirectiveCollectRewards
	5,  // 8: TW.Harmony.Proto.CommissionRate.rate:type_name -> TW.Harmony.Proto.Decimal
	5,  // 9: TW.Harmony.Proto.CommissionRate.max_rate:type_name -> TW.Harmony.Proto.Decimal
	5,  // 10: TW.Harmony.Proto.CommissionRate.max_change_rate:type_name -> TW.Harmony.Proto.Decimal
	4,  // 11: TW.Harmony.Proto.DirectiveCreateValidator.description:type_name -> TW.Harmony.Proto.Description
	6,  // 12: TW.Harmony.Proto.DirectiveCreateValidator.commission_rates:type_name -> TW.Harmony.Proto.CommissionRate
	4,  // 13: TW.Harmony.Proto.DirectiveEditValidator.description:type_name -> TW.Harmony.Proto.Description
	5,  // 14: TW.Harmony.Proto.DirectiveEditValidator.commission_rate:type_name -> TW.Harmony.Proto.Decimal
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_Harmony_proto_init() }
func file_Harmony_proto_init() {
	if File_Harmony_proto != nil {
		return
	}
	file_Harmony_proto_msgTypes[0].OneofWrappers = []any{
		(*SigningInput_TransactionMessage)(nil),
		(*SigningInput_StakingMessage)(nil),
	}
	file_Harmony_proto_msgTypes[3].OneofWrappers = []any{
		(*StakingMessage_CreateValidatorMessage)(nil),
		(*StakingMessage_EditValidatorMessage)(nil),
		(*StakingMessage_DelegateMessage)(nil),
		(*StakingMessage_UndelegateMessage)(nil),
		(*StakingMessage_CollectRewards)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_Harmony_proto_rawDesc), len(file_Harmony_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Harmony_proto_goTypes,
		DependencyIndexes: file_Harmony_proto_depIdxs,
		MessageInfos:      file_Harmony_proto_msgTypes,
	}.Build()
	File_Harmony_proto = out.File
	file_Harmony_proto_goTypes = nil
	file_Harmony_proto_depIdxs = nil
}
