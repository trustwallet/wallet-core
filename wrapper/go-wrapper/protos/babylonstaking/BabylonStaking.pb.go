// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.20.3
// source: BabylonStaking.proto

package babylonstaking

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Public key and corresponding signature.
type PublicKeySignature struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Public key bytes. Can be either compressed (33 bytes) or x-only (32 bytes).
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// Signature 64-length byte array.
	Signature     []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublicKeySignature) Reset() {
	*x = PublicKeySignature{}
	mi := &file_BabylonStaking_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublicKeySignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKeySignature) ProtoMessage() {}

func (x *PublicKeySignature) ProtoReflect() protoreflect.Message {
	mi := &file_BabylonStaking_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKeySignature.ProtoReflect.Descriptor instead.
func (*PublicKeySignature) Descriptor() ([]byte, []int) {
	return file_BabylonStaking_proto_rawDescGZIP(), []int{0}
}

func (x *PublicKeySignature) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *PublicKeySignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type StakingInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// User's public key.
	StakerPublicKey []byte `protobuf:"bytes,1,opt,name=staker_public_key,json=stakerPublicKey,proto3" json:"staker_public_key,omitempty"`
	// Finality provider's public key chosen by the user.
	FinalityProviderPublicKey []byte `protobuf:"bytes,2,opt,name=finality_provider_public_key,json=finalityProviderPublicKey,proto3" json:"finality_provider_public_key,omitempty"`
	// Staking Output's lock time.
	// Equal to `global_parameters.staking_time` when creating a Staking transaction.
	// or `global_parameters.unbonding_time` when creating an Unbonding transaction.
	StakingTime uint32 `protobuf:"varint,3,opt,name=staking_time,json=stakingTime,proto3" json:"staking_time,omitempty"`
	// Retrieved from global_parameters.covenant_pks.
	// Babylon nodes that can approve Unbonding tx or Slash the staked position when acting bad.
	CovenantCommitteePublicKeys [][]byte `protobuf:"bytes,4,rep,name=covenant_committee_public_keys,json=covenantCommitteePublicKeys,proto3" json:"covenant_committee_public_keys,omitempty"`
	// Retrieved from global_parameters.covenant_quorum.
	// Specifies the quorum required by the covenant committee for unbonding transactions to be confirmed.
	CovenantQuorum uint32 `protobuf:"varint,5,opt,name=covenant_quorum,json=covenantQuorum,proto3" json:"covenant_quorum,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *StakingInfo) Reset() {
	*x = StakingInfo{}
	mi := &file_BabylonStaking_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StakingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingInfo) ProtoMessage() {}

func (x *StakingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_BabylonStaking_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingInfo.ProtoReflect.Descriptor instead.
func (*StakingInfo) Descriptor() ([]byte, []int) {
	return file_BabylonStaking_proto_rawDescGZIP(), []int{1}
}

func (x *StakingInfo) GetStakerPublicKey() []byte {
	if x != nil {
		return x.StakerPublicKey
	}
	return nil
}

func (x *StakingInfo) GetFinalityProviderPublicKey() []byte {
	if x != nil {
		return x.FinalityProviderPublicKey
	}
	return nil
}

func (x *StakingInfo) GetStakingTime() uint32 {
	if x != nil {
		return x.StakingTime
	}
	return 0
}

func (x *StakingInfo) GetCovenantCommitteePublicKeys() [][]byte {
	if x != nil {
		return x.CovenantCommitteePublicKeys
	}
	return nil
}

func (x *StakingInfo) GetCovenantQuorum() uint32 {
	if x != nil {
		return x.CovenantQuorum
	}
	return 0
}

type InputBuilder struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InputBuilder) Reset() {
	*x = InputBuilder{}
	mi := &file_BabylonStaking_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputBuilder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputBuilder) ProtoMessage() {}

func (x *InputBuilder) ProtoReflect() protoreflect.Message {
	mi := &file_BabylonStaking_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputBuilder.ProtoReflect.Descriptor instead.
func (*InputBuilder) Descriptor() ([]byte, []int) {
	return file_BabylonStaking_proto_rawDescGZIP(), []int{2}
}

type OutputBuilder struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OutputBuilder) Reset() {
	*x = OutputBuilder{}
	mi := &file_BabylonStaking_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutputBuilder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputBuilder) ProtoMessage() {}

func (x *OutputBuilder) ProtoReflect() protoreflect.Message {
	mi := &file_BabylonStaking_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputBuilder.ProtoReflect.Descriptor instead.
func (*OutputBuilder) Descriptor() ([]byte, []int) {
	return file_BabylonStaking_proto_rawDescGZIP(), []int{3}
}

// Spend a Staking Output via timelock path (staking time expired).
// In other words, create a Withdraw transaction.
type InputBuilder_StakingTimelockPath struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Params        *StakingInfo           `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InputBuilder_StakingTimelockPath) Reset() {
	*x = InputBuilder_StakingTimelockPath{}
	mi := &file_BabylonStaking_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputBuilder_StakingTimelockPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputBuilder_StakingTimelockPath) ProtoMessage() {}

func (x *InputBuilder_StakingTimelockPath) ProtoReflect() protoreflect.Message {
	mi := &file_BabylonStaking_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputBuilder_StakingTimelockPath.ProtoReflect.Descriptor instead.
func (*InputBuilder_StakingTimelockPath) Descriptor() ([]byte, []int) {
	return file_BabylonStaking_proto_rawDescGZIP(), []int{2, 0}
}

func (x *InputBuilder_StakingTimelockPath) GetParams() *StakingInfo {
	if x != nil {
		return x.Params
	}
	return nil
}

// Spend a Staking Output via unbonding path.
// In other words, create an Unbonding transaction.
type InputBuilder_StakingUnbondingPath struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Params *StakingInfo           `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	// Signatures signed by covenant committees.
	// There can be less signatures than covenant public keys, but not less than `covenant_quorum`.
	CovenantCommitteeSignatures []*PublicKeySignature `protobuf:"bytes,2,rep,name=covenant_committee_signatures,json=covenantCommitteeSignatures,proto3" json:"covenant_committee_signatures,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *InputBuilder_StakingUnbondingPath) Reset() {
	*x = InputBuilder_StakingUnbondingPath{}
	mi := &file_BabylonStaking_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputBuilder_StakingUnbondingPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputBuilder_StakingUnbondingPath) ProtoMessage() {}

func (x *InputBuilder_StakingUnbondingPath) ProtoReflect() protoreflect.Message {
	mi := &file_BabylonStaking_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputBuilder_StakingUnbondingPath.ProtoReflect.Descriptor instead.
func (*InputBuilder_StakingUnbondingPath) Descriptor() ([]byte, []int) {
	return file_BabylonStaking_proto_rawDescGZIP(), []int{2, 1}
}

func (x *InputBuilder_StakingUnbondingPath) GetParams() *StakingInfo {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *InputBuilder_StakingUnbondingPath) GetCovenantCommitteeSignatures() []*PublicKeySignature {
	if x != nil {
		return x.CovenantCommitteeSignatures
	}
	return nil
}

// Spend a Staking Output via slashing path.
// Slashing path is only used in [ExpressOfInterest](https://github.com/babylonlabs-io/babylon-proto-ts/blob/ef42d04959b326849fe8c9773ab23802573ad407/src/generated/babylon/btcstaking/v1/tx.ts#L61).
// In other words, generate an unsigned Slashing transaction, pre-sign the staker's signature only and share to Babylon PoS chain.
type InputBuilder_StakingSlashingPath struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Params *StakingInfo           `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	// Empty in most of the cases. Staker's signature can be calculated without the fp signature.
	FinalityProviderSignature *PublicKeySignature `protobuf:"bytes,2,opt,name=finality_provider_signature,json=finalityProviderSignature,proto3" json:"finality_provider_signature,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *InputBuilder_StakingSlashingPath) Reset() {
	*x = InputBuilder_StakingSlashingPath{}
	mi := &file_BabylonStaking_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputBuilder_StakingSlashingPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputBuilder_StakingSlashingPath) ProtoMessage() {}

func (x *InputBuilder_StakingSlashingPath) ProtoReflect() protoreflect.Message {
	mi := &file_BabylonStaking_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputBuilder_StakingSlashingPath.ProtoReflect.Descriptor instead.
func (*InputBuilder_StakingSlashingPath) Descriptor() ([]byte, []int) {
	return file_BabylonStaking_proto_rawDescGZIP(), []int{2, 2}
}

func (x *InputBuilder_StakingSlashingPath) GetParams() *StakingInfo {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *InputBuilder_StakingSlashingPath) GetFinalityProviderSignature() *PublicKeySignature {
	if x != nil {
		return x.FinalityProviderSignature
	}
	return nil
}

// Spend an Unbonding Output via timelock path (unbonding time expired).
// In other words, create a Withdraw transaction spending an Unbonding transaction.
type InputBuilder_UnbondingTimelockPath struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Params        *StakingInfo           `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InputBuilder_UnbondingTimelockPath) Reset() {
	*x = InputBuilder_UnbondingTimelockPath{}
	mi := &file_BabylonStaking_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputBuilder_UnbondingTimelockPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputBuilder_UnbondingTimelockPath) ProtoMessage() {}

func (x *InputBuilder_UnbondingTimelockPath) ProtoReflect() protoreflect.Message {
	mi := &file_BabylonStaking_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputBuilder_UnbondingTimelockPath.ProtoReflect.Descriptor instead.
func (*InputBuilder_UnbondingTimelockPath) Descriptor() ([]byte, []int) {
	return file_BabylonStaking_proto_rawDescGZIP(), []int{2, 3}
}

func (x *InputBuilder_UnbondingTimelockPath) GetParams() *StakingInfo {
	if x != nil {
		return x.Params
	}
	return nil
}

// Spend an Unbonding Output via slashing path.
// Slashing path is only used in [ExpressOfInterest](https://github.com/babylonlabs-io/babylon-proto-ts/blob/ef42d04959b326849fe8c9773ab23802573ad407/src/generated/babylon/btcstaking/v1/tx.ts#L61).
// In other words, generate an unsigned Slashing transaction, pre-sign the staker's signature only and share to Babylon PoS chain.
type InputBuilder_UnbondingSlashingPath struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Params *StakingInfo           `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	// Empty in most of the cases. Staker's signature can be calculated without the fp signature.
	FinalityProviderSignature *PublicKeySignature `protobuf:"bytes,2,opt,name=finality_provider_signature,json=finalityProviderSignature,proto3" json:"finality_provider_signature,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *InputBuilder_UnbondingSlashingPath) Reset() {
	*x = InputBuilder_UnbondingSlashingPath{}
	mi := &file_BabylonStaking_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputBuilder_UnbondingSlashingPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputBuilder_UnbondingSlashingPath) ProtoMessage() {}

func (x *InputBuilder_UnbondingSlashingPath) ProtoReflect() protoreflect.Message {
	mi := &file_BabylonStaking_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputBuilder_UnbondingSlashingPath.ProtoReflect.Descriptor instead.
func (*InputBuilder_UnbondingSlashingPath) Descriptor() ([]byte, []int) {
	return file_BabylonStaking_proto_rawDescGZIP(), []int{2, 4}
}

func (x *InputBuilder_UnbondingSlashingPath) GetParams() *StakingInfo {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *InputBuilder_UnbondingSlashingPath) GetFinalityProviderSignature() *PublicKeySignature {
	if x != nil {
		return x.FinalityProviderSignature
	}
	return nil
}

// Create a Staking Output.
type OutputBuilder_StakingOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Params        *StakingInfo           `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OutputBuilder_StakingOutput) Reset() {
	*x = OutputBuilder_StakingOutput{}
	mi := &file_BabylonStaking_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutputBuilder_StakingOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputBuilder_StakingOutput) ProtoMessage() {}

func (x *OutputBuilder_StakingOutput) ProtoReflect() protoreflect.Message {
	mi := &file_BabylonStaking_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputBuilder_StakingOutput.ProtoReflect.Descriptor instead.
func (*OutputBuilder_StakingOutput) Descriptor() ([]byte, []int) {
	return file_BabylonStaking_proto_rawDescGZIP(), []int{3, 0}
}

func (x *OutputBuilder_StakingOutput) GetParams() *StakingInfo {
	if x != nil {
		return x.Params
	}
	return nil
}

// Create an Unbonding Output.
type OutputBuilder_UnbondingOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Params        *StakingInfo           `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OutputBuilder_UnbondingOutput) Reset() {
	*x = OutputBuilder_UnbondingOutput{}
	mi := &file_BabylonStaking_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutputBuilder_UnbondingOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputBuilder_UnbondingOutput) ProtoMessage() {}

func (x *OutputBuilder_UnbondingOutput) ProtoReflect() protoreflect.Message {
	mi := &file_BabylonStaking_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputBuilder_UnbondingOutput.ProtoReflect.Descriptor instead.
func (*OutputBuilder_UnbondingOutput) Descriptor() ([]byte, []int) {
	return file_BabylonStaking_proto_rawDescGZIP(), []int{3, 1}
}

func (x *OutputBuilder_UnbondingOutput) GetParams() *StakingInfo {
	if x != nil {
		return x.Params
	}
	return nil
}

// Creates an OP_RETURN output used to identify the staking transaction among other transactions in the Bitcoin ledger.
type OutputBuilder_OpReturn struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Retrieved from global_parameters.Tag.
	Tag []byte `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	// User's public key.
	StakerPublicKey []byte `protobuf:"bytes,2,opt,name=staker_public_key,json=stakerPublicKey,proto3" json:"staker_public_key,omitempty"`
	// Finality provider's public key chosen by the user.
	FinalityProviderPublicKey []byte `protobuf:"bytes,3,opt,name=finality_provider_public_key,json=finalityProviderPublicKey,proto3" json:"finality_provider_public_key,omitempty"`
	// global_parameters.min_staking_time <= staking_time <= global_parameters.max_staking_time.
	StakingTime   uint32 `protobuf:"varint,4,opt,name=staking_time,json=stakingTime,proto3" json:"staking_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OutputBuilder_OpReturn) Reset() {
	*x = OutputBuilder_OpReturn{}
	mi := &file_BabylonStaking_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutputBuilder_OpReturn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputBuilder_OpReturn) ProtoMessage() {}

func (x *OutputBuilder_OpReturn) ProtoReflect() protoreflect.Message {
	mi := &file_BabylonStaking_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputBuilder_OpReturn.ProtoReflect.Descriptor instead.
func (*OutputBuilder_OpReturn) Descriptor() ([]byte, []int) {
	return file_BabylonStaking_proto_rawDescGZIP(), []int{3, 2}
}

func (x *OutputBuilder_OpReturn) GetTag() []byte {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *OutputBuilder_OpReturn) GetStakerPublicKey() []byte {
	if x != nil {
		return x.StakerPublicKey
	}
	return nil
}

func (x *OutputBuilder_OpReturn) GetFinalityProviderPublicKey() []byte {
	if x != nil {
		return x.FinalityProviderPublicKey
	}
	return nil
}

func (x *OutputBuilder_OpReturn) GetStakingTime() uint32 {
	if x != nil {
		return x.StakingTime
	}
	return 0
}

var File_BabylonStaking_proto protoreflect.FileDescriptor

const file_BabylonStaking_proto_rawDesc = "" +
	"\n" +
	"\x14BabylonStaking.proto\x12\x17TW.BabylonStaking.Proto\"Q\n" +
	"\x12PublicKeySignature\x12\x1d\n" +
	"\n" +
	"public_key\x18\x01 \x01(\fR\tpublicKey\x12\x1c\n" +
	"\tsignature\x18\x02 \x01(\fR\tsignature\"\x8b\x02\n" +
	"\vStakingInfo\x12*\n" +
	"\x11staker_public_key\x18\x01 \x01(\fR\x0fstakerPublicKey\x12?\n" +
	"\x1cfinality_provider_public_key\x18\x02 \x01(\fR\x19finalityProviderPublicKey\x12!\n" +
	"\fstaking_time\x18\x03 \x01(\rR\vstakingTime\x12C\n" +
	"\x1ecovenant_committee_public_keys\x18\x04 \x03(\fR\x1bcovenantCommitteePublicKeys\x12'\n" +
	"\x0fcovenant_quorum\x18\x05 \x01(\rR\x0ecovenantQuorum\"\x8a\x06\n" +
	"\fInputBuilder\x1aS\n" +
	"\x13StakingTimelockPath\x12<\n" +
	"\x06params\x18\x01 \x01(\v2$.TW.BabylonStaking.Proto.StakingInfoR\x06params\x1a\xc5\x01\n" +
	"\x14StakingUnbondingPath\x12<\n" +
	"\x06params\x18\x01 \x01(\v2$.TW.BabylonStaking.Proto.StakingInfoR\x06params\x12o\n" +
	"\x1dcovenant_committee_signatures\x18\x02 \x03(\v2+.TW.BabylonStaking.Proto.PublicKeySignatureR\x1bcovenantCommitteeSignatures\x1a\xc0\x01\n" +
	"\x13StakingSlashingPath\x12<\n" +
	"\x06params\x18\x01 \x01(\v2$.TW.BabylonStaking.Proto.StakingInfoR\x06params\x12k\n" +
	"\x1bfinality_provider_signature\x18\x02 \x01(\v2+.TW.BabylonStaking.Proto.PublicKeySignatureR\x19finalityProviderSignature\x1aU\n" +
	"\x15UnbondingTimelockPath\x12<\n" +
	"\x06params\x18\x01 \x01(\v2$.TW.BabylonStaking.Proto.StakingInfoR\x06params\x1a\xc2\x01\n" +
	"\x15UnbondingSlashingPath\x12<\n" +
	"\x06params\x18\x01 \x01(\v2$.TW.BabylonStaking.Proto.StakingInfoR\x06params\x12k\n" +
	"\x1bfinality_provider_signature\x18\x02 \x01(\v2+.TW.BabylonStaking.Proto.PublicKeySignatureR\x19finalityProviderSignature\"\xde\x02\n" +
	"\rOutputBuilder\x1aM\n" +
	"\rStakingOutput\x12<\n" +
	"\x06params\x18\x01 \x01(\v2$.TW.BabylonStaking.Proto.StakingInfoR\x06params\x1aO\n" +
	"\x0fUnbondingOutput\x12<\n" +
	"\x06params\x18\x01 \x01(\v2$.TW.BabylonStaking.Proto.StakingInfoR\x06params\x1a\xac\x01\n" +
	"\bOpReturn\x12\x10\n" +
	"\x03tag\x18\x01 \x01(\fR\x03tag\x12*\n" +
	"\x11staker_public_key\x18\x02 \x01(\fR\x0fstakerPublicKey\x12?\n" +
	"\x1cfinality_provider_public_key\x18\x03 \x01(\fR\x19finalityProviderPublicKey\x12!\n" +
	"\fstaking_time\x18\x04 \x01(\rR\vstakingTimeB\x17\n" +
	"\x15wallet.core.jni.protob\x06proto3"

var (
	file_BabylonStaking_proto_rawDescOnce sync.Once
	file_BabylonStaking_proto_rawDescData []byte
)

func file_BabylonStaking_proto_rawDescGZIP() []byte {
	file_BabylonStaking_proto_rawDescOnce.Do(func() {
		file_BabylonStaking_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_BabylonStaking_proto_rawDesc), len(file_BabylonStaking_proto_rawDesc)))
	})
	return file_BabylonStaking_proto_rawDescData
}

var file_BabylonStaking_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_BabylonStaking_proto_goTypes = []any{
	(*PublicKeySignature)(nil),                 // 0: TW.BabylonStaking.Proto.PublicKeySignature
	(*StakingInfo)(nil),                        // 1: TW.BabylonStaking.Proto.StakingInfo
	(*InputBuilder)(nil),                       // 2: TW.BabylonStaking.Proto.InputBuilder
	(*OutputBuilder)(nil),                      // 3: TW.BabylonStaking.Proto.OutputBuilder
	(*InputBuilder_StakingTimelockPath)(nil),   // 4: TW.BabylonStaking.Proto.InputBuilder.StakingTimelockPath
	(*InputBuilder_StakingUnbondingPath)(nil),  // 5: TW.BabylonStaking.Proto.InputBuilder.StakingUnbondingPath
	(*InputBuilder_StakingSlashingPath)(nil),   // 6: TW.BabylonStaking.Proto.InputBuilder.StakingSlashingPath
	(*InputBuilder_UnbondingTimelockPath)(nil), // 7: TW.BabylonStaking.Proto.InputBuilder.UnbondingTimelockPath
	(*InputBuilder_UnbondingSlashingPath)(nil), // 8: TW.BabylonStaking.Proto.InputBuilder.UnbondingSlashingPath
	(*OutputBuilder_StakingOutput)(nil),        // 9: TW.BabylonStaking.Proto.OutputBuilder.StakingOutput
	(*OutputBuilder_UnbondingOutput)(nil),      // 10: TW.BabylonStaking.Proto.OutputBuilder.UnbondingOutput
	(*OutputBuilder_OpReturn)(nil),             // 11: TW.BabylonStaking.Proto.OutputBuilder.OpReturn
}
var file_BabylonStaking_proto_depIdxs = []int32{
	1,  // 0: TW.BabylonStaking.Proto.InputBuilder.StakingTimelockPath.params:type_name -> TW.BabylonStaking.Proto.StakingInfo
	1,  // 1: TW.BabylonStaking.Proto.InputBuilder.StakingUnbondingPath.params:type_name -> TW.BabylonStaking.Proto.StakingInfo
	0,  // 2: TW.BabylonStaking.Proto.InputBuilder.StakingUnbondingPath.covenant_committee_signatures:type_name -> TW.BabylonStaking.Proto.PublicKeySignature
	1,  // 3: TW.BabylonStaking.Proto.InputBuilder.StakingSlashingPath.params:type_name -> TW.BabylonStaking.Proto.StakingInfo
	0,  // 4: TW.BabylonStaking.Proto.InputBuilder.StakingSlashingPath.finality_provider_signature:type_name -> TW.BabylonStaking.Proto.PublicKeySignature
	1,  // 5: TW.BabylonStaking.Proto.InputBuilder.UnbondingTimelockPath.params:type_name -> TW.BabylonStaking.Proto.StakingInfo
	1,  // 6: TW.BabylonStaking.Proto.InputBuilder.UnbondingSlashingPath.params:type_name -> TW.BabylonStaking.Proto.StakingInfo
	0,  // 7: TW.BabylonStaking.Proto.InputBuilder.UnbondingSlashingPath.finality_provider_signature:type_name -> TW.BabylonStaking.Proto.PublicKeySignature
	1,  // 8: TW.BabylonStaking.Proto.OutputBuilder.StakingOutput.params:type_name -> TW.BabylonStaking.Proto.StakingInfo
	1,  // 9: TW.BabylonStaking.Proto.OutputBuilder.UnbondingOutput.params:type_name -> TW.BabylonStaking.Proto.StakingInfo
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_BabylonStaking_proto_init() }
func file_BabylonStaking_proto_init() {
	if File_BabylonStaking_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_BabylonStaking_proto_rawDesc), len(file_BabylonStaking_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_BabylonStaking_proto_goTypes,
		DependencyIndexes: file_BabylonStaking_proto_depIdxs,
		MessageInfos:      file_BabylonStaking_proto_msgTypes,
	}.Build()
	File_BabylonStaking_proto = out.File
	file_BabylonStaking_proto_goTypes = nil
	file_BabylonStaking_proto_depIdxs = nil
}
