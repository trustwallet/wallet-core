// SPDX-License-Identifier: Apache-2.0
//
// Copyright Â© 2017 Trust Wallet.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.20.3
// source: Sui.proto

package sui

import (
	common "github.com/Cramiumlabs/wallet-core/wrapper/go-wrapper/protos/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Object info (including Coins).
type ObjectRef struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Hex string representing the object ID.
	ObjectId string `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// Object version.
	Version uint64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	// Base58 string representing the object digest.
	ObjectDigest  string `protobuf:"bytes,3,opt,name=object_digest,json=objectDigest,proto3" json:"object_digest,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ObjectRef) Reset() {
	*x = ObjectRef{}
	mi := &file_Sui_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectRef) ProtoMessage() {}

func (x *ObjectRef) ProtoReflect() protoreflect.Message {
	mi := &file_Sui_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectRef.ProtoReflect.Descriptor instead.
func (*ObjectRef) Descriptor() ([]byte, []int) {
	return file_Sui_proto_rawDescGZIP(), []int{0}
}

func (x *ObjectRef) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *ObjectRef) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ObjectRef) GetObjectDigest() string {
	if x != nil {
		return x.ObjectDigest
	}
	return ""
}

// Optional amount.
type Amount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Amount        uint64                 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Amount) Reset() {
	*x = Amount{}
	mi := &file_Sui_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Amount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Amount) ProtoMessage() {}

func (x *Amount) ProtoReflect() protoreflect.Message {
	mi := &file_Sui_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Amount.ProtoReflect.Descriptor instead.
func (*Amount) Descriptor() ([]byte, []int) {
	return file_Sui_proto_rawDescGZIP(), []int{1}
}

func (x *Amount) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// Base64 encoded msg to sign (string)
type SignDirect struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Obtain by calling any write RpcJson on SUI
	UnsignedTxMsg string `protobuf:"bytes,1,opt,name=unsigned_tx_msg,json=unsignedTxMsg,proto3" json:"unsigned_tx_msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignDirect) Reset() {
	*x = SignDirect{}
	mi := &file_Sui_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignDirect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignDirect) ProtoMessage() {}

func (x *SignDirect) ProtoReflect() protoreflect.Message {
	mi := &file_Sui_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignDirect.ProtoReflect.Descriptor instead.
func (*SignDirect) Descriptor() ([]byte, []int) {
	return file_Sui_proto_rawDescGZIP(), []int{2}
}

func (x *SignDirect) GetUnsignedTxMsg() string {
	if x != nil {
		return x.UnsignedTxMsg
	}
	return ""
}

// Send `Coin<T>` to a list of addresses, where T can be any coin type, following a list of amounts.
// The object specified in the gas field will be used to pay the gas fee for the transaction.
// The gas object can not appear in input_coins.
// https://docs.sui.io/sui-api-ref#unsafe_pay
type Pay struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Sui coins to be used in this transaction, including the coin for gas payment.
	InputCoins []*ObjectRef `protobuf:"bytes,1,rep,name=input_coins,json=inputCoins,proto3" json:"input_coins,omitempty"`
	// The recipients' addresses, the length of this vector must be the same as amounts.
	Recipients []string `protobuf:"bytes,2,rep,name=recipients,proto3" json:"recipients,omitempty"`
	// The amounts to be transferred to recipients, following the same order.
	Amounts []uint64 `protobuf:"varint,3,rep,packed,name=amounts,proto3" json:"amounts,omitempty"`
	// Gas object to be used in this transaction.
	Gas           *ObjectRef `protobuf:"bytes,4,opt,name=gas,proto3" json:"gas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pay) Reset() {
	*x = Pay{}
	mi := &file_Sui_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pay) ProtoMessage() {}

func (x *Pay) ProtoReflect() protoreflect.Message {
	mi := &file_Sui_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pay.ProtoReflect.Descriptor instead.
func (*Pay) Descriptor() ([]byte, []int) {
	return file_Sui_proto_rawDescGZIP(), []int{3}
}

func (x *Pay) GetInputCoins() []*ObjectRef {
	if x != nil {
		return x.InputCoins
	}
	return nil
}

func (x *Pay) GetRecipients() []string {
	if x != nil {
		return x.Recipients
	}
	return nil
}

func (x *Pay) GetAmounts() []uint64 {
	if x != nil {
		return x.Amounts
	}
	return nil
}

func (x *Pay) GetGas() *ObjectRef {
	if x != nil {
		return x.Gas
	}
	return nil
}

// Send SUI coins to a list of addresses, following a list of amounts.
// This is for SUI coin only and does not require a separate gas coin object.
// https://docs.sui.io/sui-api-ref#unsafe_paysui
type PaySui struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Sui coins to be used in this transaction, including the coin for gas payment.
	InputCoins []*ObjectRef `protobuf:"bytes,1,rep,name=input_coins,json=inputCoins,proto3" json:"input_coins,omitempty"`
	// The recipients' addresses, the length of this vector must be the same as amounts.
	Recipients []string `protobuf:"bytes,2,rep,name=recipients,proto3" json:"recipients,omitempty"`
	// The amounts to be transferred to recipients, following the same order.
	Amounts       []uint64 `protobuf:"varint,3,rep,packed,name=amounts,proto3" json:"amounts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PaySui) Reset() {
	*x = PaySui{}
	mi := &file_Sui_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaySui) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaySui) ProtoMessage() {}

func (x *PaySui) ProtoReflect() protoreflect.Message {
	mi := &file_Sui_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaySui.ProtoReflect.Descriptor instead.
func (*PaySui) Descriptor() ([]byte, []int) {
	return file_Sui_proto_rawDescGZIP(), []int{4}
}

func (x *PaySui) GetInputCoins() []*ObjectRef {
	if x != nil {
		return x.InputCoins
	}
	return nil
}

func (x *PaySui) GetRecipients() []string {
	if x != nil {
		return x.Recipients
	}
	return nil
}

func (x *PaySui) GetAmounts() []uint64 {
	if x != nil {
		return x.Amounts
	}
	return nil
}

// Send all SUI coins to one recipient.
// This is for SUI coin only and does not require a separate gas coin object.
// https://docs.sui.io/sui-api-ref#unsafe_payallsui
type PayAllSui struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Sui coins to be used in this transaction, including the coin for gas payment.
	InputCoins []*ObjectRef `protobuf:"bytes,1,rep,name=input_coins,json=inputCoins,proto3" json:"input_coins,omitempty"`
	// The recipient address.
	Recipient     string `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PayAllSui) Reset() {
	*x = PayAllSui{}
	mi := &file_Sui_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayAllSui) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayAllSui) ProtoMessage() {}

func (x *PayAllSui) ProtoReflect() protoreflect.Message {
	mi := &file_Sui_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayAllSui.ProtoReflect.Descriptor instead.
func (*PayAllSui) Descriptor() ([]byte, []int) {
	return file_Sui_proto_rawDescGZIP(), []int{5}
}

func (x *PayAllSui) GetInputCoins() []*ObjectRef {
	if x != nil {
		return x.InputCoins
	}
	return nil
}

func (x *PayAllSui) GetRecipient() string {
	if x != nil {
		return x.Recipient
	}
	return ""
}

// Add stake to a validator's staking pool using multiple coins and amount.
// https://docs.sui.io/sui-api-ref#unsafe_requestaddstake
type RequestAddStake struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Coin<SUI> objects to stake.
	Coins []*ObjectRef `protobuf:"bytes,1,rep,name=coins,proto3" json:"coins,omitempty"`
	// Optional stake amount.
	Amount *Amount `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// The validator's Sui address.
	Validator string `protobuf:"bytes,3,opt,name=validator,proto3" json:"validator,omitempty"`
	// Gas object to be used in this transaction.
	Gas           *ObjectRef `protobuf:"bytes,4,opt,name=gas,proto3" json:"gas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestAddStake) Reset() {
	*x = RequestAddStake{}
	mi := &file_Sui_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestAddStake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestAddStake) ProtoMessage() {}

func (x *RequestAddStake) ProtoReflect() protoreflect.Message {
	mi := &file_Sui_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestAddStake.ProtoReflect.Descriptor instead.
func (*RequestAddStake) Descriptor() ([]byte, []int) {
	return file_Sui_proto_rawDescGZIP(), []int{6}
}

func (x *RequestAddStake) GetCoins() []*ObjectRef {
	if x != nil {
		return x.Coins
	}
	return nil
}

func (x *RequestAddStake) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *RequestAddStake) GetValidator() string {
	if x != nil {
		return x.Validator
	}
	return ""
}

func (x *RequestAddStake) GetGas() *ObjectRef {
	if x != nil {
		return x.Gas
	}
	return nil
}

// Withdraw stake from a validator's staking pool.
// https://docs.sui.io/sui-api-ref#unsafe_requestwithdrawstake
type RequestWithdrawStake struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// StakedSui object ID.
	StakedSui *ObjectRef `protobuf:"bytes,1,opt,name=staked_sui,json=stakedSui,proto3" json:"staked_sui,omitempty"`
	// Gas object to be used in this transaction.
	Gas           *ObjectRef `protobuf:"bytes,2,opt,name=gas,proto3" json:"gas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestWithdrawStake) Reset() {
	*x = RequestWithdrawStake{}
	mi := &file_Sui_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestWithdrawStake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestWithdrawStake) ProtoMessage() {}

func (x *RequestWithdrawStake) ProtoReflect() protoreflect.Message {
	mi := &file_Sui_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestWithdrawStake.ProtoReflect.Descriptor instead.
func (*RequestWithdrawStake) Descriptor() ([]byte, []int) {
	return file_Sui_proto_rawDescGZIP(), []int{7}
}

func (x *RequestWithdrawStake) GetStakedSui() *ObjectRef {
	if x != nil {
		return x.StakedSui
	}
	return nil
}

func (x *RequestWithdrawStake) GetGas() *ObjectRef {
	if x != nil {
		return x.Gas
	}
	return nil
}

// / Transfer an object from one address to another. The object's type must allow public transfers.
// / https://docs.sui.io/sui-api-ref#unsafe_transferobject
type TransferObject struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Object ID to be transferred.
	Object *ObjectRef `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	// The recipient address.
	Recipient string `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// Gas object to be used in this transaction.
	Gas           *ObjectRef `protobuf:"bytes,3,opt,name=gas,proto3" json:"gas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransferObject) Reset() {
	*x = TransferObject{}
	mi := &file_Sui_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferObject) ProtoMessage() {}

func (x *TransferObject) ProtoReflect() protoreflect.Message {
	mi := &file_Sui_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferObject.ProtoReflect.Descriptor instead.
func (*TransferObject) Descriptor() ([]byte, []int) {
	return file_Sui_proto_rawDescGZIP(), []int{8}
}

func (x *TransferObject) GetObject() *ObjectRef {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *TransferObject) GetRecipient() string {
	if x != nil {
		return x.Recipient
	}
	return ""
}

func (x *TransferObject) GetGas() *ObjectRef {
	if x != nil {
		return x.Gas
	}
	return nil
}

// Input data necessary to create a signed transaction.
type SigningInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Private key to sign the transaction (bytes).
	PrivateKey []byte `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// Optional transaction signer.
	// Needs to be set if no private key provided at `TransactionCompiler` module.
	Signer string `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
	// Types that are valid to be assigned to TransactionPayload:
	//
	//	*SigningInput_SignDirectMessage
	//	*SigningInput_Pay
	//	*SigningInput_PaySui
	//	*SigningInput_PayAllSui
	//	*SigningInput_RequestAddStake
	//	*SigningInput_RequestWithdrawStake
	//	*SigningInput_TransferObject
	//	*SigningInput_RawJson
	TransactionPayload isSigningInput_TransactionPayload `protobuf_oneof:"transaction_payload"`
	// The gas budget, the transaction will fail if the gas cost exceed the budget.
	GasBudget uint64 `protobuf:"varint,12,opt,name=gas_budget,json=gasBudget,proto3" json:"gas_budget,omitempty"`
	// Reference gas price.
	ReferenceGasPrice uint64 `protobuf:"varint,13,opt,name=reference_gas_price,json=referenceGasPrice,proto3" json:"reference_gas_price,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SigningInput) Reset() {
	*x = SigningInput{}
	mi := &file_Sui_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningInput) ProtoMessage() {}

func (x *SigningInput) ProtoReflect() protoreflect.Message {
	mi := &file_Sui_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningInput.ProtoReflect.Descriptor instead.
func (*SigningInput) Descriptor() ([]byte, []int) {
	return file_Sui_proto_rawDescGZIP(), []int{9}
}

func (x *SigningInput) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *SigningInput) GetSigner() string {
	if x != nil {
		return x.Signer
	}
	return ""
}

func (x *SigningInput) GetTransactionPayload() isSigningInput_TransactionPayload {
	if x != nil {
		return x.TransactionPayload
	}
	return nil
}

func (x *SigningInput) GetSignDirectMessage() *SignDirect {
	if x != nil {
		if x, ok := x.TransactionPayload.(*SigningInput_SignDirectMessage); ok {
			return x.SignDirectMessage
		}
	}
	return nil
}

func (x *SigningInput) GetPay() *Pay {
	if x != nil {
		if x, ok := x.TransactionPayload.(*SigningInput_Pay); ok {
			return x.Pay
		}
	}
	return nil
}

func (x *SigningInput) GetPaySui() *PaySui {
	if x != nil {
		if x, ok := x.TransactionPayload.(*SigningInput_PaySui); ok {
			return x.PaySui
		}
	}
	return nil
}

func (x *SigningInput) GetPayAllSui() *PayAllSui {
	if x != nil {
		if x, ok := x.TransactionPayload.(*SigningInput_PayAllSui); ok {
			return x.PayAllSui
		}
	}
	return nil
}

func (x *SigningInput) GetRequestAddStake() *RequestAddStake {
	if x != nil {
		if x, ok := x.TransactionPayload.(*SigningInput_RequestAddStake); ok {
			return x.RequestAddStake
		}
	}
	return nil
}

func (x *SigningInput) GetRequestWithdrawStake() *RequestWithdrawStake {
	if x != nil {
		if x, ok := x.TransactionPayload.(*SigningInput_RequestWithdrawStake); ok {
			return x.RequestWithdrawStake
		}
	}
	return nil
}

func (x *SigningInput) GetTransferObject() *TransferObject {
	if x != nil {
		if x, ok := x.TransactionPayload.(*SigningInput_TransferObject); ok {
			return x.TransferObject
		}
	}
	return nil
}

func (x *SigningInput) GetRawJson() string {
	if x != nil {
		if x, ok := x.TransactionPayload.(*SigningInput_RawJson); ok {
			return x.RawJson
		}
	}
	return ""
}

func (x *SigningInput) GetGasBudget() uint64 {
	if x != nil {
		return x.GasBudget
	}
	return 0
}

func (x *SigningInput) GetReferenceGasPrice() uint64 {
	if x != nil {
		return x.ReferenceGasPrice
	}
	return 0
}

type isSigningInput_TransactionPayload interface {
	isSigningInput_TransactionPayload()
}

type SigningInput_SignDirectMessage struct {
	SignDirectMessage *SignDirect `protobuf:"bytes,3,opt,name=sign_direct_message,json=signDirectMessage,proto3,oneof"`
}

type SigningInput_Pay struct {
	Pay *Pay `protobuf:"bytes,4,opt,name=pay,proto3,oneof"`
}

type SigningInput_PaySui struct {
	PaySui *PaySui `protobuf:"bytes,5,opt,name=pay_sui,json=paySui,proto3,oneof"`
}

type SigningInput_PayAllSui struct {
	PayAllSui *PayAllSui `protobuf:"bytes,6,opt,name=pay_all_sui,json=payAllSui,proto3,oneof"`
}

type SigningInput_RequestAddStake struct {
	RequestAddStake *RequestAddStake `protobuf:"bytes,7,opt,name=request_add_stake,json=requestAddStake,proto3,oneof"`
}

type SigningInput_RequestWithdrawStake struct {
	RequestWithdrawStake *RequestWithdrawStake `protobuf:"bytes,8,opt,name=request_withdraw_stake,json=requestWithdrawStake,proto3,oneof"`
}

type SigningInput_TransferObject struct {
	TransferObject *TransferObject `protobuf:"bytes,9,opt,name=transfer_object,json=transferObject,proto3,oneof"`
}

type SigningInput_RawJson struct {
	RawJson string `protobuf:"bytes,10,opt,name=raw_json,json=rawJson,proto3,oneof"`
}

func (*SigningInput_SignDirectMessage) isSigningInput_TransactionPayload() {}

func (*SigningInput_Pay) isSigningInput_TransactionPayload() {}

func (*SigningInput_PaySui) isSigningInput_TransactionPayload() {}

func (*SigningInput_PayAllSui) isSigningInput_TransactionPayload() {}

func (*SigningInput_RequestAddStake) isSigningInput_TransactionPayload() {}

func (*SigningInput_RequestWithdrawStake) isSigningInput_TransactionPayload() {}

func (*SigningInput_TransferObject) isSigningInput_TransactionPayload() {}

func (*SigningInput_RawJson) isSigningInput_TransactionPayload() {}

// Transaction signing output.
type SigningOutput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / The raw transaction without indent in base64
	UnsignedTx string `protobuf:"bytes,1,opt,name=unsigned_tx,json=unsignedTx,proto3" json:"unsigned_tx,omitempty"`
	// / The signature encoded in base64
	Signature string `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// Error code, 0 is ok, other codes will be treated as errors.
	Error common.SigningError `protobuf:"varint,3,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// Error description.
	ErrorMessage  string `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningOutput) Reset() {
	*x = SigningOutput{}
	mi := &file_Sui_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningOutput) ProtoMessage() {}

func (x *SigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_Sui_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningOutput.ProtoReflect.Descriptor instead.
func (*SigningOutput) Descriptor() ([]byte, []int) {
	return file_Sui_proto_rawDescGZIP(), []int{10}
}

func (x *SigningOutput) GetUnsignedTx() string {
	if x != nil {
		return x.UnsignedTx
	}
	return ""
}

func (x *SigningOutput) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *SigningOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *SigningOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Message signing input.
type MessageSigningInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The secret private key used for signing (32 bytes).
	PrivateKey []byte `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// A UTF-8 regular message to sign.
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageSigningInput) Reset() {
	*x = MessageSigningInput{}
	mi := &file_Sui_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageSigningInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSigningInput) ProtoMessage() {}

func (x *MessageSigningInput) ProtoReflect() protoreflect.Message {
	mi := &file_Sui_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSigningInput.ProtoReflect.Descriptor instead.
func (*MessageSigningInput) Descriptor() ([]byte, []int) {
	return file_Sui_proto_rawDescGZIP(), []int{11}
}

func (x *MessageSigningInput) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *MessageSigningInput) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Message signing output.
type MessageSigningOutput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The signature, a 97-byte array encoded in base64.
	// The first byte indicates the signature scheme (currently set to 0x00, as we only support ED25519).
	// The following 64 bytes represent the raw ED25519 signature, while the next 32 bytes contain the public key.
	Signature string `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	// error code, 0 is ok, other codes will be treated as errors
	Error common.SigningError `protobuf:"varint,2,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// error code description
	ErrorMessage  string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageSigningOutput) Reset() {
	*x = MessageSigningOutput{}
	mi := &file_Sui_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageSigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSigningOutput) ProtoMessage() {}

func (x *MessageSigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_Sui_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSigningOutput.ProtoReflect.Descriptor instead.
func (*MessageSigningOutput) Descriptor() ([]byte, []int) {
	return file_Sui_proto_rawDescGZIP(), []int{12}
}

func (x *MessageSigningOutput) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *MessageSigningOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *MessageSigningOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Message verifying input.
type MessageVerifyingInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The message signed.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// Public key that will verify the message.
	// It must be equal to the public key encoded in the signature.
	PublicKey []byte `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// The signature, a 97-byte array encoded in base64.
	// Same as the signature field in MessageSigningOutput.
	Signature     string `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageVerifyingInput) Reset() {
	*x = MessageVerifyingInput{}
	mi := &file_Sui_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageVerifyingInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageVerifyingInput) ProtoMessage() {}

func (x *MessageVerifyingInput) ProtoReflect() protoreflect.Message {
	mi := &file_Sui_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageVerifyingInput.ProtoReflect.Descriptor instead.
func (*MessageVerifyingInput) Descriptor() ([]byte, []int) {
	return file_Sui_proto_rawDescGZIP(), []int{13}
}

func (x *MessageVerifyingInput) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MessageVerifyingInput) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *MessageVerifyingInput) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

var File_Sui_proto protoreflect.FileDescriptor

const file_Sui_proto_rawDesc = "" +
	"\n" +
	"\tSui.proto\x12\fTW.Sui.Proto\x1a\fCommon.proto\"g\n" +
	"\tObjectRef\x12\x1b\n" +
	"\tobject_id\x18\x01 \x01(\tR\bobjectId\x12\x18\n" +
	"\aversion\x18\x02 \x01(\x04R\aversion\x12#\n" +
	"\robject_digest\x18\x03 \x01(\tR\fobjectDigest\" \n" +
	"\x06Amount\x12\x16\n" +
	"\x06amount\x18\x01 \x01(\x04R\x06amount\"4\n" +
	"\n" +
	"SignDirect\x12&\n" +
	"\x0funsigned_tx_msg\x18\x01 \x01(\tR\runsignedTxMsg\"\xa4\x01\n" +
	"\x03Pay\x128\n" +
	"\vinput_coins\x18\x01 \x03(\v2\x17.TW.Sui.Proto.ObjectRefR\n" +
	"inputCoins\x12\x1e\n" +
	"\n" +
	"recipients\x18\x02 \x03(\tR\n" +
	"recipients\x12\x18\n" +
	"\aamounts\x18\x03 \x03(\x04R\aamounts\x12)\n" +
	"\x03gas\x18\x04 \x01(\v2\x17.TW.Sui.Proto.ObjectRefR\x03gas\"|\n" +
	"\x06PaySui\x128\n" +
	"\vinput_coins\x18\x01 \x03(\v2\x17.TW.Sui.Proto.ObjectRefR\n" +
	"inputCoins\x12\x1e\n" +
	"\n" +
	"recipients\x18\x02 \x03(\tR\n" +
	"recipients\x12\x18\n" +
	"\aamounts\x18\x03 \x03(\x04R\aamounts\"c\n" +
	"\tPayAllSui\x128\n" +
	"\vinput_coins\x18\x01 \x03(\v2\x17.TW.Sui.Proto.ObjectRefR\n" +
	"inputCoins\x12\x1c\n" +
	"\trecipient\x18\x02 \x01(\tR\trecipient\"\xb7\x01\n" +
	"\x0fRequestAddStake\x12-\n" +
	"\x05coins\x18\x01 \x03(\v2\x17.TW.Sui.Proto.ObjectRefR\x05coins\x12,\n" +
	"\x06amount\x18\x02 \x01(\v2\x14.TW.Sui.Proto.AmountR\x06amount\x12\x1c\n" +
	"\tvalidator\x18\x03 \x01(\tR\tvalidator\x12)\n" +
	"\x03gas\x18\x04 \x01(\v2\x17.TW.Sui.Proto.ObjectRefR\x03gas\"y\n" +
	"\x14RequestWithdrawStake\x126\n" +
	"\n" +
	"staked_sui\x18\x01 \x01(\v2\x17.TW.Sui.Proto.ObjectRefR\tstakedSui\x12)\n" +
	"\x03gas\x18\x02 \x01(\v2\x17.TW.Sui.Proto.ObjectRefR\x03gas\"\x8a\x01\n" +
	"\x0eTransferObject\x12/\n" +
	"\x06object\x18\x01 \x01(\v2\x17.TW.Sui.Proto.ObjectRefR\x06object\x12\x1c\n" +
	"\trecipient\x18\x02 \x01(\tR\trecipient\x12)\n" +
	"\x03gas\x18\x03 \x01(\v2\x17.TW.Sui.Proto.ObjectRefR\x03gas\"\x9b\x05\n" +
	"\fSigningInput\x12\x1f\n" +
	"\vprivate_key\x18\x01 \x01(\fR\n" +
	"privateKey\x12\x16\n" +
	"\x06signer\x18\x02 \x01(\tR\x06signer\x12J\n" +
	"\x13sign_direct_message\x18\x03 \x01(\v2\x18.TW.Sui.Proto.SignDirectH\x00R\x11signDirectMessage\x12%\n" +
	"\x03pay\x18\x04 \x01(\v2\x11.TW.Sui.Proto.PayH\x00R\x03pay\x12/\n" +
	"\apay_sui\x18\x05 \x01(\v2\x14.TW.Sui.Proto.PaySuiH\x00R\x06paySui\x129\n" +
	"\vpay_all_sui\x18\x06 \x01(\v2\x17.TW.Sui.Proto.PayAllSuiH\x00R\tpayAllSui\x12K\n" +
	"\x11request_add_stake\x18\a \x01(\v2\x1d.TW.Sui.Proto.RequestAddStakeH\x00R\x0frequestAddStake\x12Z\n" +
	"\x16request_withdraw_stake\x18\b \x01(\v2\".TW.Sui.Proto.RequestWithdrawStakeH\x00R\x14requestWithdrawStake\x12G\n" +
	"\x0ftransfer_object\x18\t \x01(\v2\x1c.TW.Sui.Proto.TransferObjectH\x00R\x0etransferObject\x12\x1b\n" +
	"\braw_json\x18\n" +
	" \x01(\tH\x00R\arawJson\x12\x1d\n" +
	"\n" +
	"gas_budget\x18\f \x01(\x04R\tgasBudget\x12.\n" +
	"\x13reference_gas_price\x18\r \x01(\x04R\x11referenceGasPriceB\x15\n" +
	"\x13transaction_payload\"\xa8\x01\n" +
	"\rSigningOutput\x12\x1f\n" +
	"\vunsigned_tx\x18\x01 \x01(\tR\n" +
	"unsignedTx\x12\x1c\n" +
	"\tsignature\x18\x02 \x01(\tR\tsignature\x123\n" +
	"\x05error\x18\x03 \x01(\x0e2\x1d.TW.Common.Proto.SigningErrorR\x05error\x12#\n" +
	"\rerror_message\x18\x04 \x01(\tR\ferrorMessage\"P\n" +
	"\x13MessageSigningInput\x12\x1f\n" +
	"\vprivate_key\x18\x01 \x01(\fR\n" +
	"privateKey\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\x8e\x01\n" +
	"\x14MessageSigningOutput\x12\x1c\n" +
	"\tsignature\x18\x01 \x01(\tR\tsignature\x123\n" +
	"\x05error\x18\x02 \x01(\x0e2\x1d.TW.Common.Proto.SigningErrorR\x05error\x12#\n" +
	"\rerror_message\x18\x03 \x01(\tR\ferrorMessage\"n\n" +
	"\x15MessageVerifyingInput\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"public_key\x18\x02 \x01(\fR\tpublicKey\x12\x1c\n" +
	"\tsignature\x18\x03 \x01(\tR\tsignatureB\x17\n" +
	"\x15wallet.core.jni.protob\x06proto3"

var (
	file_Sui_proto_rawDescOnce sync.Once
	file_Sui_proto_rawDescData []byte
)

func file_Sui_proto_rawDescGZIP() []byte {
	file_Sui_proto_rawDescOnce.Do(func() {
		file_Sui_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_Sui_proto_rawDesc), len(file_Sui_proto_rawDesc)))
	})
	return file_Sui_proto_rawDescData
}

var file_Sui_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_Sui_proto_goTypes = []any{
	(*ObjectRef)(nil),             // 0: TW.Sui.Proto.ObjectRef
	(*Amount)(nil),                // 1: TW.Sui.Proto.Amount
	(*SignDirect)(nil),            // 2: TW.Sui.Proto.SignDirect
	(*Pay)(nil),                   // 3: TW.Sui.Proto.Pay
	(*PaySui)(nil),                // 4: TW.Sui.Proto.PaySui
	(*PayAllSui)(nil),             // 5: TW.Sui.Proto.PayAllSui
	(*RequestAddStake)(nil),       // 6: TW.Sui.Proto.RequestAddStake
	(*RequestWithdrawStake)(nil),  // 7: TW.Sui.Proto.RequestWithdrawStake
	(*TransferObject)(nil),        // 8: TW.Sui.Proto.TransferObject
	(*SigningInput)(nil),          // 9: TW.Sui.Proto.SigningInput
	(*SigningOutput)(nil),         // 10: TW.Sui.Proto.SigningOutput
	(*MessageSigningInput)(nil),   // 11: TW.Sui.Proto.MessageSigningInput
	(*MessageSigningOutput)(nil),  // 12: TW.Sui.Proto.MessageSigningOutput
	(*MessageVerifyingInput)(nil), // 13: TW.Sui.Proto.MessageVerifyingInput
	(common.SigningError)(0),      // 14: TW.Common.Proto.SigningError
}
var file_Sui_proto_depIdxs = []int32{
	0,  // 0: TW.Sui.Proto.Pay.input_coins:type_name -> TW.Sui.Proto.ObjectRef
	0,  // 1: TW.Sui.Proto.Pay.gas:type_name -> TW.Sui.Proto.ObjectRef
	0,  // 2: TW.Sui.Proto.PaySui.input_coins:type_name -> TW.Sui.Proto.ObjectRef
	0,  // 3: TW.Sui.Proto.PayAllSui.input_coins:type_name -> TW.Sui.Proto.ObjectRef
	0,  // 4: TW.Sui.Proto.RequestAddStake.coins:type_name -> TW.Sui.Proto.ObjectRef
	1,  // 5: TW.Sui.Proto.RequestAddStake.amount:type_name -> TW.Sui.Proto.Amount
	0,  // 6: TW.Sui.Proto.RequestAddStake.gas:type_name -> TW.Sui.Proto.ObjectRef
	0,  // 7: TW.Sui.Proto.RequestWithdrawStake.staked_sui:type_name -> TW.Sui.Proto.ObjectRef
	0,  // 8: TW.Sui.Proto.RequestWithdrawStake.gas:type_name -> TW.Sui.Proto.ObjectRef
	0,  // 9: TW.Sui.Proto.TransferObject.object:type_name -> TW.Sui.Proto.ObjectRef
	0,  // 10: TW.Sui.Proto.TransferObject.gas:type_name -> TW.Sui.Proto.ObjectRef
	2,  // 11: TW.Sui.Proto.SigningInput.sign_direct_message:type_name -> TW.Sui.Proto.SignDirect
	3,  // 12: TW.Sui.Proto.SigningInput.pay:type_name -> TW.Sui.Proto.Pay
	4,  // 13: TW.Sui.Proto.SigningInput.pay_sui:type_name -> TW.Sui.Proto.PaySui
	5,  // 14: TW.Sui.Proto.SigningInput.pay_all_sui:type_name -> TW.Sui.Proto.PayAllSui
	6,  // 15: TW.Sui.Proto.SigningInput.request_add_stake:type_name -> TW.Sui.Proto.RequestAddStake
	7,  // 16: TW.Sui.Proto.SigningInput.request_withdraw_stake:type_name -> TW.Sui.Proto.RequestWithdrawStake
	8,  // 17: TW.Sui.Proto.SigningInput.transfer_object:type_name -> TW.Sui.Proto.TransferObject
	14, // 18: TW.Sui.Proto.SigningOutput.error:type_name -> TW.Common.Proto.SigningError
	14, // 19: TW.Sui.Proto.MessageSigningOutput.error:type_name -> TW.Common.Proto.SigningError
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_Sui_proto_init() }
func file_Sui_proto_init() {
	if File_Sui_proto != nil {
		return
	}
	file_Sui_proto_msgTypes[9].OneofWrappers = []any{
		(*SigningInput_SignDirectMessage)(nil),
		(*SigningInput_Pay)(nil),
		(*SigningInput_PaySui)(nil),
		(*SigningInput_PayAllSui)(nil),
		(*SigningInput_RequestAddStake)(nil),
		(*SigningInput_RequestWithdrawStake)(nil),
		(*SigningInput_TransferObject)(nil),
		(*SigningInput_RawJson)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_Sui_proto_rawDesc), len(file_Sui_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Sui_proto_goTypes,
		DependencyIndexes: file_Sui_proto_depIdxs,
		MessageInfos:      file_Sui_proto_msgTypes,
	}.Build()
	File_Sui_proto = out.File
	file_Sui_proto_goTypes = nil
	file_Sui_proto_depIdxs = nil
}
