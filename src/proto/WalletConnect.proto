syntax = "proto3";

package TW.WalletConnect.Proto;
option java_package = "wallet.core.jni.proto";

import "Binance.proto";
import "Common.proto";
import "Solana.proto";

// The transaction protocol may differ from version to version.
enum Protocol {
    V2 = 0;
}

// WalletConnect request method.
enum Method {
    Unknown = 0;
    // cosmos_signAmino
    CosmosSignAmino = 1;
    // solana_signTransaction
    SolanaSignTransaction = 2;
}

message ParseRequestInput {
    // A protocol version.
    Protocol protocol = 1;

    // A signing method like "cosmos_signAmino" or "eth_signTransaction".
    Method method = 2;

    // Transaction payload to sign.
    // Basically, a JSON object.
    string payload = 3;
}

message ParseRequestOutput {
    // OK (=0) or other codes in case of error
    Common.Proto.SigningError error = 1;

    // error description in case of error
    string error_message = 2;

    // Prepared unsigned transaction input, on the source chain. Some fields must be completed, and it has to be signed.
    oneof signing_input_oneof {
        Binance.Proto.SigningInput binance = 3;
        Solana.Proto.SigningInput solana = 4;
    }
}
